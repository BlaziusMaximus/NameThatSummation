{"version":3,"sources":["firebase.js","components/team-page/TeamPageHeader.js","components/team-page/TeamPageBody.js","components/admin-page/AdminConsole.js","components/game-page/GameMainMenu.js","components/game-page/GameChart.js","components/game-page/GameQuestion.js","components/game-page/GameWaitingRoom.js","components/game-page/GameLeaderboard.js","components/game-page/GameReview.js","components/game-page/DevPanel.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","TeamPageHeader","onGoToGameClick","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Item","Button","onClick","Link","href","TeamPageBody","Container","Row","style","width","height","ResponsiveEmbed","aspectRatio","src","AdminConsole","useState","setGameInitButton","size","block","gameInitButton","GameMainMenu","onGoToTeamClick","onSubmitName","showSettingsModal","setShowSettingsModal","handleCloseSettings","Modal","show","onHide","aria-labelledby","centered","Header","closeButton","Title","Body","Form","Check","type","label","Footer","Col","sm","onSubmit","e","preventDefault","target","value","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","GameChart","data","margin","top","right","bottom","left","xScale","yScale","min","max","stacked","reverse","yFormat","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","GameQuestion","displayName","chartData","questionTime","endQuestion","selectAnswer","showFeedbackModal","setShowFeedbackModal","hideFeedbackModal","answerChoiceIndex","answer","setAnswerChoiceIndex","Array","latexExp","length","fill","answersClicked","setAnswersClicked","setAnswerTime","handleAnswerSelect","parseInt","currentTarget","newAnsClicked","timer","maxTimer","setTimer","cd","slice","chartDataSlice","setChartDataSlice","useEffect","interval","setInterval","x","parseFloat","l","sliceI","Math","floor","clearInterval","Card","as","map","index","onClickCapture","disabled","tex","pointerEvents","display","GameWaitingRoom","playersList","player","name","city","GameLeaderboard","answerTime","nextQuestion","rankedPlayers","sort","a","b","console","log","topPlayers","fluid","xs","GameReview","localPlayer","chartsData","Tab","defaultActiveKey","ListGroup","chart","answers","Content","Pane","eventKey","DevPanel","goToMainMenu","goToLeaderboard","goToQuestion","goToReview","goToWaitingRoom","goToAdmin","setDisplayName","SAMPLE_CSV","App","pageStates","MAIN_MENU","WAITING_ROOM","QUESTION","LEADERBOARD","REVIEW","pageState","setPageState","questionIndex","setQuestionIndex","localPlayerObj","setLocalPlayerObj","collection","doc","set","then","docRef","catch","error","t","handleAnswerSubmit","sample_data","wrongAnswers","times","score","maxScore","get","exists","playerObject","playerAnswers","undefined","playerTimes","players","setPlayers","React","docs","fetchData","xEnd","xStart","xInc","evalChoices","answerIndex","keys","String","evaluatex","numQuestions","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2bb6a5f7.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\n// const firebaseConfig = {\r\n//     apiKey: \"AIzaSyBzSeHJ4YWxiLpE09A7mzpYUxUfOWeq3SU\",\r\n//     authDomain: \"sum-that-notation-13637.firebaseapp.com\",\r\n//     projectId: \"sum-that-notation-13637\",\r\n//     storageBucket: \"sum-that-notation-13637.appspot.com\",\r\n//     messagingSenderId: \"912432195227\",\r\n//     appId: \"1:912432195227:web:bc908eb3957185b597483e\",\r\n//     measurementId: \"G-MCKECB516P\"\r\n// };\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBxdroTYNIaxZcwj75RaYMU601PjTzoRnM\",\r\n    authDomain: \"comp585-e8338.firebaseapp.com\",\r\n    projectId: \"comp585-e8338\",\r\n    storageBucket: \"comp585-e8338.appspot.com\",\r\n    messagingSenderId: \"1011171509531\",\r\n    appId: \"1:1011171509531:web:fa24c5896cbcb16e6cbfbe\",\r\n    measurementId: \"G-V22WJ91GTT\"\r\n};\r\n\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const auth = firebase.auth;\r\nexport const db = firebase.firestore();","import Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TeamPageHeader = ({ onGoToGameClick }) => {\r\n\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand>Name That Summation</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\" />\r\n            <Nav>\r\n                <Nav.Item className=\"mr-2\">\r\n                <Button onClick={onGoToGameClick}>Go to <strong>Game</strong></Button>\r\n                </Nav.Item>\r\n                <Nav.Link href=\"https://github.com/BlaziusMaximus/NameThatSummation\">\r\n                Go to <strong>GitHub</strong>\r\n                </Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nTeamPageHeader.propTypes = {\r\n    onGoToGameClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default TeamPageHeader;","\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ResponsiveEmbed from 'react-bootstrap/ResponsiveEmbed';\r\n\r\nconst TeamPageBody = () => {\r\n    return (\r\n        <Container>\r\n            <Row><h3>Team/Client Information</h3></Row>\r\n            <Row><p>Adam Cogdell (adamc77@live.unc.edu): Game Architect, Client Manager</p></Row>\r\n            <Row><p>Emre Yanmis (emre61@live.unc.edu): Software Architect</p></Row>\r\n            <Row><p>Tiger Deng (y.deng@unc.edu): Project Manager, Editor</p></Row>\r\n            <Row><p>John Majikes (jmajikes@cs.unc.edu): Client</p></Row>\r\n\r\n            <Row><h3 id=\"meeting-information\">Meeting Information</h3></Row>\r\n            <Row><p>Client Meetings: Tuesday @ 2:30PM</p></Row>\r\n            <Row><p>Professor Meetings (recitation): Thursday 3:30-4:30PM</p></Row>\r\n            <Row><p>Team Meetings: Monday @ 6:00PM</p></Row>\r\n\r\n            <Row>\r\n                <div style={{ width: '8.5in', height: 'auto' }}>\r\n                    <ResponsiveEmbed aspectRatio=\"1by1\">\r\n                        <iframe src=\"https://docs.google.com/document/d/e/2PACX-1vR3nIMv9RltRskz5HY8NZmztMdaF0d1Mfb3Hda5n9-c8VyV_3afAFM-4RU_UVSMI2WajPdJPZLxVgmS/pub?embedded=true\" />\r\n                    </ResponsiveEmbed>\r\n                </div>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TeamPageBody;","import {useState} from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n// import GameChart from './GameChart';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst AdminConsole = ({  }) => {\r\n\r\n    const initializeGame = () => {\r\n        setGameInitButton(<></>);\r\n        \r\n    }\r\n\r\n    const [gameInitButton, setGameInitButton] = useState(\r\n        <Button onClick={initializeGame} id=\"startgame\" variant=\"danger\" size=\"lg\" block>Initialize Game</Button>\r\n    );\r\n\r\n    return (\r\n    <>\r\n        {gameInitButton}\r\n    </>);\r\n}\r\n\r\nAdminConsole.propTypes = {\r\n    \r\n}\r\n\r\nexport default AdminConsole;","import Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\n\r\nconst GameMainMenu = ({ onGoToTeamClick, onSubmitName }) => {\r\n\r\n    const [showSettingsModal, setShowSettingsModal] = useState(false);\r\n    const handleShowSettings = () => setShowSettingsModal(true);\r\n    const handleCloseSettings = () => setShowSettingsModal(false);\r\n\r\n    const handleNameSubmit = (e) => {\r\n        e.preventDefault();\r\n        onSubmitName(e.target[0].value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\" />\r\n            <Nav>\r\n                <Nav.Item className=\"mr-2\">\r\n                <Button onClick={onGoToTeamClick}>Go to <strong>Team Page</strong></Button>\r\n                </Nav.Item>\r\n                <Nav.Link href=\"https://github.com/BlaziusMaximus/NameThatSummation\">\r\n                Go to <strong>GitHub</strong>\r\n                </Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <Button variant=\"secondary\" onClick={handleShowSettings}>Settings</Button>\r\n        <Modal show={showSettingsModal} onHide={handleCloseSettings} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n            <Modal.Title>Settings</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <fieldset>\r\n                <Form>\r\n                    <Form.Check type=\"checkbox\" label=\"Settings Option 1\" />\r\n                    <Form.Check type=\"checkbox\" label=\"Settings Option 2\" />\r\n                </Form>\r\n                <Form>\r\n                    <Form.Check type=\"radio\" label=\"Settings Option 3\" />\r\n                    <Form.Check type=\"radio\" label=\"Settings Option 4\" />\r\n                </Form>\r\n            </fieldset>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleCloseSettings}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col sm=\"auto\"><h1>Name That Summation</h1></Col>\r\n            </Row>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col sm={8}>\r\n                    <Form onSubmit={handleNameSubmit}>\r\n                        <InputGroup>\r\n                            <FormControl\r\n                                placeholder=\"Display Name\"\r\n                                aria-label=\"Display Name\"\r\n                                aria-describedby=\"display-name-form\"\r\n                                />\r\n                            <InputGroup.Append>\r\n                                <Button variant=\"outline-primary\" type=\"submit\">Submit</Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n        \r\n        </>\r\n    );\r\n}\r\n\r\nGameMainMenu.propTypes = {\r\n    onGoToTeamClick: PropTypes.func.isRequired,\r\n    onSubmitName: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default GameMainMenu;","import { ResponsiveLine } from 'nivo/es/components/charts/line';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst GameChart = ({ data }) => {\r\n    return (\r\n        <ResponsiveLine\r\n            data={[data]}\r\n            margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n            xScale={{ type: 'point' }}\r\n            yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\r\n            yFormat=\" >-.2f\"\r\n            axisTop={null}\r\n            axisRight={null}\r\n            axisBottom={{\r\n                orient: 'bottom',\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: 'x-axis',\r\n                legendOffset: 36,\r\n                legendPosition: 'center'\r\n            }}\r\n            axisLeft={{\r\n                orient: 'left',\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: 'y-axis',\r\n                legendOffset: -40,\r\n                legendPosition: 'center'\r\n            }}\r\n            pointSize={10}\r\n            pointColor={{ theme: 'background' }}\r\n            pointBorderWidth={2}\r\n            pointBorderColor={{ from: 'serieColor' }}\r\n            pointLabelYOffset={-12}\r\n            useMesh={true}\r\n            legends={[\r\n                {\r\n                    anchor: 'bottom-right',\r\n                    direction: 'column',\r\n                    justify: false,\r\n                    translateX: 100,\r\n                    translateY: 0,\r\n                    itemsSpacing: 0,\r\n                    itemDirection: 'left-to-right',\r\n                    itemWidth: 80,\r\n                    itemHeight: 20,\r\n                    itemOpacity: 0.75,\r\n                    symbolSize: 12,\r\n                    symbolShape: 'circle',\r\n                    symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                    effects: [\r\n                        {\r\n                            on: 'hover',\r\n                            style: {\r\n                                itemBackground: 'rgba(0, 0, 0, .03)',\r\n                                itemOpacity: 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nGameChart.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default GameChart;","import Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport GameChart from './GameChart';\r\n\r\nimport {useEffect, useState} from 'react';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GameQuestion = ({ displayName, chartData, questionTime, endQuestion, selectAnswer }) => {\r\n\r\n    const [showFeedbackModal, setShowFeedbackModal] = useState(false);\r\n    const hideFeedbackModal = () => {\r\n        setShowFeedbackModal(false);\r\n\r\n        if (answerChoiceIndex === chartData.answer) {\r\n            endQuestion();\r\n        }\r\n    }\r\n\r\n    const [answerChoiceIndex, setAnswerChoiceIndex] = useState(null);\r\n    const [answersClicked, setAnswersClicked] = useState(new Array(chartData.latexExp.length).fill(0));\r\n    const [answerTime, setAnswerTime] = useState(null);\r\n    const handleAnswerSelect = (e) => {\r\n        e.preventDefault();\r\n        let id = parseInt(e.currentTarget.id);\r\n        let newAnsClicked = answersClicked; newAnsClicked[parseInt(id)] = 1; setAnswersClicked(newAnsClicked);\r\n        \r\n        if (answerChoiceIndex===null) {\r\n            selectAnswer(id, questionTime-timer);\r\n        }\r\n        setAnswerChoiceIndex(id);\r\n        setAnswerTime(questionTime-timer);\r\n\r\n        setShowFeedbackModal(true);\r\n    }\r\n\r\n    const maxTimer = questionTime;\r\n    const [timer, setTimer] = useState(questionTime);\r\n    let cd = {...chartData};\r\n    cd.data = cd.data.slice(0,2);\r\n    const [chartDataSlice, setChartDataSlice] = useState(cd);\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (timer > 0) { setTimer(timer => timer-1); }\r\n            // if (timer <= 0) { endQuestion(Math.max(0, timer)); }\r\n\r\n            let cd = {...chartData};\r\n            let x = parseFloat(maxTimer-timer)/parseFloat(maxTimer);\r\n            let l = chartData.data.length;\r\n            let sliceI = Math.floor(x**2 * (l-2))+2;\r\n            cd.data = cd.data.slice(0, Math.min(l, sliceI));\r\n            setChartDataSlice(cd);\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, [timer, maxTimer, chartData, endQuestion]);\r\n\r\n    // console.log(chartData.answerChoiceIndexs[0], \"=1: \", evaluatex(chartData.answerChoiceIndexs[0])({x:10}));\r\n    // console.log(chartData.answerChoiceIndexs[1], \"=1: \", evaluatex(chartData.answerChoiceIndexs[1])({x:10}));\r\n    // console.log(chartData.answerChoiceIndexs[2], \"=1: \", evaluatex(chartData.answerChoiceIndexs[2])({x:10}));\r\n    // console.log(chartData.answerChoiceIndexs[3], \"=1: \", evaluatex(chartData.answerChoiceIndexs[3])({x:10}));\r\n\r\n    return (\r\n        <>\r\n        <h2>Name: {displayName}</h2>\r\n        <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n            <Card.Header as=\"h5\">Time Remaining: {timer}</Card.Header>\r\n            <Card.Body>\r\n                <GameChart data={chartDataSlice} />\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                {chartData.latexExp.map((e,index) => (\r\n                <Button\r\n                    id={index} key={index}\r\n                    onClickCapture={handleAnswerSelect}\r\n                    variant={answersClicked[index]===1?(index===chartData.answer?\"success\":\"danger\"):\"primary\"}\r\n                    disabled={answersClicked[index]===1}\r\n                    style={{margin: \"0 2%\"}}>\r\n                        <MathComponent tex={`y = ${e}`} style={{pointerEvents:\"none;\"}} />\r\n                </Button>\r\n                ))}\r\n            </Card.Footer>\r\n        </Card>\r\n        <h1>{answerChoiceIndex}</h1>\r\n\r\n        <Modal show={showFeedbackModal} onHide={hideFeedbackModal} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n            <Modal.Title>{answerChoiceIndex===chartData.answer?\"Correct!\":\"Not Quite...\"}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            {answerChoiceIndex===chartData.answer ?<>\r\n                <p>Good work! <MathComponent tex={`y = ${chartData.latexExp[answerChoiceIndex]}`} display={false} /> was the correct equation.</p>\r\n                {/* <GameChart data={chartData} /> */}\r\n            </>:<>\r\n                <p></p>\r\n            </>}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={hideFeedbackModal}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nGameQuestion.propTypes = {\r\n    displayName: PropTypes.string.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    questionTime: PropTypes.number.isRequired,\r\n    endQuestion: PropTypes.func.isRequired,\r\n    selectAnswer: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default GameQuestion;","import {useState} from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GameWaitingRoom = ({ displayName, playersList }) => {\r\n\r\n    return (\r\n        <>\r\n        <h2>Name: {displayName}</h2>\r\n        <br />\r\n        <h1>WAITING</h1>\r\n        <ul>\r\n            {playersList.map(player =>  <li key={player.name+\"\"+player.city}>{player.name}</li> )}\r\n        </ul>\r\n        </>\r\n    );\r\n}\r\n\r\nGameWaitingRoom.propTypes = {\r\n    displayName: PropTypes.string.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default GameWaitingRoom;","import {useState} from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport GameChart from './GameChart';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst GameLeaderboard = ({ displayName, chartData, playersList, answerTime, nextQuestion }) => {\r\n\r\n    let rankedPlayers = playersList.sort((a,b) => (a.name > b.name) ? 1 : -1);\r\n    console.log(rankedPlayers)\r\n    let topPlayers = rankedPlayers.length >= 5 ? rankedPlayers.slice(0,5) : rankedPlayers;\r\n    let localPlayer = null; // rankedPlayers.find(p => p.id == thisPlayer.id) == undefined ? null : thisPlayer;\r\n    \r\n    let answerChoice = \"choice2\";\r\n\r\n    return (\r\n        <>\r\n        <h2>Name: {displayName}</h2>\r\n        <h3>Score: {answerTime!=null?answerTime:\"nah\"}</h3>\r\n        <br />\r\n        <Container fluid>\r\n            <Row>\r\n                <Col xs={8}>\r\n                <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n                    <Card.Header as=\"h5\">Time Spent on Question: {1}s</Card.Header>\r\n                    <Card.Body>\r\n                        <GameChart data={chartData} />\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Button disabled id=\"choice1\" variant={answerChoice===\"choice1\"?\"success\":\"primary\"} style={{margin: \"0 2%\"}}>y = x</Button>\r\n                        <Button disabled id=\"choice2\" variant={answerChoice===\"choice2\"?\"success\":\"primary\"} style={{margin: \"0 2%\"}}>y = x^2</Button>\r\n                        <Button disabled id=\"choice3\" variant={answerChoice===\"choice3\"?\"success\":\"primary\"} style={{margin: \"0 2%\"}}>y = log_2(x)</Button>\r\n                        <Button disabled id=\"choice4\" variant={answerChoice===\"choice4\"?\"success\":\"primary\"} style={{margin: \"0 2%\"}}>y = sqrt(x)</Button>\r\n                    </Card.Footer>\r\n                </Card>\r\n                </Col>\r\n                <Col>\r\n                    <h1>LEADERBOARD</h1>\r\n                    <ul>\r\n                        {topPlayers.map(player =>  <li key={player.name+\"\"+player.city}>{player.name}</li> )}\r\n                    </ul>\r\n                    <p key=\"ellipsis1\">...</p>\r\n                    {localPlayer == null ? <></> : (<>\r\n                        <ul><li key=\"localPlayer\">{localPlayer.name}</li></ul>\r\n                        <p key=\"ellipsis2\">...</p>\r\n                    </>)}\r\n                    <br />\r\n                    <Button variant=\"secondary\" onClick={nextQuestion}>NEXT QUESTION</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nGameLeaderboard.propTypes = {\r\n    displayName: PropTypes.string.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    answerTime: PropTypes.number.isRequired,\r\n    nextQuestion: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default GameLeaderboard;","import {useState} from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport GameChart from './GameChart';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\n\r\nconst GameReview = ({ localPlayer, chartsData, playersList, answerTime }) => {\r\n\r\n    let rankedPlayers = playersList.sort((a,b) => (a.name > b.name) ? 1 : -1);\r\n    console.log(rankedPlayers)\r\n    let topPlayers = rankedPlayers.length >= 5 ? rankedPlayers.slice(0,5) : rankedPlayers;\r\n    // let localPlayer = null; // rankedPlayers.find(p => p.id == thisPlayer.id) == undefined ? null : thisPlayer;\r\n\r\n    return (\r\n        <>\r\n        <h2>Name: {localPlayer.name}</h2>\r\n        <h3>Score: {answerTime!=null?answerTime:\"nah\"}</h3>\r\n        <br />\r\n        <Container fluid>\r\n        <Row>\r\n            <Col xs={8}>\r\n            <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey={chartsData[0].id}>\r\n            <Row>\r\n                <Col sm={4}>\r\n                    <ListGroup>\r\n                        {chartsData.map(chart => (\r\n                        <ListGroup.Item href={chart.id} key={chart.id}>\r\n                            Question 1: {chart.id}\r\n                        </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n                    <br />\r\n                    <h3>Answers:</h3>\r\n                    {localPlayer.answers.map(a => (\r\n                        <p>a</p>\r\n                    ))}\r\n                </Col>\r\n                <Col sm={8}>\r\n                <Tab.Content>\r\n                    {chartsData.map(chart => (\r\n                    <Tab.Pane eventKey={chart.id} key={chart.id}>\r\n                    <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n                        <Card.Header as=\"h5\">Time Spent on Question: {1}s</Card.Header>\r\n                        <Card.Body>\r\n                            <GameChart data={chart} />\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            {chart.latexExp.map((e, index) => (\r\n                            <Button disabled id={e} key={e} variant={chart.answer===index?\"success\":\"primary\"} style={{margin: \"0 2%\"}}>\r\n                                <MathComponent tex={`y = ${e}`} style={{pointerEvents:\"none;\"}} />\r\n                            </Button>\r\n                            ))}\r\n                        </Card.Footer>\r\n                    </Card>\r\n                    </Tab.Pane>\r\n                    ))}\r\n                </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n            </Tab.Container>\r\n            </Col>\r\n            <Col>\r\n                <h1>LEADERBOARD</h1>\r\n                <ul>\r\n                    {topPlayers.map(player =>  <li key={player.name+\"\"+player.city}>{player.name}</li> )}\r\n                </ul>\r\n                <p key=\"ellipsis1\">...</p>\r\n                {localPlayer == null ? <></> : (<>\r\n                    <ul><li key=\"localPlayer\">{localPlayer.name}</li></ul>\r\n                    <p key=\"ellipsis2\">...</p>\r\n                </>)}\r\n            </Col>\r\n        </Row>\r\n        </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nGameReview.propTypes = {\r\n    localPlayer: PropTypes.object.isRequired,\r\n    chartsData: PropTypes.array.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    answerTime: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default GameReview;","import {useState} from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst DevPanel = ({ goToMainMenu, goToLeaderboard, goToQuestion, goToReview, goToWaitingRoom, goToAdmin, displayName, setDisplayName }) => {\r\n\r\n    return (\r\n        <>\r\n        <Button onClick={() => goToMainMenu()}>MAIN MENU</Button>\r\n        <Button onClick={() => {setDisplayName(displayName); goToWaitingRoom(displayName);}}>WAITING ROOM</Button>\r\n        <Button onClick={goToQuestion}>QUESTION</Button>\r\n        <Button onClick={() => goToLeaderboard(1)}>LEADERBOARD</Button>\r\n        <Button onClick={() => goToReview(1)}>REVIEW</Button>\r\n        <Button onClick={() => goToAdmin()}>ADMIN</Button>\r\n        </>\r\n    );\r\n}\r\n\r\nDevPanel.propTypes = {\r\n    goToMainMenu: PropTypes.func.isRequired,\r\n    goToLeaderboard: PropTypes.func.isRequired,\r\n    goToQuestion: PropTypes.func.isRequired,\r\n    goToReview: PropTypes.func.isRequired,\r\n    goToWaitingRoom: PropTypes.func.isRequired,\r\n    goToAdmin: PropTypes.func.isRequired,\r\n    displayName: PropTypes.string.isRequired,\r\n    setDisplayName: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default DevPanel;","import { db } from \"./firebase\";\n\nimport React from 'react';\nimport {useState} from 'react';\n\nimport TeamPageHeader from './components/team-page/TeamPageHeader';\nimport TeamPageBody from './components/team-page/TeamPageBody';\nimport AdminConsole from './components/admin-page/AdminConsole';\nimport GameMainMenu from './components/game-page/GameMainMenu';\nimport GameQuestion from './components/game-page/GameQuestion';\nimport GameWaitingRoom from './components/game-page/GameWaitingRoom';\nimport GameLeaderboard from './components/game-page/GameLeaderboard';\nimport GameReview from './components/game-page/GameReview';\nimport DevPanel from './components/game-page/DevPanel';\n\nimport evaluatex from \"evaluatex\";\n// import sample_data from './components/game-page/sample_data';\n\nimport './App.css';\n\nconst SAMPLE_CSV = [\n    {\n        \"xStart\": 0,\n        \"xEnd\": 10,\n        \"xInc\": 1,\n        \"renderChoices\": [ \"x\", \"x^2\", \"log_{2} x\", \"\\\\sqrt{x}\" ],\n        \"evalChoices\": [ \"x\", \"x^2\", \"logn(x,2)\", \"sqrt(x)\" ],\n        \"answerIndex\": 1,\n        \"maxScore\": 300,\n    },\n    {\n        \"xStart\": 0,\n        \"xEnd\": 10,\n        \"xInc\": 1,\n        \"renderChoices\": [ \"x\", \"x^2\", \"log_{2} x\", \"\\\\sqrt{x}\" ],\n        \"evalChoices\": [ \"x\", \"x^2\", \"logn(x,2)\", \"sqrt(x)\" ],\n        \"answerIndex\": 3,\n        \"maxScore\": 400,\n    },\n];\nconst numQuestions = 2;\n\nfunction App() {\n\n    const pageStates = {\n        TEAM_PAGE: \"TEAM_PAGE\",\n        ADMIN_PAGE: \"ADMIN_PAGE\",\n        GAME: {\n            MAIN_MENU: \"GAME_MAIN_MENU\",\n            WAITING_ROOM: \"GAME_WAITING_ROOM\",\n            QUESTION: \"GAME_QUESTION\",\n            LEADERBOARD: \"GAME_LEADERBOARD\",\n            REVIEW: \"GAME_REVIEW\",\n        },\n    };\n    const [pageState, setPageState] = useState(pageStates.TEAM_PAGE);\n    const [questionIndex, setQuestionIndex] = useState(0);\n\n    const [localPlayerObj, setLocalPlayerObj] = useState({\n        \"name\": \"\",\n        \"score\": 0,\n        \"section\": 1337,\n        \"answers\": [],\n        \"wrongAnswers\": [],\n        \"times\": [],\n    });\n    const [answerTime, setAnswerTime] = useState(null);\n\n    const goToMainMenu = () => {\n        setPageState(pageStates.GAME.MAIN_MENU);\n    }\n    const goToTeam = () => {\n        setPageState(pageStates.TEAM_PAGE);\n    }\n    const goToWaitingRoom = (name) => {\n        setPageState(pageStates.GAME.WAITING_ROOM);\n        db.collection(\"playersDB\").doc(name).set({\n            ...localPlayerObj,\n            \"name\": name,\n        }).then((docRef) => {\n            console.log(\"Document written with ID: \", docRef.id);\n        })\n        .catch((error) => {\n            console.error(\"Error adding document: \", error);\n        });\n    }\n    const goToQuestion = () => {\n        setPageState(pageStates.GAME.QUESTION);\n    }\n    const goToLeaderboard = (t) => {\n        setPageState(pageStates.GAME.LEADERBOARD);\n        setAnswerTime(t);\n    }\n    const goToReview = () => {\n        setPageState(pageStates.GAME.REVIEW);\n    }\n\n    const goToAdmin = () => {\n        setPageState(pageStates.ADMIN_PAGE);\n    }\n\n    const goToNextQuestion = () => {\n        if (questionIndex === numQuestions-1) {\n            goToReview();\n        } else {\n            setQuestionIndex(questionIndex+1);\n            goToQuestion();\n        }\n    }\n\n    const handleAnswerSubmit = async (a,t) => {\n        console.log(localPlayerObj.name, \"answer:\", a, \"time:\", t, \"score:\",sample_data[questionIndex]/t);\n        setLocalPlayerObj({\n            ...localPlayerObj,\n            answers: [...(localPlayerObj.answers),a],\n            wrongAnswers: a===sample_data[questionIndex].answer ? [...(localPlayerObj.wrongAnswers)] : [...(localPlayerObj.wrongAnswers),a],\n            times: [...(localPlayerObj.times),t],\n            score: localPlayerObj.score + Math.floor(sample_data[questionIndex].maxScore/t),\n        });\n\n        const docRef = db.collection('playersDB').doc(localPlayerObj.name);\n        docRef.get().then(async (doc) => {\n            if (doc.exists) {\n                // name, section, times, answers, score\n                const playerObject = doc.data();\n                let playerAnswers = playerObject.answers===undefined ? [] : playerObject.answers;\n                let playerTimes = playerObject.times===undefined ? [] : playerObject.times;\n                await docRef.set({\n                    ...playerObject,\n                    answers: [...playerAnswers,a],\n                    times: [...playerTimes,t],\n                    score: playerObject.score + Math.floor(sample_data[questionIndex].maxScore/t),\n                });\n            }\n        });\n    }\n\n    const [players, setPlayers] = useState([]);\n    React.useEffect(() => {\n        const fetchData = async () => {\n            const data = await db.collection(\"playersDB\").get();\n            setPlayers(data.docs.map(doc => doc.data()));\n        }\n        fetchData();\n        console.log(\"fetched players from firebase\")\n    }, []);\n\n    // construct chart data\n    const sample_data = SAMPLE_CSV.map(({xEnd, xStart, xInc, evalChoices, answerIndex, maxScore}, index) => ({\n        \"id\": `summation function ${index+1}`,\n        \"color\": \"hsl(24, 70%, 50%)\",\n        \"data\": [...Array(Math.floor((xEnd-xStart)/parseFloat(xInc))+1).keys()].map(e => (\n            { \"x\":String(e), \"y\":evaluatex(evalChoices[answerIndex])({x:e}) }\n        )),\n        \"answerChoices\": [\"x\", \"x^2\", \"logn(x,2)\", \"sqrt(x)\"],\n        \"latexExp\": [\"x\", \"x^2\", \"log_{2} x\", \"\\\\sqrt{x}\"],\n        \"answer\": answerIndex,\n        \"maxScore\": maxScore,\n    }));\n    // console.log(sample_data)\n    // [\n    //     {\n    //         \"id\": \"summation function 1\",\n    //         \"color\": \"hsl(24, 70%, 50%)\",\n    //         \"data\": data1,\n    //         \"answerChoices\": [\"x\", \"x^2\", \"logn(x,2)\", \"sqrt(x)\"],\n    //         \"latexExp\": [\"x\", \"x^2\", \"log_{2} x\", \"\\\\sqrt{x}\"],\n    //         \"answer\": 1\n    //     },\n    // ];\n\n    return (\n        <>\n        {pageState === pageStates.GAME.MAIN_MENU ? <>\n        <GameMainMenu\n            onGoToTeamClick={goToTeam}\n            onSubmitName={(name) => {setLocalPlayerObj({...localPlayerObj, \"name\":name}); goToWaitingRoom(name);}}\n        />\n        </> : <></>}\n\n        {pageState === pageStates.GAME.WAITING_ROOM ? <>\n        <GameWaitingRoom\n            displayName={localPlayerObj.name}\n            playersList={players}\n        />\n        </> : <></>}\n\n        {pageState === pageStates.GAME.QUESTION ? <>\n        <GameQuestion\n            displayName={localPlayerObj.name}\n            chartData={sample_data[questionIndex]}\n            questionTime={15}\n            endQuestion={goToLeaderboard}\n            selectAnswer={handleAnswerSubmit}\n        />\n        </> : <></>}\n\n        {pageState === pageStates.GAME.LEADERBOARD ? <>\n        <GameLeaderboard\n            displayName={localPlayerObj.name}\n            chartData={sample_data[questionIndex]}\n            playersList={players}\n            answerTime={answerTime}\n            nextQuestion={goToNextQuestion}\n        />\n        </> : <></>}\n\n        {pageState === pageStates.GAME.REVIEW ? <>\n        <GameReview\n            localPlayer={localPlayerObj}\n            chartsData={sample_data}\n            playersList={players}\n            answerTime={answerTime}\n        />\n        </> : <></>}\n\n        {pageState === pageStates.ADMIN_PAGE ? <>\n        <AdminConsole goToAdmin={goToAdmin} />\n        </> : <></>}\n        \n        {pageState === pageStates.TEAM_PAGE ? <>\n        <TeamPageHeader onGoToGameClick={goToMainMenu} />\n        <br />\n        <TeamPageBody />\n        </> : <>\n            <br />\n            <DevPanel\n                goToMainMenu={goToMainMenu}\n                goToLeaderboard={goToLeaderboard}\n                goToReview={goToReview}\n                goToQuestion={goToQuestion}\n                goToWaitingRoom={goToWaitingRoom}\n                goToAdmin={goToAdmin}\n                displayName={localPlayerObj.name}\n                setDisplayName={(name) => setLocalPlayerObj({...localPlayerObj, \"name\":name})}\n            />\n        </>}\n\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}