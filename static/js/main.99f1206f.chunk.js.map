{"version":3,"sources":["firebase.js","components/team-page/TeamPageHeader.js","components/team-page/TeamPageBody.js","components/admin-page/AdminWaiting.js","components/GameChart.js","components/admin-page/AdminPlaying.js","components/admin-page/AdminReview.js","components/admin-page/AdminOffline.js","components/AdminPage.js","components/game-page/GameMainMenu.js","components/game-page/GameQuestion.js","components/game-page/GameWaitingRoom.js","components/game-page/GameLeaderboard.js","components/game-page/GameReview.js","components/DevPanel.js","components/GamePage.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","TeamPageHeader","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Item","to","Button","Link","href","TeamPageBody","Container","Row","style","width","height","ResponsiveEmbed","aspectRatio","title","src","AdminWaiting","playersList","startGame","quitGame","kickPlayer","onClick","size","block","Table","striped","bordered","hover","map","player","name","section","GameChart","data","margin","top","right","bottom","left","xScale","type","yScale","min","max","stacked","reverse","yFormat","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","AdminPlaying","prevQuestion","nextQuestion","questions","adminGameState","useState","tab","setTab","ButtonGroup","disabled","questionIndex","fluid","Col","sm","Card","Body","Footer","renderChoices","e","index","answerIndex","tex","display","padding","Tabs","activeKey","onSelect","t","Tab","eventKey","overflowY","score","city","defaultActiveKey","ListGroup","q","cursor","paddingLeft","paddingRight","Content","Pane","expindex","AdminReview","chartsData","endGame","rankedPlayers","sort","a","b","console","log","topPlayers","length","slice","xs","chart","pointerEvents","AdminOffline","initializeGame","clearGame","AdminPage","gameStates","gameState","setAdminGameState","newGameState","state","OFFLINE","collection","doc","set","forEach","delete","WAITING","PLAYING","qIndex","REVIEW","GameMainMenu","onSubmitName","canSubmitName","showSettingsModal","setShowSettingsModal","handleCloseSettings","Modal","show","onHide","aria-labelledby","centered","Header","closeButton","Title","Form","Check","label","onSubmit","preventDefault","target","value","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","GameQuestion","displayName","chartData","questionTime","timer","endQuestion","selectAnswer","showFeedbackModal","setShowFeedbackModal","hideFeedbackModal","answerChoiceIndex","answerTime","setAnswerChoiceIndex","Array","fill","answersClicked","setAnswersClicked","setAnswerTime","handleAnswerSelect","parseInt","currentTarget","newAnsClicked","cd","chartDataSlice","setChartDataSlice","useEffect","x","parseFloat","l","sliceI","Math","floor","pointEval","y","evaluatex","evalChoices","Infinity","as","onClickCapture","xEnd","xStart","xInc","keys","String","GameWaitingRoom","GameLeaderboard","localPlayer","undefined","find","p","times","colSpan","textAlign","GameReview","horizontal","wrongAnswers","ans","DevPanel","goToMainMenu","goToLeaderboard","goToQuestion","goToReview","goToWaitingRoom","setDisplayName","GamePage","players","adminQuestionIndex","waitingRoomIsOpen","pageStates","pageState","setPageState","setTimer","setQuestionIndex","localPlayerObj","setLocalPlayerObj","showKickModal","setShowKickModal","newPlayerObj","random","Date","now","React","useCallback","handleAnswerSubmit","maxScore","was","newAnswer","push","answers","setTopPlayers","filter","Number","isInteger","interval","setInterval","clearInterval","App","adminGameStates","setPlayers","onSnapshot","snapshot","docs","setQuestions","substring","get","then","playersDB","basename","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99f1206f.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\n// const firebaseConfig = {\r\n//     apiKey: \"AIzaSyBzSeHJ4YWxiLpE09A7mzpYUxUfOWeq3SU\",\r\n//     authDomain: \"sum-that-notation-13637.firebaseapp.com\",\r\n//     projectId: \"sum-that-notation-13637\",\r\n//     storageBucket: \"sum-that-notation-13637.appspot.com\",\r\n//     messagingSenderId: \"912432195227\",\r\n//     appId: \"1:912432195227:web:bc908eb3957185b597483e\",\r\n//     measurementId: \"G-MCKECB516P\"\r\n// };\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBxdroTYNIaxZcwj75RaYMU601PjTzoRnM\",\r\n    authDomain: \"comp585-e8338.firebaseapp.com\",\r\n    projectId: \"comp585-e8338\",\r\n    storageBucket: \"comp585-e8338.appspot.com\",\r\n    messagingSenderId: \"1011171509531\",\r\n    appId: \"1:1011171509531:web:fa24c5896cbcb16e6cbfbe\",\r\n    measurementId: \"G-V22WJ91GTT\"\r\n};\r\n\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const auth = firebase.auth;\r\nexport const db = firebase.firestore();","import Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\r\n\r\n\r\nconst TeamPageHeader = () => {\r\n\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand>Name That Summation</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\" />\r\n            <Nav>\r\n                <Nav.Item className=\"mr-2\">\r\n                <LinkContainer to=\"/game-page\">\r\n                    <Button>Go to <strong>Game</strong></Button>\r\n                </LinkContainer>\r\n                </Nav.Item>\r\n                <Nav.Link href=\"https://github.com/BlaziusMaximus/NameThatSummation\">\r\n                Go to <strong>GitHub</strong>\r\n                </Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default TeamPageHeader;","import Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ResponsiveEmbed from 'react-bootstrap/ResponsiveEmbed';\r\n\r\nconst TeamPageBody = () => {\r\n    return (\r\n        <Container>\r\n            <Row><h3>Team/Client Information</h3></Row>\r\n            <Row><p>Adam Cogdell (adamc77@live.unc.edu): Game Architect, Client Manager</p></Row>\r\n            <Row><p>Emre Yanmis (emre61@live.unc.edu): Software Architect</p></Row>\r\n            <Row><p>Tiger Deng (y.deng@unc.edu): Project Manager, Editor</p></Row>\r\n            <Row><p>John Majikes (jmajikes@cs.unc.edu): Client</p></Row>\r\n\r\n            <Row><h3 id=\"meeting-information\">Meeting Information</h3></Row>\r\n            <Row><p>Client Meetings: Tuesday @ 2:30PM</p></Row>\r\n            <Row><p>Professor Meetings (recitation): Thursday 3:30-4:30PM</p></Row>\r\n            <Row><p>Team Meetings: Monday @ 6:00PM</p></Row>\r\n\r\n            <Row>\r\n                <div style={{ width: '8.5in', height: 'auto' }}>\r\n                    <ResponsiveEmbed aspectRatio=\"1by1\">\r\n                        <iframe title=\"Design Doc\" src=\"https://docs.google.com/document/d/e/2PACX-1vR3nIMv9RltRskz5HY8NZmztMdaF0d1Mfb3Hda5n9-c8VyV_3afAFM-4RU_UVSMI2WajPdJPZLxVgmS/pub?embedded=true\" />\r\n                    </ResponsiveEmbed>\r\n                </div>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TeamPageBody;","import PropTypes from 'prop-types';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\n\r\nconst AdminWaiting = ({ playersList, startGame, quitGame, kickPlayer }) => {\r\n\r\n    return (<>\r\n\r\n        <Button onClick={quitGame} id=\"startgame\" variant=\"danger\" size=\"lg\" block>Quit Game</Button>\r\n        <Button onClick={startGame} id=\"startgame\" variant=\"success\" size=\"lg\" block>Start Game</Button>\r\n\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <th style={{width: \"10%\"}}></th>\r\n                    <th>Player</th>\r\n                    <th>Section</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {playersList.map(player =>\r\n                <tr key={player.name+\"\"+player.section}>\r\n                    <td><Button onClick={() => kickPlayer(player)}>Kick</Button></td>\r\n                    <td>{player.name}</td>\r\n                    <td>{player.section}</td>\r\n                </tr>\r\n            )}\r\n            </tbody>\r\n        </Table>\r\n\r\n    </>);\r\n}\r\n\r\nAdminWaiting.propTypes = {\r\n    playersList: PropTypes.array.isRequired,\r\n    startGame: PropTypes.func.isRequired,\r\n    quitGame: PropTypes.func.isRequired,\r\n    kickPlayer: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AdminWaiting;","import { ResponsiveLine } from 'nivo/es/components/charts/line';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst GameChart = ({ data }) => {\r\n    return (\r\n        <ResponsiveLine\r\n            data={data}\r\n            margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n            xScale={{ type: 'point' }}\r\n            yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\r\n            yFormat=\" >-.2f\"\r\n            axisTop={null}\r\n            axisRight={null}\r\n            axisBottom={{\r\n                orient: 'bottom',\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: 'x-axis',\r\n                legendOffset: 36,\r\n                legendPosition: 'center'\r\n            }}\r\n            axisLeft={{\r\n                orient: 'left',\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: 'y-axis',\r\n                legendOffset: -40,\r\n                legendPosition: 'center'\r\n            }}\r\n            pointSize={10}\r\n            pointColor={{ theme: 'background' }}\r\n            pointBorderWidth={2}\r\n            pointBorderColor={{ from: 'serieColor' }}\r\n            pointLabelYOffset={-12}\r\n            useMesh={true}\r\n            legends={[\r\n                {\r\n                    anchor: 'bottom-right',\r\n                    direction: 'column',\r\n                    justify: false,\r\n                    translateX: 100,\r\n                    translateY: 0,\r\n                    itemsSpacing: 0,\r\n                    itemDirection: 'left-to-right',\r\n                    itemWidth: 80,\r\n                    itemHeight: 20,\r\n                    itemOpacity: 0.75,\r\n                    symbolSize: 12,\r\n                    symbolShape: 'circle',\r\n                    symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                    effects: [\r\n                        {\r\n                            on: 'hover',\r\n                            style: {\r\n                                itemBackground: 'rgba(0, 0, 0, .03)',\r\n                                itemOpacity: 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nGameChart.propTypes = {\r\n    data: PropTypes.oneOfType([\r\n        PropTypes.object,\r\n        PropTypes.array,\r\n    ]).isRequired,\r\n}\r\n\r\nexport default GameChart;","import {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Table from 'react-bootstrap/Table';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n\r\nimport GameChart from '../GameChart';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\n\r\nconst AdminPlaying = ({ quitGame, prevQuestion, nextQuestion, questions, adminGameState, playersList }) => {\r\n\r\n    const [tab, setTab] = useState(\"players\");\r\n\r\n    return (<>\r\n\r\n        <Button onClick={quitGame} id=\"startgame\" variant=\"danger\" size=\"lg\" block>Quit Game</Button>\r\n        <ButtonGroup className=\"d-flex\">\r\n            <Button\r\n                className=\"btn-block mr-1 mt-1 btn-lg\"\r\n                onClick={prevQuestion}\r\n                id=\"prev\"\r\n                variant=\"secondary\"\r\n                size=\"lg\"\r\n                block\r\n                disabled={adminGameState.questionIndex === 0}>\r\n                    Previous Question\r\n            </Button>\r\n            <Button\r\n                className=\"btn-block mr-1 mt-1 btn-lg\"\r\n                onClick={nextQuestion}\r\n                id=\"next\"\r\n                variant=\"primary\"\r\n                size=\"lg\"\r\n                block>\r\n                    Next Question\r\n            </Button>\r\n        </ButtonGroup>\r\n\r\n        <Container fluid>\r\n        <Row>\r\n            <Col sm={5}>\r\n            <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n                <Card.Body>\r\n                    <GameChart data={[questions[adminGameState.questionIndex]]} />\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                {questions[adminGameState.questionIndex].renderChoices.map((e,index) => (\r\n                    <Button\r\n                        id={index}\r\n                        key={index}\r\n                        disabled\r\n                        style={{margin: \"0 2%\"}}\r\n                        variant={questions[adminGameState.questionIndex].answerIndex===index?\"success\":\"primary\"}>\r\n                            <MathComponent tex={`y = ${e}`} display={false} />\r\n                    </Button>\r\n                ))}\r\n                </Card.Footer>\r\n            </Card>\r\n            </Col>\r\n            <Col style={{padding: \"0\"}}>\r\n            <Tabs id=\"tabs\" activeKey={tab} onSelect={(t) => setTab(t)}>\r\n                <Tab eventKey=\"players\" title=\"Players\">\r\n                <Container style={{height:\"80vh\", overflowY: \"scroll\"}}>\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Player</th>\r\n                                <th>Section</th>\r\n                                <th>Score</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {playersList.map(player =>\r\n                            <tr key={player.name+\"\"+player.city}>\r\n                                <td>{player.name}</td>\r\n                                <td>{player.section}</td>\r\n                                <td>{player.score}</td>\r\n                            </tr>\r\n                        )}\r\n                        </tbody>\r\n                    </Table>\r\n                </Container>\r\n                </Tab>\r\n                <Tab eventKey=\"questions\" title=\"Questions\"><Container>\r\n                <Tab.Container defaultActiveKey={`${adminGameState.questionIndex}`}>\r\n                <Row>\r\n                    <Col sm={4}>\r\n                    <ListGroup style={{height:\"80vh\", overflowY: \"scroll\"}}>\r\n                    {questions.map((q,index) =>\r\n                        <ListGroup.Item\r\n                            href={`${index}`}\r\n                            key={`${index}`}\r\n                            style={{cursor: \"pointer\", paddingLeft: \"0\", paddingRight: \"0\"}}\r\n                            variant={index===adminGameState.questionIndex?\"primary\":(index<adminGameState.questionIndex?\"secondary\":\"\")}>\r\n                                <Container>\r\n                                <Row>\r\n                                    {/* <Col xs={3} style={{margin: \"auto\"}}>\r\n                                        <Button variant=\"danger\" size=\"sm\">✖</Button>\r\n                                    </Col> */}\r\n                                    <Col>\r\n                                        {q.id}\r\n                                    </Col>\r\n                                </Row>\r\n                                </Container>\r\n                        </ListGroup.Item>\r\n                    )}\r\n                    </ListGroup>\r\n                    </Col>\r\n                    <Col sm={8} style={{paddingLeft: \"0\"}}>\r\n                    <Tab.Content>\r\n                    {questions.map((q,index) =>\r\n                        <Tab.Pane eventKey={`${index}`} key={`${index}`}>\r\n                        <Card style={{height:\"60vh\"}} className=\"text-center\">\r\n                            <Card.Body>\r\n                                <GameChart data={[q]} />\r\n                            </Card.Body>\r\n                            <Card.Footer>\r\n                            {q.renderChoices.map((e,expindex) => (\r\n                                <Button\r\n                                    id={expindex}\r\n                                    key={expindex}\r\n                                    disabled\r\n                                    style={{margin: \"0 2%\"}}\r\n                                    variant={q.answerIndex===expindex?\"success\":\"primary\"}>\r\n                                        <MathComponent tex={`y = ${e}`} display={false} />\r\n                                </Button>\r\n                            ))}\r\n                            </Card.Footer>\r\n                        </Card>\r\n                        </Tab.Pane>\r\n                    )}\r\n                    </Tab.Content>\r\n                    </Col>\r\n                </Row>\r\n                </Tab.Container>\r\n                </Container></Tab>\r\n            </Tabs>\r\n            </Col>\r\n        </Row>\r\n        </Container>\r\n    </>);\r\n}\r\n\r\nAdminPlaying.propTypes = {\r\n    quitGame: PropTypes.func.isRequired,\r\n    prevQuestion: PropTypes.func.isRequired,\r\n    nextQuestion: PropTypes.func.isRequired,\r\n    questions: PropTypes.array.isRequired,\r\n    adminGameState: PropTypes.object.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default AdminPlaying;","import PropTypes from 'prop-types';\r\n\r\nimport GameChart from '../GameChart';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\n\r\nconst AdminReview = ({ chartsData, playersList, endGame }) => {\r\n\r\n    let rankedPlayers = playersList.sort((a,b) => (a.name > b.name) ? 1 : -1);\r\n    console.log(rankedPlayers)\r\n    let topPlayers = rankedPlayers.length >= 5 ? rankedPlayers.slice(0,5) : rankedPlayers;\r\n    // let localPlayer = null; // rankedPlayers.find(p => p.id == thisPlayer.id) == undefined ? null : thisPlayer;\r\n\r\n    return (<>\r\n\r\n        <Button onClick={endGame} id=\"cleargame\" variant=\"secondary\" size=\"lg\" block>End Game</Button>\r\n\r\n        <Container fluid>\r\n        <Row>\r\n            <Col xs={8}>\r\n            <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey={chartsData[0].id}>\r\n            <Row>\r\n                <Col sm={4}>\r\n                    <ListGroup>\r\n                        {chartsData.map((chart,index) => (\r\n                        <ListGroup.Item href={chart.id} key={chart.id}>\r\n                            Question {index}: {chart.id}\r\n                        </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n                </Col>\r\n                <Col sm={8}>\r\n                <Tab.Content>\r\n                    {chartsData.map((chart,index) => (\r\n                    <Tab.Pane eventKey={chart.id} key={chart.id}>\r\n                    <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n                        <Card.Body>\r\n                            <GameChart data={[chart]} />\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            {chart.renderChoices.map((e, expindex) => (\r\n                            <Button disabled id={e} key={e} variant={chart.answerIndex===expindex?\"success\":\"primary\"} style={{margin: \"0 2%\"}}>\r\n                                <MathComponent tex={`y = ${e}`} style={{pointerEvents:\"none;\"}} />\r\n                            </Button>\r\n                            ))}\r\n                        </Card.Footer>\r\n                    </Card>\r\n                    </Tab.Pane>\r\n                    ))}\r\n                </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n            </Tab.Container>\r\n            </Col>\r\n            <Col>\r\n                <h1>LEADERBOARD</h1>\r\n                <Table striped bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Top Players</th>\r\n                        <th>Scores</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {topPlayers.map(player =>\r\n                    <tr key={player.name+\"\"+player.score}>\r\n                        <td>{player.name}</td>\r\n                        <td>{player.score}</td>\r\n                    </tr>\r\n                    )}\r\n                </tbody>\r\n                </Table>\r\n            </Col>\r\n        </Row>\r\n        </Container>\r\n    \r\n    </>);\r\n}\r\n\r\nAdminReview.propTypes = {\r\n    chartsData: PropTypes.array.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    endGame: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AdminReview;","import PropTypes from 'prop-types';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\nconst AdminOffline = ({ initializeGame, clearGame, playersList }) => {\r\n\r\n    return (<>\r\n        <Button onClick={initializeGame} id=\"startgame\" variant=\"danger\" size=\"lg\" block>Initialize Game</Button>\r\n        <Button onClick={clearGame} id=\"cleargame\" variant=\"secondary\" size=\"lg\" block>Clear Game</Button>\r\n        <br />\r\n\r\n        {playersList.length===0 ?\r\n        <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n            <Col sm=\"auto\"><h1>No Players in Database</h1></Col>\r\n        </Row>\r\n        </Container>\r\n        :\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <th>Player</th>\r\n                    <th>Section</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {playersList.map(player =>\r\n                <tr key={player.name+\"\"+player.section}>\r\n                    <td>{player.name}</td>\r\n                    <td>{player.section}</td>\r\n                </tr>\r\n            )}\r\n            </tbody>\r\n        </Table>\r\n        }\r\n    </>);\r\n}\r\n\r\nAdminOffline.propTypes = {\r\n    initializeGame: PropTypes.func.isRequired,\r\n    clearGame: PropTypes.func.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default AdminOffline;","import {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { db } from \"../firebase\";\r\n\r\nimport AdminWaiting from './admin-page/AdminWaiting';\r\nimport AdminPlaying from './admin-page/AdminPlaying';\r\nimport AdminReview from './admin-page/AdminReview';\r\nimport AdminOffline from './admin-page/AdminOffline';\r\n\r\n\r\nconst AdminPage = ({ gameStates, gameState, playersList, adminGameState, setAdminGameState, questions }) => {\r\n\r\n    const initializeGame = () => {\r\n        let newGameState = {\r\n            state: gameStates.WAITING,\r\n            questionIndex: null,\r\n        };\r\n        setAdminGameState(newGameState);\r\n        db.collection(\"adminVars\").doc(\"GameState\").set(newGameState);\r\n    }\r\n    const clearGame = () => {\r\n        let newGameState = {\r\n            state: gameStates.OFFLINE,\r\n            questionIndex: null,\r\n        };\r\n        setAdminGameState(newGameState);\r\n        db.collection(\"adminVars\").doc(\"GameState\").set(newGameState);\r\n\r\n        playersList.forEach(player => {\r\n            db.collection('playersDB').doc(player.name).delete();\r\n        });\r\n    }\r\n    const startGame = () => {\r\n        let newGameState = {\r\n            state: gameStates.PLAYING,\r\n            questionIndex: 0,\r\n        };\r\n        setAdminGameState(newGameState);\r\n        db.collection(\"adminVars\").doc(\"GameState\").set(newGameState);\r\n    }\r\n    const prevQuestion = () => {\r\n        let qIndex = adminGameState.questionIndex - 1;\r\n        if (qIndex >= 0) {\r\n            let newGameState = {\r\n                state: gameStates.PLAYING,\r\n                questionIndex: qIndex,\r\n            };\r\n            setAdminGameState(newGameState);\r\n            db.collection(\"adminVars\").doc(\"GameState\").set(newGameState);\r\n        }\r\n    }\r\n    const nextQuestion = () => {\r\n        let qIndex = adminGameState.questionIndex + 1;\r\n        if (qIndex < questions.length) {\r\n            let newGameState = {\r\n                state: gameStates.PLAYING,\r\n                questionIndex: qIndex,\r\n            };\r\n            setAdminGameState(newGameState);\r\n            db.collection(\"adminVars\").doc(\"GameState\").set(newGameState);\r\n        } else {\r\n            let newGameState = {\r\n                state: gameStates.REVIEW,\r\n                questionIndex: null,\r\n            };\r\n            setAdminGameState(newGameState);\r\n            db.collection(\"adminVars\").doc(\"GameState\").set(newGameState);\r\n        }\r\n    }\r\n\r\n    const kickPlayer = (player) => {\r\n        db.collection('playersDB').doc(player.name).delete();\r\n    }\r\n\r\n    return (<>\r\n\r\n        {gameState === gameStates.OFFLINE ? <>\r\n            <AdminOffline\r\n                initializeGame={initializeGame}\r\n                clearGame={clearGame}\r\n                playersList={playersList}\r\n            />\r\n        </> : <></>}\r\n\r\n        {gameState === gameStates.WAITING ? <>\r\n            <AdminWaiting\r\n                playersList={playersList}\r\n                startGame={startGame}\r\n                quitGame={clearGame}\r\n                kickPlayer={kickPlayer}\r\n            />\r\n        </> : <></>}\r\n\r\n        {gameState === gameStates.PLAYING ? <>\r\n            <AdminPlaying\r\n                quitGame={clearGame}\r\n                prevQuestion={prevQuestion}\r\n                nextQuestion={nextQuestion}\r\n                questions={questions}\r\n                adminGameState={adminGameState}\r\n                playersList={playersList}\r\n            />\r\n        </> : <></>}\r\n        \r\n        {gameState === gameStates.REVIEW ? <>\r\n            <AdminReview\r\n                chartsData={questions}\r\n                playersList={playersList}\r\n                endGame={clearGame}\r\n            />\r\n        </> : <></>}\r\n        \r\n    </>);\r\n}\r\n\r\nAdminPage.propTypes = {\r\n    gameStates: PropTypes.object.isRequired,\r\n    gameState: PropTypes.string.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    chartData: PropTypes.object,\r\n    adminGameState: PropTypes.object.isRequired,\r\n    setAdminGameState: PropTypes.func.isRequired,\r\n    questions: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default AdminPage;","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\r\n\r\n\r\nconst GameMainMenu = ({ onSubmitName, canSubmitName }) => {\r\n\r\n    const [showSettingsModal, setShowSettingsModal] = useState(false);\r\n    const handleShowSettings = () => setShowSettingsModal(true);\r\n    const handleCloseSettings = () => setShowSettingsModal(false);\r\n\r\n    const handleNameSubmit = (e) => {\r\n        e.preventDefault();\r\n        onSubmitName(e.target[0].value, e.target[1].value);\r\n    }\r\n\r\n    return (<>\r\n\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\" />\r\n            <Nav>\r\n                <Nav.Item className=\"mr-2\">\r\n                <LinkContainer to=\"/team-page\">\r\n                    <Button>Go to <strong>Team Page</strong></Button>\r\n                </LinkContainer>\r\n                </Nav.Item>\r\n                <Nav.Link href=\"https://github.com/BlaziusMaximus/NameThatSummation\">\r\n                Go to <strong>GitHub</strong>\r\n                </Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <Button variant=\"secondary\" onClick={handleShowSettings}>Settings</Button>\r\n        <Modal show={showSettingsModal} onHide={handleCloseSettings} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n            <Modal.Title>Settings</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <fieldset>\r\n                <Form>\r\n                    <Form.Check type=\"checkbox\" label=\"Settings Option 1\" />\r\n                    <Form.Check type=\"checkbox\" label=\"Settings Option 2\" />\r\n                </Form>\r\n                <Form>\r\n                    <Form.Check type=\"radio\" label=\"Settings Option 3\" />\r\n                    <Form.Check type=\"radio\" label=\"Settings Option 4\" />\r\n                </Form>\r\n            </fieldset>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleCloseSettings}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col sm=\"auto\"><h1>Name That Summation</h1></Col>\r\n            </Row>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col sm={8}>\r\n                <Form onSubmit={handleNameSubmit}>\r\n                <Form.Row>\r\n                <InputGroup>\r\n                    <Col style={{padding: \"0\"}}>\r\n                    <FormControl\r\n                        placeholder=\"Display Name\"\r\n                        aria-label=\"Display Name\"\r\n                        aria-describedby=\"display-name-form\"\r\n                    />\r\n                    </Col>\r\n                    <Col style={{padding: \"0\"}}>\r\n                    <FormControl\r\n                        placeholder=\"Section\"\r\n                        aria-label=\"Section\"\r\n                        aria-describedby=\"section-form\"\r\n                    />\r\n                    </Col>\r\n                    <InputGroup.Append>\r\n                        <Button variant=\"outline-primary\" type=\"submit\" disabled={!canSubmitName}>Submit</Button>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n                </Form.Row>\r\n                </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n        \r\n    </>);\r\n}\r\n\r\nGameMainMenu.propTypes = {\r\n    onSubmitName: PropTypes.func.isRequired,\r\n    canSubmitName: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default GameMainMenu;","import {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport evaluatex from \"evaluatex\";\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport GameChart from '../GameChart';\r\n\r\n\r\nconst GameQuestion = ({ displayName, chartData, questionTime, timer, endQuestion, selectAnswer }) => {\r\n\r\n    const [showFeedbackModal, setShowFeedbackModal] = useState(false);\r\n    const hideFeedbackModal = () => {\r\n        setShowFeedbackModal(false);\r\n\r\n        if (answerChoiceIndex === chartData.answerIndex) {\r\n            endQuestion(answerTime);\r\n        }\r\n    }\r\n\r\n    const [answerChoiceIndex, setAnswerChoiceIndex] = useState(null);\r\n    const [answersClicked, setAnswersClicked] = useState(new Array(chartData.renderChoices.length).fill(0));\r\n    const [answerTime, setAnswerTime] = useState(null);\r\n    const handleAnswerSelect = (e) => {\r\n        e.preventDefault();\r\n        let id = parseInt(e.currentTarget.id);\r\n        let newAnsClicked = answersClicked; newAnsClicked[parseInt(id)] = 1; setAnswersClicked(newAnsClicked);\r\n        \r\n        selectAnswer(id, questionTime-timer);\r\n        setAnswerChoiceIndex(id);\r\n        setAnswerTime(questionTime-timer);\r\n\r\n        setShowFeedbackModal(true);\r\n    }\r\n\r\n    let cd = {...chartData};\r\n    cd.data = cd.data.slice(0,1);\r\n    const [chartDataSlice, setChartDataSlice] = useState(cd);\r\n    useEffect(() => {\r\n        let cd = {...chartData};\r\n        let x = parseFloat(questionTime-timer)/parseFloat(questionTime);\r\n        let l = chartData.data.length;\r\n        let sliceI = Math.floor(x*(l-1))+1;//Math.floor(x**2 * (l-2))+2;\r\n        console.log(sliceI)\r\n        cd.data = cd.data.slice(0, Math.min(l, sliceI));\r\n        setChartDataSlice(cd);\r\n    }, [timer, questionTime, chartData, endQuestion]);\r\n\r\n    const pointEval = (e) => {\r\n        let y = evaluatex(chartData.evalChoices[answerChoiceIndex])({x:e});\r\n        if (y === Infinity || y === -Infinity) {\r\n            return null;\r\n        }\r\n        return y;\r\n    }\r\n\r\n    return (<>\r\n\r\n        <h2>Name: {displayName}</h2>\r\n\r\n        <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n            <Card.Header as=\"h5\">Time Remaining: {timer}</Card.Header>\r\n            <Card.Body>\r\n                <GameChart data={[chartDataSlice]} />\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                {chartData.renderChoices.map((e,index) => (\r\n                <Button\r\n                    id={index} key={index}\r\n                    onClickCapture={handleAnswerSelect}\r\n                    variant={answersClicked[index]===1?(index===chartData.answerIndex?\"success\":\"danger\"):\"primary\"}\r\n                    disabled={answersClicked[index]===1}\r\n                    style={{margin: \"0 2%\"}}>\r\n                        <MathComponent tex={`y = ${e}`} style={{pointerEvents:\"none;\"}} display={false} />\r\n                </Button>\r\n                ))}\r\n            </Card.Footer>\r\n        </Card>\r\n\r\n        <Modal show={showFeedbackModal} onHide={hideFeedbackModal} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{answerChoiceIndex===chartData.answerIndex?\"Correct!\":\"Not Quite...\"}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            {answerChoiceIndex===chartData.answerIndex ?<>\r\n                <p>Good work! <MathComponent tex={`y = ${chartData.renderChoices[answerChoiceIndex]}`} display={false} /> was the correct equation.</p>\r\n                <Card style={{height:\"40vh\"}} className=\"text-center\">\r\n                    <GameChart data={[chartData]} />\r\n                </Card>\r\n            </>:<>\r\n                <p>Not quite... <MathComponent tex={`y = ${chartData.renderChoices[answerChoiceIndex]}`} display={false} /> isn't correct.</p>\r\n                <Card style={{height:\"40vh\"}} className=\"text-center\">\r\n                    <GameChart\r\n                        data={answerChoiceIndex==null?[chartDataSlice]:[\r\n                            chartDataSlice, \r\n                            { \"id\": \"wrongData\", \"data\": [...Array(Math.floor((chartData.xEnd-chartData.xStart)/parseFloat(chartData.xInc))+1).keys()].map(e => (\r\n                                { \"x\":String(e), \"y\":pointEval(e) }\r\n                            )).slice(0,chartDataSlice.data.length)}\r\n                        ]}\r\n                    />\r\n                </Card>\r\n            </>}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={hideFeedbackModal}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    \r\n    </>);\r\n}\r\n\r\nGameQuestion.propTypes = {\r\n    displayName: PropTypes.string.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    questionTime: PropTypes.number.isRequired,\r\n    timer: PropTypes.number.isRequired,\r\n    endQuestion: PropTypes.func.isRequired,\r\n    selectAnswer: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default GameQuestion;","import PropTypes from 'prop-types';\r\n\r\nconst GameWaitingRoom = ({ displayName, playersList }) => {\r\n\r\n    return (\r\n        <>\r\n        <h2>Name: {displayName}</h2>\r\n        <br />\r\n        <h1>WAITING</h1>\r\n        <ul>\r\n            {playersList.map(player =>  <li key={player.name+\"\"+player.city}>{player.name}</li> )}\r\n        </ul>\r\n        </>\r\n    );\r\n}\r\n\r\nGameWaitingRoom.propTypes = {\r\n    displayName: PropTypes.string.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default GameWaitingRoom;","import {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport GameChart from '../GameChart';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\n\r\nconst GameLeaderboard = ({ player, chartData, topPlayers }) => {\r\n\r\n    const localPlayer = topPlayers.find(p => p.id===player.id)===undefined ? null : player;\r\n\r\n    return (<>\r\n\r\n        <h2>Name: {player.name}</h2>\r\n        <h3>Score: {player.score}</h3>\r\n        <br />\r\n\r\n        <Container fluid>\r\n            <Row>\r\n                <Col xs={8}>\r\n                <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n                    <Card.Header as=\"h5\">Time Spent on Question: {player.times[player.times.length-1]}s</Card.Header>\r\n                    <Card.Body>\r\n                        <GameChart data={[chartData]} />\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        {chartData.renderChoices.map((e,index) => (\r\n                        <Button\r\n                            id={index}\r\n                            key={index}\r\n                            disabled\r\n                            variant={index===chartData.answerIndex?\"success\":\"primary\"}\r\n                            style={{margin: \"0 2%\"}}>\r\n                                <MathComponent tex={`y = ${e}`} display={false} />\r\n                        </Button>\r\n                        ))}\r\n                    </Card.Footer>\r\n                </Card>\r\n                </Col>\r\n                <Col>\r\n                    <h1>LEADERBOARD</h1>\r\n                    <Table striped bordered>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Top Players</th>\r\n                            <th>Scores</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {topPlayers.map(player =>\r\n                        <tr key={player.name+\"\"+player.score}>\r\n                            <td>{player.name}</td>\r\n                            <td>{player.score}</td>\r\n                        </tr>\r\n                        )}\r\n                        <tr key=\"ellipsis\">\r\n                            <td colSpan={2} style={{textAlign: \"center\"}}>...</td>\r\n                        </tr>\r\n                        {localPlayer == null ? <></> : (\r\n                        <tr key=\"localPlayer\">\r\n                            <td>{localPlayer.name}</td>\r\n                            <td>{localPlayer.score}</td>\r\n                        </tr>\r\n                        )}\r\n                    </tbody>\r\n                    </Table>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    \r\n    </>);\r\n}\r\n\r\nGameLeaderboard.propTypes = {\r\n    player: PropTypes.object.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    topPlayers: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default GameLeaderboard;","import PropTypes from 'prop-types';\r\n\r\nimport GameChart from '../GameChart';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\n\r\nconst GameReview = ({ player, chartsData, topPlayers }) => {\r\n\r\n    const localPlayer = topPlayers.find(p => p.id===player.id)===undefined ? null : player;\r\n\r\n    return (<>\r\n\r\n        <h2>Name: {player.name}</h2>\r\n        <h3>Score: {player.score}</h3>\r\n        <br />\r\n\r\n        <Container fluid>\r\n        <Row>\r\n            <Col xs={8}>\r\n            <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey={chartsData[0].id}>\r\n            <Row>\r\n                <Col sm={3}>\r\n                    <ListGroup>\r\n                        {chartsData.map((chart,index) => (\r\n                        <ListGroup.Item href={chart.id} key={chart.id} style={{cursor: \"pointer\"}}>\r\n                            Q{index+1}: {chart.id}\r\n                        </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n                </Col>\r\n                <Col sm={9}>\r\n                <Tab.Content>\r\n                    {chartsData.map((chart,index) => (\r\n                    <Tab.Pane eventKey={chart.id} key={chart.id}>\r\n                    <Card style={{height:\"60vh\"}} className=\"text-center\">\r\n                        <Card.Header as=\"h5\">Time Spent on Question: {player.times[index]}s</Card.Header>\r\n                        <Card.Body>\r\n                            <GameChart data={[chart]} />\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            {chart.renderChoices.map((e, expindex) => (\r\n                            <Button disabled id={e} key={e} variant={chart.answerIndex===expindex?\"success\":\"primary\"} style={{margin: \"0 2%\"}}>\r\n                                <MathComponent tex={`y = ${e}`} display={false} />\r\n                            </Button>\r\n                            ))}\r\n                        </Card.Footer>\r\n                    </Card>\r\n                    <h3>Wrong Answers:</h3>\r\n                    <ListGroup horizontal>\r\n                    {player.wrongAnswers[chart.id]!==undefined ? player.wrongAnswers[chart.id].map((ans) => (\r\n                        <ListGroup.Item key={ans+\"wrong\"}>\r\n                            <MathComponent tex={`y = ${chart.renderChoices[ans]}`} display={false} />\r\n                        </ListGroup.Item>\r\n                    )) : <></>}\r\n                    </ListGroup>\r\n                    </Tab.Pane>\r\n                    ))}\r\n                </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n            </Tab.Container>\r\n            </Col>\r\n            <Col>\r\n                <h1>LEADERBOARD</h1>\r\n                <Table striped bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Top Players</th>\r\n                        <th>Scores</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {topPlayers.map(player =>\r\n                    <tr key={player.name+\"\"+player.score}>\r\n                        <td>{player.name}</td>\r\n                        <td>{player.score}</td>\r\n                    </tr>\r\n                    )}\r\n                    <tr key=\"ellipsis\">\r\n                        <td colSpan={2} style={{textAlign: \"center\"}}>...</td>\r\n                    </tr>\r\n                    {localPlayer == null ? <></> : (\r\n                    <tr key=\"localPlayer\">\r\n                        <td>{localPlayer.name}</td>\r\n                        <td>{localPlayer.score}</td>\r\n                    </tr>\r\n                    )}\r\n                </tbody>\r\n                </Table>\r\n            </Col>\r\n        </Row>\r\n        </Container>\r\n    \r\n    </>);\r\n}\r\n\r\nGameReview.propTypes = {\r\n    player: PropTypes.object.isRequired,\r\n    chartsData: PropTypes.array.isRequired,\r\n    topPlayers: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default GameReview;","import PropTypes from 'prop-types';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\r\n\r\n\r\nconst DevPanel = ({ goToMainMenu, goToLeaderboard, goToQuestion, goToReview, goToWaitingRoom, displayName, setDisplayName }) => {\r\n\r\n    return (\r\n        <>\r\n        <Button onClick={() => goToMainMenu()}>MAIN MENU</Button>\r\n        <Button onClick={() => {setDisplayName(displayName); goToWaitingRoom(displayName);}}>WAITING ROOM</Button>\r\n        <Button onClick={goToQuestion}>QUESTION</Button>\r\n        <Button onClick={() => goToLeaderboard(1)}>LEADERBOARD</Button>\r\n        <Button onClick={() => goToReview(1)}>REVIEW</Button>\r\n        <LinkContainer to=\"/admin-page\">\r\n            <Button>ADMIN</Button>\r\n        </LinkContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nDevPanel.propTypes = {\r\n    goToMainMenu: PropTypes.func.isRequired,\r\n    goToLeaderboard: PropTypes.func.isRequired,\r\n    goToQuestion: PropTypes.func.isRequired,\r\n    goToReview: PropTypes.func.isRequired,\r\n    goToWaitingRoom: PropTypes.func.isRequired,\r\n    displayName: PropTypes.string.isRequired,\r\n    setDisplayName: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default DevPanel;","import PropTypes from 'prop-types';\r\nimport React, {useState} from 'react';\r\n\r\nimport { db } from \"../firebase\";\r\n\r\nimport GameMainMenu from './game-page/GameMainMenu';\r\nimport GameQuestion from './game-page/GameQuestion';\r\nimport GameWaitingRoom from './game-page/GameWaitingRoom';\r\nimport GameLeaderboard from './game-page/GameLeaderboard';\r\nimport GameReview from './game-page/GameReview';\r\nimport DevPanel from './DevPanel';\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst GamePage = ({ questions, chartData, players, adminQuestionIndex, waitingRoomIsOpen }) => {\r\n\r\n    const questionTime = 15;\r\n\r\n    const pageStates = {\r\n        MAIN_MENU: \"MAIN_MENU\",\r\n        WAITING_ROOM: \"WAITING_ROOM\",\r\n        QUESTION: \"QUESTION\",\r\n        LEADERBOARD: \"LEADERBOARD\",\r\n        REVIEW: \"REVIEW\",\r\n    };\r\n    const [pageState, setPageState] = useState(pageStates.MAIN_MENU);\r\n    \r\n    const [timer, setTimer] = useState(questionTime);\r\n    \r\n    const [questionIndex, setQuestionIndex] = useState(null);\r\n\r\n    const [localPlayerObj, setLocalPlayerObj] = useState({\r\n        \"id\": null,\r\n        \"name\": null,\r\n        \"score\": null,\r\n        \"section\": null,\r\n        \"answers\": [],\r\n        \"wrongAnswers\": [],\r\n        \"times\": [],\r\n    });\r\n\r\n    const [showKickModal, setShowKickModal] = useState(false);\r\n    const handleShowKick = () => setShowKickModal(true);\r\n    const handleCloseKick = () => setShowKickModal(false);\r\n    \r\n    const goToMainMenu = () => {\r\n        setPageState(pageStates.MAIN_MENU);\r\n    }\r\n    const goToWaitingRoom = (name, section) => {\r\n        setPageState(pageStates.WAITING_ROOM);\r\n        const newPlayerObj = {\r\n            ...localPlayerObj,\r\n            id: Math.floor(Math.random()*Date.now()),\r\n            \"name\": name,\r\n            \"section\": section,\r\n            \"score\": 0,\r\n        }\r\n        setLocalPlayerObj({\r\n            ...newPlayerObj,\r\n        });\r\n        db.collection(\"playersDB\").doc(name).set({\r\n            ...newPlayerObj,\r\n        });\r\n    }\r\n    const goToQuestion = React.useCallback(() => {\r\n        setPageState(pageStates.QUESTION);\r\n        setQuestionIndex(adminQuestionIndex);\r\n        console.log(adminQuestionIndex)\r\n        setTimer(questionTime);\r\n    }, [adminQuestionIndex, pageStates.QUESTION]);\r\n    const goToLeaderboard = React.useCallback(() => {\r\n        setPageState(pageStates.LEADERBOARD);\r\n    }, [pageStates.LEADERBOARD]);\r\n    const goToReview = React.useCallback(() => {\r\n        setPageState(pageStates.REVIEW);\r\n    }, [pageStates.REVIEW]);\r\n\r\n    React.useEffect(() => {\r\n        if (adminQuestionIndex != null && (pageState === pageStates.WAITING_ROOM || adminQuestionIndex !== questionIndex)) {\r\n            goToQuestion();\r\n        }\r\n        if (adminQuestionIndex === null && (pageState === pageStates.QUESTION || pageState === pageStates.LEADERBOARD)) {\r\n            goToReview();\r\n        }\r\n    }, [adminQuestionIndex, questionIndex, pageState, pageStates.WAITING_ROOM, pageStates.QUESTION, pageStates.LEADERBOARD, goToQuestion, goToReview]);\r\n\r\n    const handleAnswerSubmit = async (a,t) => {\r\n        // console.log(localPlayerObj.name, \"answer:\", a, \"time:\", t, \"score:\",chartData.maxScore*t);\r\n        const score = parseFloat(chartData.maxScore)*parseFloat(t)/parseFloat(questionTime);\r\n        let was = localPlayerObj.wrongAnswers;\r\n        let newAnswer = false;\r\n        if (was[chartData.id] === undefined) { was[chartData.id] = []; newAnswer = true; }\r\n        if (a !== chartData.answerIndex) { was[chartData.id].push(a); }\r\n        const newPlayerObj = {\r\n            ...localPlayerObj,\r\n            answers: newAnswer?[...(localPlayerObj.answers),a]:[...(localPlayerObj.answers)],\r\n            wrongAnswers: was,\r\n            times: newAnswer?[...(localPlayerObj.times),t]:[...(localPlayerObj.times)],\r\n            score: localPlayerObj.score + newAnswer?Math.floor(score):0,\r\n        };\r\n        setLocalPlayerObj({\r\n            ...newPlayerObj,\r\n        });\r\n        db.collection('playersDB').doc(localPlayerObj.name).set({\r\n            ...newPlayerObj,\r\n        });\r\n    }\r\n\r\n    const [topPlayers, setTopPlayers] = useState([]);\r\n    React.useEffect(() => {\r\n        setTopPlayers(\r\n            players.filter(a => Number.isInteger(a.score))\r\n                   .sort((a,b) => a.score<b.score ? 1 : -1)\r\n                   .slice(0,5)\r\n        );\r\n        \r\n        if (pageState !== pageStates.MAIN_MENU && players.find(player => player.id === localPlayerObj.id) === undefined) {\r\n            // console.log(\"local player not in playersDB\", players, localPlayerObj);\r\n            setPageState(pageStates.MAIN_MENU);\r\n            handleShowKick();\r\n        }\r\n    }, [players, pageStates.MAIN_MENU]);\r\n\r\n    React.useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (pageState === pageStates.QUESTION) {\r\n                if (timer > 0) {\r\n                    setTimer(timer => timer-1);\r\n                } else {\r\n                    const newPlayerObj = {\r\n                        ...localPlayerObj,\r\n                        answers: [...(localPlayerObj.answers),null],\r\n                        times: [...(localPlayerObj.times),null],\r\n                    };\r\n                    setLocalPlayerObj({\r\n                        ...newPlayerObj,\r\n                    });\r\n                    db.collection('playersDB').doc(localPlayerObj.name).set({\r\n                        ...newPlayerObj,\r\n                    });\r\n                    goToLeaderboard();\r\n                }\r\n            }\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, [timer, goToLeaderboard, pageState, pageStates.QUESTION]);\r\n\r\n    return (<>\r\n\r\n        {pageState === pageStates.MAIN_MENU ? <>\r\n        <GameMainMenu\r\n            onSubmitName={(name, section) => {\r\n                setLocalPlayerObj({...localPlayerObj, \"name\":name, \"section\": section});\r\n                goToWaitingRoom(name, section);\r\n            }}\r\n            canSubmitName={waitingRoomIsOpen}\r\n        />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.WAITING_ROOM ? <>\r\n        <GameWaitingRoom\r\n            displayName={localPlayerObj.name}\r\n            playersList={players}\r\n        />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.QUESTION ? <>\r\n        <GameQuestion\r\n            displayName={localPlayerObj.name}\r\n            chartData={chartData}\r\n            questionTime={questionTime}\r\n            timer={timer}\r\n            endQuestion={goToLeaderboard}\r\n            selectAnswer={handleAnswerSubmit}\r\n        />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.LEADERBOARD ? <>\r\n        <GameLeaderboard\r\n            player={localPlayerObj}\r\n            chartData={chartData}\r\n            topPlayers={topPlayers}\r\n        />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.REVIEW ? <>\r\n        <GameReview\r\n            player={localPlayerObj}\r\n            chartsData={questions}\r\n            topPlayers={topPlayers}\r\n        />\r\n        </> : <></>}\r\n\r\n        <Modal show={showKickModal} onHide={handleCloseKick} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Kicked From Game</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                You've been kicked from the game and removed from the database.\r\n                Contact the administrator for more information.\r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n        <br />\r\n        <DevPanel\r\n            goToMainMenu={goToMainMenu}\r\n            goToLeaderboard={goToLeaderboard}\r\n            goToReview={goToReview}\r\n            goToQuestion={goToQuestion}\r\n            goToWaitingRoom={goToWaitingRoom}\r\n            displayName={localPlayerObj.name==null?\"\":localPlayerObj.name}\r\n            setDisplayName={(name) => setLocalPlayerObj({...localPlayerObj, \"name\":name})}\r\n        />\r\n    \r\n    </>);\r\n}\r\n\r\nGamePage.propTypes = {\r\n    questions: PropTypes.array.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    players: PropTypes.array.isRequired,\r\n    adminQuestionIndex: PropTypes.number,\r\n    waitingRoomIsOpen: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default GamePage;","import React from 'react';\nimport {useState} from 'react';\n\nimport { db } from \"./firebase\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport evaluatex from \"evaluatex\";\n\nimport Button from 'react-bootstrap/Button';\n\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\n\nimport TeamPageHeader from './components/team-page/TeamPageHeader';\nimport TeamPageBody from './components/team-page/TeamPageBody';\nimport AdminPage from './components/AdminPage';\nimport GamePage from './components/GamePage';\n\nimport './App.css';\n\nfunction App() {\n\n    const adminGameStates = {\n        OFFLINE: \"OFFLINE\",\n        WAITING: \"WAITING\",\n        PLAYING: \"PLAYING\",\n        REVIEW: \"REVIEW\",\n    };\n\n    const [players, setPlayers] = useState([]);\n    React.useEffect(() => {\n        db.collection(\"playersDB\").onSnapshot((snapshot) => {\n            if (snapshot.docs.length > 0) {\n                setPlayers(snapshot.docs.map(doc => doc.data()));\n            } else {\n                setPlayers([]);\n            }\n        });\n        console.log(\"fetched players from firebase\")\n    }, []);\n\n    const [questions, setQuestions] = useState([]);\n    React.useEffect(() => {\n        db.collection(\"questions\").onSnapshot((snapshot) => {\n            setQuestions(snapshot.docs.map((doc) => {\n                let { xEnd, xStart, xInc, evalChoices, renderChoices, answerIndex, maxScore } = doc.data();\n                return {\n                    \"id\": doc.id,\n                    \"color\": \"hsl(24, 70%, 50%)\",\n                    \"data\": [...Array(Math.floor((xEnd-xStart)/parseFloat(xInc))+1).keys()].map(e => (\n                        { \"x\":String(e), \"y\":evaluatex(evalChoices[answerIndex])({x:e}) }\n                    )),\n                    \"renderChoices\": renderChoices,\n                    \"answerIndex\": answerIndex,\n                    \"maxScore\": maxScore==null?300:maxScore,\n                    \"evalChoices\": evalChoices,\n                    \"xEnd\": xEnd,\n                    \"xStart\": xStart,\n                    \"xInc\": xInc,\n                };\n            }).sort((a,b) => parseInt(a.id.substring(1))>parseInt(b.id.substring(1))?1:-1));\n\n        });\n        console.log(\"fetched questions from firebase\")\n    }, []);\n\n    const [adminGameState, setAdminGameState] = useState({\n        state: adminGameStates.OFFLINE,\n        questionIndex: null,\n    });\n    React.useEffect(() => {\n        db.collection(\"adminVars\").doc(\"GameState\").onSnapshot((doc) => {\n            console.log(doc.data())\n            setAdminGameState(doc.data());\n\n            db.collection(\"playersDB\").get().then(playersDB => {\n                setPlayers(playersDB.docs.map(doc => doc.data()))\n            })\n        });\n        console.log(\"fetched admins variables from firebase\")\n    }, []);\n\n    return (\n    <Router basename=\"/NameThatSummation\">\n        <Switch>\n            <Route exact path=\"/\">\n                <nav>\n                    <LinkContainer to=\"/team-page\">\n                        <Button>TEAM PAGE</Button>\n                    </LinkContainer>\n                    <LinkContainer to=\"/game-page\">\n                        <Button>GAME PAGE</Button>\n                    </LinkContainer>\n                    <LinkContainer to=\"/admin-page\">\n                        <Button>ADMIN PAGE</Button>\n                    </LinkContainer>\n                </nav>\n            </Route>\n            <Route path=\"/team-page\">\n                <TeamPageHeader />\n                <br />\n                <TeamPageBody />\n            </Route>\n            <Route path=\"/game-page\">\n                <GamePage\n                    questions={questions}\n                    chartData={adminGameState.questionIndex!=null?questions[adminGameState.questionIndex]:{\n                        \"id\": \"\",\n                        \"color\": null,\n                        \"data\": [],\n                        \"renderChoices\": [],\n                        \"answerIndex\": null,\n                        \"maxScore\": null,\n                    }}\n                    players={players}\n                    adminQuestionIndex={adminGameState.questionIndex}\n                    waitingRoomIsOpen={adminGameState.state === adminGameStates.WAITING}\n                />\n            </Route>\n            <Route path=\"/admin-page\">\n                <AdminPage\n                    gameStates={adminGameStates}\n                    gameState={adminGameState.state}\n                    playersList={players}\n                    adminGameState={adminGameState}\n                    setAdminGameState={setAdminGameState}\n                    questions={questions}\n                />\n            </Route>\n        </Switch>\n        \n        <br /><br />\n        <LinkContainer to=\"/\">\n            <Button>HOME</Button>\n        </LinkContainer>\n    </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}