{"version":3,"sources":["firebase.js","components/team-page/TeamPageHeader.js","components/team-page/TeamPageBody.js","components/admin-page/AdminWaiting.js","components/GameChart.js","components/admin-page/AdminPlaying.js","components/admin-page/AdminReview.js","components/admin-page/AdminOffline.js","components/AdminFirebase.js","components/AdminPage.js","components/game-page/GameMainMenu.js","components/game-page/GameQuestion.js","components/game-page/GameWaitingRoom.js","components/game-page/GameLeaderboard.js","components/game-page/GameReview.js","components/DevPanel.js","components/GamePage.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","TeamPageHeader","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Item","to","Button","Link","href","TeamPageBody","Container","Row","style","width","height","ResponsiveEmbed","aspectRatio","title","src","AdminWaiting","playersList","startGame","quitGame","kickPlayer","onClick","size","block","Table","striped","bordered","hover","map","player","name","section","GameChart","data","margin","top","right","bottom","left","xScale","type","yScale","min","max","stacked","reverse","yFormat","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","AdminPlaying","prevQuestion","nextQuestion","questions","localGameState","playerAnswers","useState","tab","setTab","answerStats","setAnswerStats","React","useEffect","newStats","forEach","undefined","console","log","ButtonGroup","disabled","questionIndex","fluid","Col","sm","Card","Body","Footer","renderChoices","e","index","answerIndex","tex","display","ProgressBar","label","length","now","padding","Tabs","activeKey","onSelect","t","Tab","eventKey","overflowY","score","city","defaultActiveKey","ListGroup","q","cursor","paddingLeft","paddingRight","Content","Pane","expindex","AdminReview","chartsData","endGame","rankedPlayers","sort","a","b","topPlayers","slice","xs","chart","pointerEvents","AdminOffline","initializeGame","clearGame","uploadQuestions","noQuestions","questionsFile","setQuestionsFile","fileReader","FileReader","readAsText","onload","questionJSON","JSON","parse","result","Form","Group","File","onChange","target","files","deletePlayers","players","collection","doc","delete","setFirebaseGameState","state","set","json","i","deleteQuestions","question","clearAnswers","AdminPage","pageStates","pageState","setLocalGameState","newGameState","OFFLINE","WAITING","PLAYING","qIndex","REVIEW","GameMainMenu","onSubmitName","canSubmitName","showSettingsModal","setShowSettingsModal","handleCloseSettings","Modal","show","onHide","aria-labelledby","centered","Header","closeButton","Title","Check","onSubmit","preventDefault","value","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","GameQuestion","displayName","chartData","questionTime","timer","endQuestion","selectAnswer","showFeedbackModal","setShowFeedbackModal","hideFeedbackModal","answerChoiceIndex","answerTime","setAnswerChoiceIndex","Array","fill","answersClicked","setAnswersClicked","setAnswerTime","handleAnswerSelect","parseInt","currentTarget","newAnsClicked","cd","chartDataSlice","setChartDataSlice","x","parseFloat","l","sliceI","Math","floor","pointEval","y","evaluatex","evalChoices","Infinity","as","onClickCapture","xEnd","xStart","xInc","keys","String","GameWaitingRoom","GameLeaderboard","localPlayer","find","p","times","topPlayer","backgroundColor","colSpan","textAlign","GameReview","horizontal","wrongAnswers","ans","DevPanel","goToMainMenu","goToLeaderboard","goToQuestion","goToReview","goToWaitingRoom","setDisplayName","GamePage","adminQuestionIndex","waitingRoomIsOpen","setPageState","setTimer","setQuestionIndex","localPlayerObj","setLocalPlayerObj","showKickModal","setShowKickModal","newPlayerObj","random","Date","useCallback","handleAnswerSubmit","maxScore","was","newAnswer","push","answers","newAnswers","setTopPlayers","filter","Number","isInteger","interval","setInterval","clearInterval","App","adminPageStates","setPlayers","onSnapshot","snapshot","docs","setQuestions","substring","adminGameState","setAdminGameState","get","then","playersDB","setPlayerAnswers","basename","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d89be08a.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\n// const firebaseConfig = {\r\n//     apiKey: \"AIzaSyBzSeHJ4YWxiLpE09A7mzpYUxUfOWeq3SU\",\r\n//     authDomain: \"sum-that-notation-13637.firebaseapp.com\",\r\n//     projectId: \"sum-that-notation-13637\",\r\n//     storageBucket: \"sum-that-notation-13637.appspot.com\",\r\n//     messagingSenderId: \"912432195227\",\r\n//     appId: \"1:912432195227:web:bc908eb3957185b597483e\",\r\n//     measurementId: \"G-MCKECB516P\"\r\n// };\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyB-xHDeSe4hqhBhG5QEOy6NMdF61QA6orI\",\r\n    authDomain: \"comp585-version1.firebaseapp.com\",\r\n    projectId: \"comp585-version1\",\r\n    storageBucket: \"comp585-version1.appspot.com\",\r\n    messagingSenderId: \"86593862085\",\r\n    appId: \"1:86593862085:web:c1f4f3f0a331797292b3ac\",\r\n    measurementId: \"G-1PWT66W06C\"\r\n};\r\n\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const auth = firebase.auth;\r\nexport const db = firebase.firestore();","import Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\r\n\r\n\r\nconst TeamPageHeader = () => {\r\n\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand>Name That Summation</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\" />\r\n            <Nav>\r\n                <Nav.Item className=\"mr-2\">\r\n                <LinkContainer to=\"/game-page\">\r\n                    <Button>Go to <strong>Game</strong></Button>\r\n                </LinkContainer>\r\n                </Nav.Item>\r\n                <Nav.Link href=\"https://github.com/BlaziusMaximus/NameThatSummation\">\r\n                Go to <strong>GitHub</strong>\r\n                </Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default TeamPageHeader;","import Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ResponsiveEmbed from 'react-bootstrap/ResponsiveEmbed';\r\n\r\nconst TeamPageBody = () => {\r\n    return (\r\n        <Container>\r\n            <Row><h3>Team/Client Information</h3></Row>\r\n            <Row><p>Adam Cogdell (adamc77@live.unc.edu): Game Architect, Client Manager</p></Row>\r\n            <Row><p>Emre Yanmis (emre61@live.unc.edu): Software Architect</p></Row>\r\n            <Row><p>Tiger Deng (y.deng@unc.edu): Project Manager, Editor</p></Row>\r\n            <Row><p>John Majikes (jmajikes@cs.unc.edu): Client</p></Row>\r\n\r\n            <Row><h3 id=\"meeting-information\">Meeting Information</h3></Row>\r\n            <Row><p>Client Meetings: Tuesday @ 2:30PM</p></Row>\r\n            <Row><p>Professor Meetings (recitation): Thursday 3:30-4:30PM</p></Row>\r\n            <Row><p>Team Meetings: Monday @ 6:00PM</p></Row>\r\n\r\n            <Row>\r\n                <div style={{ width: '8.5in', height: 'auto' }}>\r\n                    <ResponsiveEmbed aspectRatio=\"1by1\">\r\n                        <iframe title=\"Design Doc\" src=\"https://docs.google.com/document/d/e/2PACX-1vR3nIMv9RltRskz5HY8NZmztMdaF0d1Mfb3Hda5n9-c8VyV_3afAFM-4RU_UVSMI2WajPdJPZLxVgmS/pub?embedded=true\" />\r\n                    </ResponsiveEmbed>\r\n                </div>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TeamPageBody;","import PropTypes from 'prop-types';\r\n\r\nimport {\r\n    Button,\r\n    Table,\r\n} from 'react-bootstrap';\r\n\r\n\r\nconst AdminWaiting = ({ playersList, startGame, quitGame, kickPlayer }) => {\r\n\r\n    return (<>\r\n\r\n        <Button onClick={quitGame} id=\"startgame\" variant=\"danger\" size=\"lg\" block>Quit Game</Button>\r\n        <Button onClick={startGame} id=\"startgame\" variant=\"success\" size=\"lg\" block>Start Game</Button>\r\n\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <th style={{width: \"10%\"}}></th>\r\n                    <th>Player</th>\r\n                    <th>Section</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {playersList.map(player =>\r\n                <tr key={player.name+\"\"+player.section}>\r\n                    <td><Button onClick={() => kickPlayer(player)}>Kick</Button></td>\r\n                    <td>{player.name}</td>\r\n                    <td>{player.section}</td>\r\n                </tr>\r\n            )}\r\n            </tbody>\r\n        </Table>\r\n\r\n    </>);\r\n}\r\n\r\nAdminWaiting.propTypes = {\r\n    playersList: PropTypes.array.isRequired,\r\n    startGame: PropTypes.func.isRequired,\r\n    quitGame: PropTypes.func.isRequired,\r\n    kickPlayer: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AdminWaiting;","import { ResponsiveLine } from 'nivo/es/components/charts/line';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst GameChart = ({ data }) => {\r\n    return (\r\n        <ResponsiveLine\r\n            data={data}\r\n            margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n            xScale={{ type: 'point' }}\r\n            yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\r\n            yFormat=\" >-.2f\"\r\n            axisTop={null}\r\n            axisRight={null}\r\n            axisBottom={{\r\n                orient: 'bottom',\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: 'x-axis',\r\n                legendOffset: 36,\r\n                legendPosition: 'center'\r\n            }}\r\n            axisLeft={{\r\n                orient: 'left',\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: 'y-axis',\r\n                legendOffset: -40,\r\n                legendPosition: 'center'\r\n            }}\r\n            pointSize={10}\r\n            pointColor={{ theme: 'background' }}\r\n            pointBorderWidth={2}\r\n            pointBorderColor={{ from: 'serieColor' }}\r\n            pointLabelYOffset={-12}\r\n            useMesh={true}\r\n            legends={[\r\n                {\r\n                    anchor: 'bottom-right',\r\n                    direction: 'column',\r\n                    justify: false,\r\n                    translateX: 100,\r\n                    translateY: 0,\r\n                    itemsSpacing: 0,\r\n                    itemDirection: 'left-to-right',\r\n                    itemWidth: 80,\r\n                    itemHeight: 20,\r\n                    itemOpacity: 0.75,\r\n                    symbolSize: 12,\r\n                    symbolShape: 'circle',\r\n                    symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                    effects: [\r\n                        {\r\n                            on: 'hover',\r\n                            style: {\r\n                                itemBackground: 'rgba(0, 0, 0, .03)',\r\n                                itemOpacity: 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nGameChart.propTypes = {\r\n    data: PropTypes.oneOfType([\r\n        PropTypes.object,\r\n        PropTypes.array,\r\n    ]).isRequired,\r\n}\r\n\r\nexport default GameChart;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n    Button,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    Tabs,\r\n    Tab,\r\n    Table,\r\n    ListGroup,\r\n    ButtonGroup,\r\n    ProgressBar,\r\n} from 'react-bootstrap';\r\n\r\nimport GameChart from '../GameChart';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\n\r\nconst AdminPlaying = ({ quitGame, prevQuestion, nextQuestion, questions, localGameState, playersList, playerAnswers }) => {\r\n\r\n    const [tab, setTab] = useState(\"players\");\r\n\r\n    const [answerStats, setAnswerStats] = useState([0,0,0,0]);\r\n    React.useEffect(() => {\r\n        let newStats = [0,0,0,0];\r\n        playersList.forEach(player => {\r\n            if (playerAnswers[player.id] !== undefined) {\r\n                newStats[playerAnswers[player.id]] += 1;\r\n                console.log(player.id, playerAnswers[player.id]);\r\n            }\r\n        });\r\n        console.log(newStats);\r\n        setAnswerStats(newStats);\r\n    }, [playerAnswers, playersList]);\r\n\r\n    return (<>\r\n\r\n        <Button onClick={quitGame} id=\"startgame\" variant=\"danger\" size=\"lg\" block>Quit Game</Button>\r\n        <ButtonGroup className=\"d-flex\">\r\n            <Button\r\n                className=\"btn-block mr-1 mt-1 btn-lg\"\r\n                onClick={prevQuestion}\r\n                id=\"prev\"\r\n                variant=\"secondary\"\r\n                size=\"lg\"\r\n                block\r\n                disabled={localGameState.questionIndex === 0}>\r\n                    Previous Question\r\n            </Button>\r\n            <Button\r\n                className=\"btn-block mr-1 mt-1 btn-lg\"\r\n                onClick={nextQuestion}\r\n                id=\"next\"\r\n                variant=\"primary\"\r\n                size=\"lg\"\r\n                block>\r\n                    Next Question\r\n            </Button>\r\n        </ButtonGroup>\r\n\r\n        <Container fluid>\r\n        <Row>\r\n            <Col sm={5}>\r\n            <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n                <Card.Body>\r\n                    <GameChart data={[questions[localGameState.questionIndex]]} />\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                {questions[localGameState.questionIndex].renderChoices.map((e,index) => (\r\n                    <Button\r\n                        id={index}\r\n                        key={index}\r\n                        disabled\r\n                        style={{margin: \"0 2%\"}}\r\n                        variant={questions[localGameState.questionIndex].answerIndex===index?\"success\":\"primary\"}>\r\n                            <MathComponent tex={`y = ${e}`} display={false} />\r\n                    </Button>\r\n                ))}\r\n                </Card.Footer>\r\n                <br />\r\n                <div>\r\n                {questions[localGameState.questionIndex].renderChoices.map((e,index) => (\r\n                    <ProgressBar\r\n                        label={`${answerStats[index]/playersList.length*100}%`}\r\n                        variant={questions[localGameState.questionIndex].answerIndex===index?\"success\":\"primary\"}\r\n                        now={answerStats[index]/playersList.length*100}\r\n                    />\r\n                ))}\r\n                </div>\r\n            </Card>\r\n            </Col>\r\n            <Col style={{padding: \"0\"}}>\r\n            <Tabs id=\"tabs\" activeKey={tab} onSelect={(t) => setTab(t)}>\r\n                <Tab eventKey=\"players\" title=\"Players\">\r\n                <Container style={{height:\"80vh\", overflowY: \"scroll\"}}>\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Player</th>\r\n                                <th>Section</th>\r\n                                <th>Score</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {playersList.map(player =>\r\n                            <tr key={player.name+\"\"+player.city}>\r\n                                <td>{player.name}</td>\r\n                                <td>{player.section}</td>\r\n                                <td>{player.score}</td>\r\n                            </tr>\r\n                        )}\r\n                        </tbody>\r\n                    </Table>\r\n                </Container>\r\n                </Tab>\r\n                <Tab eventKey=\"questions\" title=\"Questions\"><Container>\r\n                <Tab.Container defaultActiveKey={`${localGameState.questionIndex}`}>\r\n                <Row>\r\n                    <Col sm={4}>\r\n                    <ListGroup style={{height:\"80vh\", overflowY: \"scroll\"}}>\r\n                    {questions.map((q,index) =>\r\n                        <ListGroup.Item\r\n                            href={`${index}`}\r\n                            key={`${index}`}\r\n                            style={{cursor: \"pointer\", paddingLeft: \"0\", paddingRight: \"0\"}}\r\n                            variant={index===localGameState.questionIndex?\"primary\":(index<localGameState.questionIndex?\"secondary\":\"\")}>\r\n                                <Container>\r\n                                <Row>\r\n                                    {/* <Col xs={3} style={{margin: \"auto\"}}>\r\n                                        <Button variant=\"danger\" size=\"sm\">✖</Button>\r\n                                    </Col> */}\r\n                                    <Col>\r\n                                        {q.id}\r\n                                    </Col>\r\n                                </Row>\r\n                                </Container>\r\n                        </ListGroup.Item>\r\n                    )}\r\n                    </ListGroup>\r\n                    </Col>\r\n                    <Col sm={8} style={{paddingLeft: \"0\"}}>\r\n                    <Tab.Content>\r\n                    {questions.map((q,index) =>\r\n                        <Tab.Pane eventKey={`${index}`} key={`${index}`}>\r\n                        <Card style={{height:\"60vh\"}} className=\"text-center\">\r\n                            <Card.Body>\r\n                                <GameChart data={[q]} />\r\n                            </Card.Body>\r\n                            <Card.Footer>\r\n                            {q.renderChoices.map((e,expindex) => (\r\n                                <Button\r\n                                    id={expindex}\r\n                                    key={expindex}\r\n                                    disabled\r\n                                    style={{margin: \"0 2%\"}}\r\n                                    variant={q.answerIndex===expindex?\"success\":\"primary\"}>\r\n                                        <MathComponent tex={`y = ${e}`} display={false} />\r\n                                </Button>\r\n                            ))}\r\n                            </Card.Footer>\r\n                        </Card>\r\n                        </Tab.Pane>\r\n                    )}\r\n                    </Tab.Content>\r\n                    </Col>\r\n                </Row>\r\n                </Tab.Container>\r\n                </Container></Tab>\r\n            </Tabs>\r\n            </Col>\r\n        </Row>\r\n        </Container>\r\n    </>);\r\n}\r\n\r\nAdminPlaying.propTypes = {\r\n    quitGame: PropTypes.func.isRequired,\r\n    prevQuestion: PropTypes.func.isRequired,\r\n    nextQuestion: PropTypes.func.isRequired,\r\n    questions: PropTypes.array.isRequired,\r\n    localGameState: PropTypes.object.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    playerAnswers: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default AdminPlaying;","import PropTypes from 'prop-types';\r\n\r\nimport GameChart from '../GameChart';\r\n\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    Button,\r\n    Tab,\r\n    ListGroup,\r\n    Table,\r\n} from 'react-bootstrap';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\n\r\nconst AdminReview = ({ chartsData, playersList, endGame }) => {\r\n\r\n    let rankedPlayers = playersList.sort((a,b) => (a.name > b.name) ? 1 : -1);\r\n    console.log(rankedPlayers)\r\n    let topPlayers = rankedPlayers.length >= 5 ? rankedPlayers.slice(0,5) : rankedPlayers;\r\n    // let localPlayer = null; // rankedPlayers.find(p => p.id == thisPlayer.id) == undefined ? null : thisPlayer;\r\n\r\n    return (<>\r\n\r\n        <Button onClick={endGame} id=\"cleargame\" variant=\"secondary\" size=\"lg\" block>End Game</Button>\r\n\r\n        <Container fluid>\r\n        <Row>\r\n            <Col xs={8}>\r\n            <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey={chartsData[0].id}>\r\n            <Row>\r\n                <Col sm={4}>\r\n                    <ListGroup>\r\n                        {chartsData.map((chart,index) => (\r\n                        <ListGroup.Item href={chart.id} key={chart.id}>\r\n                            Question {index}: {chart.id}\r\n                        </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n                </Col>\r\n                <Col sm={8}>\r\n                <Tab.Content>\r\n                    {chartsData.map((chart,index) => (\r\n                    <Tab.Pane eventKey={chart.id} key={chart.id}>\r\n                    <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n                        <Card.Body>\r\n                            <GameChart data={[chart]} />\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            {chart.renderChoices.map((e, expindex) => (\r\n                            <Button disabled id={e} key={e} variant={chart.answerIndex===expindex?\"success\":\"primary\"} style={{margin: \"0 2%\"}}>\r\n                                <MathComponent tex={`y = ${e}`} style={{pointerEvents:\"none;\"}} />\r\n                            </Button>\r\n                            ))}\r\n                        </Card.Footer>\r\n                    </Card>\r\n                    </Tab.Pane>\r\n                    ))}\r\n                </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n            </Tab.Container>\r\n            </Col>\r\n            <Col>\r\n                <h1>LEADERBOARD</h1>\r\n                <Table striped bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Top Players</th>\r\n                        <th>Scores</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {topPlayers.map(player =>\r\n                    <tr key={player.name+\"\"+player.score}>\r\n                        <td>{player.name}</td>\r\n                        <td>{player.score}</td>\r\n                    </tr>\r\n                    )}\r\n                </tbody>\r\n                </Table>\r\n            </Col>\r\n        </Row>\r\n        </Container>\r\n    \r\n    </>);\r\n}\r\n\r\nAdminReview.propTypes = {\r\n    chartsData: PropTypes.array.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    endGame: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AdminReview;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n    Button,\r\n    Table,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Form,\r\n} from 'react-bootstrap';\r\n\r\n\r\nconst AdminOffline = ({ initializeGame, clearGame, playersList, uploadQuestions, noQuestions }) => {\r\n\r\n    const [questionsFile, setQuestionsFile] = useState(null);\r\n    React.useEffect(() => {\r\n        if (questionsFile != null) {\r\n            const fileReader = new FileReader();\r\n            fileReader.readAsText(questionsFile);\r\n            fileReader.onload = () => {\r\n                const questionJSON = JSON.parse(fileReader.result);\r\n                console.log(questionJSON);\r\n                uploadQuestions(questionJSON);\r\n            }\r\n        }\r\n    }, [questionsFile, uploadQuestions]);\r\n\r\n    return (<>\r\n\r\n        <Button\r\n            onClick={initializeGame}\r\n            id=\"startgame\"\r\n            variant=\"danger\"\r\n            size=\"lg\"\r\n            block\r\n            disabled={noQuestions}>\r\n                Initialize Game\r\n        </Button>\r\n        <Button\r\n            onClick={clearGame}\r\n            id=\"cleargame\"\r\n            variant=\"secondary\"\r\n            size=\"lg\"\r\n            block>\r\n                Clear Game\r\n        </Button>\r\n        <br />\r\n\r\n        {playersList.length===0 ?\r\n        <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n        <Col sm=\"auto\">\r\n            <h1>No Players in Database</h1>\r\n        </Col>\r\n        </Row>\r\n        </Container>\r\n        :\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <th>Player</th>\r\n                    <th>Section</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {playersList.map(player =>\r\n                <tr key={player.name+\"\"+player.section}>\r\n                    <td>{player.name}</td>\r\n                    <td>{player.section}</td>\r\n                </tr>\r\n            )}\r\n            </tbody>\r\n        </Table>\r\n        }\r\n\r\n        <Form>\r\n        <Form.Group>\r\n        <Form.File\r\n            type=\"file\"\r\n            id=\"fileUpload\"\r\n            label=\"Upload Questions JSON Here\"\r\n            onChange={(e) => setQuestionsFile(e.target.files[0])}\r\n        />\r\n        </Form.Group>\r\n        </Form>\r\n\r\n    </>);\r\n}\r\n\r\nAdminOffline.propTypes = {\r\n    initializeGame: PropTypes.func.isRequired,\r\n    clearGame: PropTypes.func.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    uploadQuestions: PropTypes.func.isRequired,\r\n    noQuestions: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default AdminOffline;","import { db } from \"../firebase\";\r\n\r\n\r\nconst deletePlayers = (players) => {\r\n    players.forEach(player => {\r\n        db.collection('playersDB').doc(player.name).delete();\r\n        console.log(`player '${player.name}' deleted`);\r\n    });\r\n}\r\n\r\nconst kickPlayer = (player) => {\r\n    db.collection('playersDB').doc(player.name).delete();\r\n    console.log(`player '${player.name}' deleted`);\r\n}\r\n\r\nconst setFirebaseGameState = (state) => {\r\n    db.collection('adminVars').doc('GameState').set(state);\r\n    console.log(\"gameState set\", state);\r\n}\r\n\r\nconst uploadQuestions = (json) => {\r\n    for (let i = 0; i < json.length; i++) {\r\n        db.collection('questions').doc('q'+i).set({...json[i]});\r\n    }\r\n}\r\n\r\nconst deleteQuestions = (questions) => {\r\n    questions.forEach(question => {\r\n        db.collection('questions').doc(question.id).delete();\r\n        console.log(`question '${question.id}' deleted`);\r\n    })\r\n}\r\n\r\nconst clearAnswers = () => {\r\n    db.collection('adminVars').doc('PlayerAnswers').set({});\r\n}\r\n\r\nexport {\r\n    deletePlayers,\r\n    kickPlayer,\r\n    setFirebaseGameState,\r\n    uploadQuestions,\r\n    deleteQuestions,\r\n    clearAnswers,\r\n};","import {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport AdminWaiting from './admin-page/AdminWaiting';\r\nimport AdminPlaying from './admin-page/AdminPlaying';\r\nimport AdminReview from './admin-page/AdminReview';\r\nimport AdminOffline from './admin-page/AdminOffline';\r\n\r\nimport {\r\n    deletePlayers,\r\n    kickPlayer,\r\n    setFirebaseGameState,\r\n    uploadQuestions,\r\n    deleteQuestions,\r\n    clearAnswers,\r\n} from './AdminFirebase';\r\n\r\n\r\nconst AdminPage = ({ pageStates, pageState, playersList, localGameState, setLocalGameState, questions, playerAnswers }) => {\r\n\r\n    const initializeGame = () => {\r\n        let newGameState = {\r\n            pageState: pageStates.WAITING,\r\n            questionIndex: null,\r\n        };\r\n        setLocalGameState(newGameState);\r\n        setFirebaseGameState(newGameState);\r\n    }\r\n    const clearGame = () => {\r\n        let newGameState = {\r\n            pageState: pageStates.OFFLINE,\r\n            questionIndex: null,\r\n        };\r\n        setLocalGameState(newGameState);\r\n        setFirebaseGameState(newGameState);\r\n\r\n        deletePlayers(playersList);\r\n        deleteQuestions(questions);\r\n    }\r\n    const startGame = () => {\r\n        let newGameState = {\r\n            pageState: pageStates.PLAYING,\r\n            questionIndex: 0,\r\n        };\r\n        setLocalGameState(newGameState);\r\n        setFirebaseGameState(newGameState);\r\n        console.log(newGameState)\r\n    }\r\n    const prevQuestion = () => {\r\n        let qIndex = localGameState.questionIndex - 1;\r\n        if (qIndex >= 0) {\r\n            let newGameState = {\r\n                pageState: pageStates.PLAYING,\r\n                questionIndex: qIndex,\r\n            };\r\n            setLocalGameState(newGameState);\r\n            setFirebaseGameState(newGameState);\r\n            clearAnswers();\r\n        }\r\n    }\r\n    const nextQuestion = () => {\r\n        let qIndex = localGameState.questionIndex + 1;\r\n        let newGameState = {};\r\n        if (qIndex < questions.length) {\r\n            newGameState = {\r\n                pageState: pageStates.PLAYING,\r\n                questionIndex: qIndex,\r\n            };\r\n        } else {\r\n            newGameState = {\r\n                pageState: pageStates.REVIEW,\r\n                questionIndex: null,\r\n            };\r\n        }\r\n        setLocalGameState(newGameState);\r\n        setFirebaseGameState(newGameState);\r\n        clearAnswers();\r\n    }\r\n\r\n    return (<>\r\n\r\n        {pageState === pageStates.OFFLINE ? <>\r\n            <AdminOffline\r\n                initializeGame={initializeGame}\r\n                clearGame={clearGame}\r\n                playersList={playersList}\r\n                uploadQuestions={uploadQuestions}\r\n                noQuestions={questions.length===0}\r\n            />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.WAITING ? <>\r\n            <AdminWaiting\r\n                playersList={playersList}\r\n                startGame={startGame}\r\n                quitGame={clearGame}\r\n                kickPlayer={kickPlayer}\r\n            />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.PLAYING ? <>\r\n            <AdminPlaying\r\n                quitGame={clearGame}\r\n                prevQuestion={prevQuestion}\r\n                nextQuestion={nextQuestion}\r\n                questions={questions}\r\n                localGameState={localGameState}\r\n                playersList={playersList}\r\n                playerAnswers={playerAnswers}\r\n            />\r\n        </> : <></>}\r\n        \r\n        {pageState === pageStates.REVIEW ? <>\r\n            <AdminReview\r\n                chartsData={questions}\r\n                playersList={playersList}\r\n                endGame={clearGame}\r\n            />\r\n        </> : <></>}\r\n        \r\n    </>);\r\n}\r\n\r\nAdminPage.propTypes = {\r\n    pageStates: PropTypes.object.isRequired,\r\n    pageState: PropTypes.string.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    chartData: PropTypes.object,\r\n    localGameState: PropTypes.object.isRequired,\r\n    setLocalGameState: PropTypes.func.isRequired,\r\n    questions: PropTypes.array.isRequired,\r\n    playerAnswers: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default AdminPage;","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\r\n\r\n\r\nconst GameMainMenu = ({ onSubmitName, canSubmitName }) => {\r\n\r\n    const [showSettingsModal, setShowSettingsModal] = useState(false);\r\n    const handleShowSettings = () => setShowSettingsModal(true);\r\n    const handleCloseSettings = () => setShowSettingsModal(false);\r\n\r\n    const handleNameSubmit = (e) => {\r\n        e.preventDefault();\r\n        onSubmitName(e.target[0].value, e.target[1].value);\r\n    }\r\n\r\n    return (<>\r\n\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\" />\r\n            <Nav>\r\n                <Nav.Item className=\"mr-2\">\r\n                <LinkContainer to=\"/team-page\">\r\n                    <Button>Go to <strong>Team Page</strong></Button>\r\n                </LinkContainer>\r\n                </Nav.Item>\r\n                <Nav.Link href=\"https://github.com/BlaziusMaximus/NameThatSummation\">\r\n                Go to <strong>GitHub</strong>\r\n                </Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <Button variant=\"secondary\" onClick={handleShowSettings}>Settings</Button>\r\n        <Modal show={showSettingsModal} onHide={handleCloseSettings} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n            <Modal.Title>Settings</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <fieldset>\r\n                <Form>\r\n                    <Form.Check type=\"checkbox\" label=\"Settings Option 1\" />\r\n                    <Form.Check type=\"checkbox\" label=\"Settings Option 2\" />\r\n                </Form>\r\n                <Form>\r\n                    <Form.Check type=\"radio\" label=\"Settings Option 3\" />\r\n                    <Form.Check type=\"radio\" label=\"Settings Option 4\" />\r\n                </Form>\r\n            </fieldset>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleCloseSettings}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col sm=\"auto\"><h1>Name That Summation</h1></Col>\r\n            </Row>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col sm={8}>\r\n                <Form onSubmit={handleNameSubmit}>\r\n                <Form.Row>\r\n                <InputGroup>\r\n                    <Col style={{padding: \"0\"}}>\r\n                    <FormControl\r\n                        placeholder=\"Display Name\"\r\n                        aria-label=\"Display Name\"\r\n                        aria-describedby=\"display-name-form\"\r\n                    />\r\n                    </Col>\r\n                    <Col style={{padding: \"0\"}}>\r\n                    <FormControl\r\n                        placeholder=\"Section\"\r\n                        aria-label=\"Section\"\r\n                        aria-describedby=\"section-form\"\r\n                    />\r\n                    </Col>\r\n                    <InputGroup.Append>\r\n                        <Button variant=\"outline-primary\" type=\"submit\" disabled={!canSubmitName}>Submit</Button>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n                </Form.Row>\r\n                </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n        \r\n    </>);\r\n}\r\n\r\nGameMainMenu.propTypes = {\r\n    onSubmitName: PropTypes.func.isRequired,\r\n    canSubmitName: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default GameMainMenu;","import {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport evaluatex from \"evaluatex\";\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport GameChart from '../GameChart';\r\n\r\n\r\nconst GameQuestion = ({ displayName, chartData, questionTime, timer, endQuestion, selectAnswer }) => {\r\n\r\n    const [showFeedbackModal, setShowFeedbackModal] = useState(false);\r\n    const hideFeedbackModal = () => {\r\n        setShowFeedbackModal(false);\r\n\r\n        if (answerChoiceIndex === chartData.answerIndex) {\r\n            endQuestion(answerTime);\r\n        }\r\n    }\r\n\r\n    const [answerChoiceIndex, setAnswerChoiceIndex] = useState(null);\r\n    const [answersClicked, setAnswersClicked] = useState(new Array(chartData.renderChoices.length).fill(0));\r\n    const [answerTime, setAnswerTime] = useState(null);\r\n    const handleAnswerSelect = (e) => {\r\n        e.preventDefault();\r\n        let id = parseInt(e.currentTarget.id);\r\n        let newAnsClicked = answersClicked; newAnsClicked[parseInt(id)] = 1; setAnswersClicked(newAnsClicked);\r\n        \r\n        selectAnswer(id, timer);\r\n        setAnswerChoiceIndex(id);\r\n        setAnswerTime(questionTime-timer);\r\n\r\n        setShowFeedbackModal(true);\r\n    }\r\n\r\n    let cd = {...chartData};\r\n    cd.data = cd.data.slice(0,1);\r\n    const [chartDataSlice, setChartDataSlice] = useState(cd);\r\n    useEffect(() => {\r\n        let cd = {...chartData};\r\n        let x = parseFloat(questionTime-timer)/parseFloat(questionTime);\r\n        let l = chartData.data.length;\r\n        let sliceI = Math.floor(x*(l-1))+1;//Math.floor(x**2 * (l-2))+2;\r\n        console.log(sliceI)\r\n        cd.data = cd.data.slice(0, Math.min(l, sliceI));\r\n        setChartDataSlice(cd);\r\n    }, [timer, questionTime, chartData, endQuestion]);\r\n\r\n    const pointEval = (e) => {\r\n        let y = evaluatex(chartData.evalChoices[answerChoiceIndex])({x:e});\r\n        if (y === Infinity || y === -Infinity) {\r\n            return null;\r\n        }\r\n        return y;\r\n    }\r\n\r\n    return (<>\r\n\r\n        <h2>Name: {displayName}</h2>\r\n\r\n        <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n            <Card.Header as=\"h5\">Time Remaining: {timer}</Card.Header>\r\n            <Card.Body>\r\n                <GameChart data={[chartDataSlice]} />\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                {chartData.renderChoices.map((e,index) => (\r\n                <Button\r\n                    id={index} key={index}\r\n                    onClickCapture={handleAnswerSelect}\r\n                    variant={answersClicked[index]===1?(index===chartData.answerIndex?\"success\":\"danger\"):\"primary\"}\r\n                    disabled={answersClicked[index]===1}\r\n                    style={{margin: \"0 2%\"}}>\r\n                        <MathComponent tex={`y = ${e}`} style={{pointerEvents:\"none;\"}} display={false} />\r\n                </Button>\r\n                ))}\r\n            </Card.Footer>\r\n        </Card>\r\n\r\n        <Modal show={showFeedbackModal} onHide={hideFeedbackModal} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{answerChoiceIndex===chartData.answerIndex?\"Correct!\":\"Not Quite...\"}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            {answerChoiceIndex===chartData.answerIndex ?<>\r\n                <p>Good work! <MathComponent tex={`y = ${chartData.renderChoices[answerChoiceIndex]}`} display={false} /> was the correct equation.</p>\r\n                <Card style={{height:\"40vh\"}} className=\"text-center\">\r\n                    <GameChart data={[chartData]} />\r\n                </Card>\r\n            </>:<>\r\n                <p>Not quite... <MathComponent tex={`y = ${chartData.renderChoices[answerChoiceIndex]}`} display={false} /> isn't correct.</p>\r\n                <Card style={{height:\"40vh\"}} className=\"text-center\">\r\n                    <GameChart\r\n                        data={answerChoiceIndex==null?[chartDataSlice]:[\r\n                            chartDataSlice, \r\n                            { \"id\": \"wrongData\", \"data\": [...Array(Math.floor((chartData.xEnd-chartData.xStart)/parseFloat(chartData.xInc))+1).keys()].map(e => (\r\n                                { \"x\":String(e), \"y\":pointEval(e) }\r\n                            )).slice(0,chartDataSlice.data.length)}\r\n                        ]}\r\n                    />\r\n                </Card>\r\n            </>}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={hideFeedbackModal}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    \r\n    </>);\r\n}\r\n\r\nGameQuestion.propTypes = {\r\n    displayName: PropTypes.string.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    questionTime: PropTypes.number.isRequired,\r\n    timer: PropTypes.number.isRequired,\r\n    endQuestion: PropTypes.func.isRequired,\r\n    selectAnswer: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default GameQuestion;","import PropTypes from 'prop-types';\r\n\r\nconst GameWaitingRoom = ({ displayName, playersList }) => {\r\n\r\n    return (\r\n        <>\r\n        <h2>Name: {displayName}</h2>\r\n        <br />\r\n        <h1>WAITING</h1>\r\n        <ul>\r\n            {playersList.map(player =>  <li key={player.name+\"\"+player.city}>{player.name}</li> )}\r\n        </ul>\r\n        </>\r\n    );\r\n}\r\n\r\nGameWaitingRoom.propTypes = {\r\n    displayName: PropTypes.string.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default GameWaitingRoom;","import {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    Button,\r\n    Table,\r\n} from 'react-bootstrap';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport GameChart from '../GameChart';\r\n\r\n\r\nconst GameLeaderboard = ({ player, chartData, topPlayers }) => {\r\n\r\n    const localPlayer = topPlayers.find(p => p.id===player.id)===undefined ? player : null;\r\n    console.log(topPlayers.find(p => p.id===player.id))\r\n\r\n    return (<>\r\n\r\n        <h2>Name: {player.name}</h2>\r\n        <h3>Score: {player.score}</h3>\r\n        <br />\r\n\r\n        <Container fluid>\r\n            <Row>\r\n                <Col xs={8}>\r\n                <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n                    <Card.Header as=\"h5\">Time Spent on Question: {player.times[player.times.length-1]}s</Card.Header>\r\n                    <Card.Body>\r\n                        <GameChart data={[chartData]} />\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        {chartData.renderChoices.map((e,index) => (\r\n                        <Button\r\n                            id={index}\r\n                            key={index}\r\n                            disabled\r\n                            variant={index===chartData.answerIndex?\"success\":\"primary\"}\r\n                            style={{margin: \"0 2%\"}}>\r\n                                <MathComponent tex={`y = ${e}`} display={false} />\r\n                        </Button>\r\n                        ))}\r\n                    </Card.Footer>\r\n                </Card>\r\n                </Col>\r\n                <Col>\r\n                    <h1>LEADERBOARD</h1>\r\n                    <Table striped bordered>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Top Players</th>\r\n                                <th>Scores</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {topPlayers.map(topPlayer =>\r\n                            <tr\r\n                                key={topPlayer.name+\"\"+topPlayer.score}\r\n                                style={topPlayer.id===player.id?{backgroundColor: \"lightgreen\"}:{}}>\r\n                                    {topPlayer.id===player.id\r\n                                    ? <td><b>{topPlayer.name}</b></td>\r\n                                    : <td>{topPlayer.name}</td>\r\n                                    }\r\n                                    <td>{topPlayer.score}</td>\r\n                            </tr>\r\n                            )}\r\n                            {localPlayer == null ? <></> : (<>\r\n                            <tr key=\"ellipsis\">\r\n                                <td colSpan={2} style={{textAlign: \"center\"}}>...</td>\r\n                            </tr>\r\n                            <tr key=\"localPlayer\" style={{backgroundColor: \"lightgreen\"}}>\r\n                                <td><b>{localPlayer.name}</b></td>\r\n                                <td>{localPlayer.score}</td>\r\n                            </tr>\r\n                            </>)}\r\n                        </tbody>\r\n                    </Table>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    \r\n    </>);\r\n}\r\n\r\nGameLeaderboard.propTypes = {\r\n    player: PropTypes.object.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    topPlayers: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default GameLeaderboard;","import PropTypes from 'prop-types';\r\n\r\nimport GameChart from '../GameChart';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\n\r\nconst GameReview = ({ player, chartsData, topPlayers }) => {\r\n\r\n    const localPlayer = topPlayers.find(p => p.id===player.id)===undefined ? null : player;\r\n\r\n    return (<>\r\n\r\n        <h2>Name: {player.name}</h2>\r\n        <h3>Score: {player.score}</h3>\r\n        <br />\r\n\r\n        <Container fluid>\r\n        <Row>\r\n            <Col xs={8}>\r\n            <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey={chartsData[0].id}>\r\n            <Row>\r\n                <Col sm={3}>\r\n                    <ListGroup>\r\n                        {chartsData.map((chart,index) => (\r\n                        <ListGroup.Item href={chart.id} key={chart.id} style={{cursor: \"pointer\"}}>\r\n                            Q{index+1}: {chart.id}\r\n                        </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n                </Col>\r\n                <Col sm={9}>\r\n                <Tab.Content>\r\n                    {chartsData.map((chart,index) => (\r\n                    <Tab.Pane eventKey={chart.id} key={chart.id}>\r\n                    <Card style={{height:\"60vh\"}} className=\"text-center\">\r\n                        <Card.Header as=\"h5\">Time Spent on Question: {player.times[index]}s</Card.Header>\r\n                        <Card.Body>\r\n                            <GameChart data={[chart]} />\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            {chart.renderChoices.map((e, expindex) => (\r\n                            <Button disabled id={e} key={e} variant={chart.answerIndex===expindex?\"success\":\"primary\"} style={{margin: \"0 2%\"}}>\r\n                                <MathComponent tex={`y = ${e}`} display={false} />\r\n                            </Button>\r\n                            ))}\r\n                        </Card.Footer>\r\n                    </Card>\r\n                    <h3>Wrong Answers:</h3>\r\n                    <ListGroup horizontal>\r\n                    {player.wrongAnswers[chart.id]!==undefined ? player.wrongAnswers[chart.id].map((ans) => (\r\n                        <ListGroup.Item key={ans+\"wrong\"}>\r\n                            <MathComponent tex={`y = ${chart.renderChoices[ans]}`} display={false} />\r\n                        </ListGroup.Item>\r\n                    )) : <></>}\r\n                    </ListGroup>\r\n                    </Tab.Pane>\r\n                    ))}\r\n                </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n            </Tab.Container>\r\n            </Col>\r\n            <Col>\r\n                <h1>LEADERBOARD</h1>\r\n                <Table striped bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Top Players</th>\r\n                        <th>Scores</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {topPlayers.map(player =>\r\n                    <tr key={player.name+\"\"+player.score}>\r\n                        <td>{player.name}</td>\r\n                        <td>{player.score}</td>\r\n                    </tr>\r\n                    )}\r\n                    <tr key=\"ellipsis\">\r\n                        <td colSpan={2} style={{textAlign: \"center\"}}>...</td>\r\n                    </tr>\r\n                    {localPlayer == null ? <></> : (\r\n                    <tr key=\"localPlayer\">\r\n                        <td>{localPlayer.name}</td>\r\n                        <td>{localPlayer.score}</td>\r\n                    </tr>\r\n                    )}\r\n                </tbody>\r\n                </Table>\r\n            </Col>\r\n        </Row>\r\n        </Container>\r\n    \r\n    </>);\r\n}\r\n\r\nGameReview.propTypes = {\r\n    player: PropTypes.object.isRequired,\r\n    chartsData: PropTypes.array.isRequired,\r\n    topPlayers: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default GameReview;","import PropTypes from 'prop-types';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\r\n\r\n\r\nconst DevPanel = ({ goToMainMenu, goToLeaderboard, goToQuestion, goToReview, goToWaitingRoom, displayName, setDisplayName }) => {\r\n\r\n    return (\r\n        <>\r\n        <Button onClick={() => goToMainMenu()}>MAIN MENU</Button>\r\n        <Button onClick={() => {setDisplayName(displayName); goToWaitingRoom(displayName);}}>WAITING ROOM</Button>\r\n        <Button onClick={goToQuestion}>QUESTION</Button>\r\n        <Button onClick={() => goToLeaderboard(1)}>LEADERBOARD</Button>\r\n        <Button onClick={() => goToReview(1)}>REVIEW</Button>\r\n        <LinkContainer to=\"/admin-page\">\r\n            <Button>ADMIN</Button>\r\n        </LinkContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nDevPanel.propTypes = {\r\n    goToMainMenu: PropTypes.func.isRequired,\r\n    goToLeaderboard: PropTypes.func.isRequired,\r\n    goToQuestion: PropTypes.func.isRequired,\r\n    goToReview: PropTypes.func.isRequired,\r\n    goToWaitingRoom: PropTypes.func.isRequired,\r\n    displayName: PropTypes.string.isRequired,\r\n    setDisplayName: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default DevPanel;","import PropTypes from 'prop-types';\r\nimport React, {useState} from 'react';\r\n\r\nimport { db } from \"../firebase\";\r\n\r\nimport GameMainMenu from './game-page/GameMainMenu';\r\nimport GameQuestion from './game-page/GameQuestion';\r\nimport GameWaitingRoom from './game-page/GameWaitingRoom';\r\nimport GameLeaderboard from './game-page/GameLeaderboard';\r\nimport GameReview from './game-page/GameReview';\r\nimport DevPanel from './DevPanel';\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst GamePage = ({ questions, chartData, players, adminQuestionIndex, waitingRoomIsOpen, playerAnswers }) => {\r\n\r\n    const questionTime = 15;\r\n\r\n    const pageStates = {\r\n        MAIN_MENU: \"MAIN_MENU\",\r\n        WAITING_ROOM: \"WAITING_ROOM\",\r\n        QUESTION: \"QUESTION\",\r\n        LEADERBOARD: \"LEADERBOARD\",\r\n        REVIEW: \"REVIEW\",\r\n    };\r\n    const [pageState, setPageState] = useState(pageStates.MAIN_MENU);\r\n    \r\n    const [timer, setTimer] = useState(questionTime);\r\n    \r\n    const [questionIndex, setQuestionIndex] = useState(null);\r\n\r\n    const [localPlayerObj, setLocalPlayerObj] = useState({\r\n        \"id\": null,\r\n        \"name\": null,\r\n        \"score\": null,\r\n        \"section\": null,\r\n        \"answers\": [],\r\n        \"wrongAnswers\": [],\r\n        \"times\": [],\r\n    });\r\n\r\n    const [showKickModal, setShowKickModal] = useState(false);\r\n    const handleShowKick = () => setShowKickModal(true);\r\n    const handleCloseKick = () => setShowKickModal(false);\r\n    \r\n    const goToMainMenu = () => {\r\n        setPageState(pageStates.MAIN_MENU);\r\n    }\r\n    const goToWaitingRoom = (name, section) => {\r\n        setPageState(pageStates.WAITING_ROOM);\r\n        const newPlayerObj = {\r\n            ...localPlayerObj,\r\n            id: Math.floor(Math.random()*Date.now()),\r\n            \"name\": name,\r\n            \"section\": section,\r\n            \"score\": 0,\r\n        }\r\n        setLocalPlayerObj({\r\n            ...newPlayerObj,\r\n        });\r\n        db.collection(\"playersDB\").doc(name).set({\r\n            ...newPlayerObj,\r\n        });\r\n    }\r\n    const goToQuestion = React.useCallback(() => {\r\n        setPageState(pageStates.QUESTION);\r\n        setQuestionIndex(adminQuestionIndex);\r\n        console.log(adminQuestionIndex)\r\n        setTimer(questionTime);\r\n    }, [adminQuestionIndex, pageStates.QUESTION]);\r\n    const goToLeaderboard = React.useCallback(() => {\r\n        setPageState(pageStates.LEADERBOARD);\r\n    }, [pageStates.LEADERBOARD]);\r\n    const goToReview = React.useCallback(() => {\r\n        setPageState(pageStates.REVIEW);\r\n    }, [pageStates.REVIEW]);\r\n\r\n    React.useEffect(() => {\r\n        if (adminQuestionIndex != null && (pageState === pageStates.WAITING_ROOM || adminQuestionIndex !== questionIndex)) {\r\n            goToQuestion();\r\n        }\r\n        if (adminQuestionIndex === null && (pageState === pageStates.QUESTION || pageState === pageStates.LEADERBOARD)) {\r\n            goToReview();\r\n        }\r\n    }, [adminQuestionIndex, questionIndex, pageState, pageStates.WAITING_ROOM, pageStates.QUESTION, pageStates.LEADERBOARD, goToQuestion, goToReview]);\r\n\r\n    const handleAnswerSubmit = async (a,t) => {\r\n        // console.log(localPlayerObj.name, \"answer:\", a, \"time:\", t, \"score:\",chartData.maxScore*t);\r\n        const score = parseFloat(chartData.maxScore)*parseFloat(t)/parseFloat(questionTime);\r\n        let was = localPlayerObj.wrongAnswers;\r\n        let newAnswer = false;\r\n        if (was[chartData.id] === undefined) { was[chartData.id] = []; newAnswer = true; }\r\n        if (a !== chartData.answerIndex) { was[chartData.id].push(a); }\r\n        const newPlayerObj = {\r\n            ...localPlayerObj,\r\n            answers: newAnswer?[...(localPlayerObj.answers),a]:[...(localPlayerObj.answers)],\r\n            wrongAnswers: was,\r\n            times: newAnswer?[...(localPlayerObj.times),questionTime-t]:[...(localPlayerObj.times)],\r\n            score: localPlayerObj.score + newAnswer?Math.floor(score):0,\r\n        };\r\n        setLocalPlayerObj({\r\n            ...newPlayerObj,\r\n        });\r\n        db.collection('playersDB').doc(localPlayerObj.name).set({\r\n            ...newPlayerObj,\r\n        });\r\n\r\n        let newAnswers = playerAnswers;\r\n        newAnswers[localPlayerObj.id] = a;\r\n        db.collection('adminVars').doc('PlayerAnswers').set({\r\n            ...newAnswers,\r\n        });\r\n        console.log(playerAnswers, newAnswers);\r\n    }\r\n\r\n    const [topPlayers, setTopPlayers] = useState([]);\r\n    React.useEffect(() => {\r\n        setTopPlayers(\r\n            players.filter(a => Number.isInteger(a.score))\r\n                   .sort((a,b) => a.score<b.score ? 1 : -1)\r\n                   .slice(0,5)\r\n        );\r\n        \r\n        if (pageState !== pageStates.MAIN_MENU && players.find(player => player.id === localPlayerObj.id) === undefined) {\r\n            // console.log(\"local player not in playersDB\", players, localPlayerObj);\r\n            setPageState(pageStates.MAIN_MENU);\r\n            handleShowKick();\r\n        }\r\n    }, [players, pageStates.MAIN_MENU]);\r\n\r\n    React.useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (pageState === pageStates.QUESTION) {\r\n                if (timer > 0) {\r\n                    setTimer(timer => timer-1);\r\n                } else {\r\n                    const newPlayerObj = {\r\n                        ...localPlayerObj,\r\n                        answers: [...(localPlayerObj.answers),null],\r\n                        times: [...(localPlayerObj.times),null],\r\n                    };\r\n                    setLocalPlayerObj({\r\n                        ...newPlayerObj,\r\n                    });\r\n                    db.collection('playersDB').doc(localPlayerObj.name).set({\r\n                        ...newPlayerObj,\r\n                    });\r\n                    goToLeaderboard();\r\n                }\r\n            }\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, [timer, goToLeaderboard, pageState, pageStates.QUESTION]);\r\n\r\n    return (<>\r\n\r\n        {pageState === pageStates.MAIN_MENU ? <>\r\n        <GameMainMenu\r\n            onSubmitName={(name, section) => {\r\n                setLocalPlayerObj({...localPlayerObj, \"name\":name, \"section\": section});\r\n                goToWaitingRoom(name, section);\r\n            }}\r\n            canSubmitName={waitingRoomIsOpen}\r\n        />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.WAITING_ROOM ? <>\r\n        <GameWaitingRoom\r\n            displayName={localPlayerObj.name}\r\n            playersList={players}\r\n        />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.QUESTION ? <>\r\n        <GameQuestion\r\n            displayName={localPlayerObj.name}\r\n            chartData={chartData}\r\n            questionTime={questionTime}\r\n            timer={timer}\r\n            endQuestion={goToLeaderboard}\r\n            selectAnswer={handleAnswerSubmit}\r\n        />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.LEADERBOARD ? <>\r\n        <GameLeaderboard\r\n            player={localPlayerObj}\r\n            chartData={chartData}\r\n            topPlayers={topPlayers}\r\n        />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.REVIEW ? <>\r\n        <GameReview\r\n            player={localPlayerObj}\r\n            chartsData={questions}\r\n            topPlayers={topPlayers}\r\n        />\r\n        </> : <></>}\r\n\r\n        <Modal show={showKickModal} onHide={handleCloseKick} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Kicked From Game</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                You've been kicked from the game and removed from the database.\r\n                Contact the administrator for more information.\r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n        <br />\r\n        <DevPanel\r\n            goToMainMenu={goToMainMenu}\r\n            goToLeaderboard={goToLeaderboard}\r\n            goToReview={goToReview}\r\n            goToQuestion={goToQuestion}\r\n            goToWaitingRoom={goToWaitingRoom}\r\n            displayName={localPlayerObj.name==null?\"\":localPlayerObj.name}\r\n            setDisplayName={(name) => setLocalPlayerObj({...localPlayerObj, \"name\":name})}\r\n        />\r\n    \r\n    </>);\r\n}\r\n\r\nGamePage.propTypes = {\r\n    questions: PropTypes.array.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    players: PropTypes.array.isRequired,\r\n    adminQuestionIndex: PropTypes.number,\r\n    waitingRoomIsOpen: PropTypes.bool.isRequired,\r\n    playerAnswers: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default GamePage;","import React from 'react';\nimport {useState} from 'react';\n\nimport { db } from \"./firebase\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport evaluatex from \"evaluatex\";\n\nimport Button from 'react-bootstrap/Button';\n\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\n\nimport TeamPageHeader from './components/team-page/TeamPageHeader';\nimport TeamPageBody from './components/team-page/TeamPageBody';\nimport AdminPage from './components/AdminPage';\nimport GamePage from './components/GamePage';\n\nimport {\n    deletePlayers,\n    setFirebaseGameState,\n    deleteQuestions,\n} from './components/AdminFirebase';\n\nimport './App.css';\n\nfunction App() {\n\n    const adminPageStates = {\n        OFFLINE: \"OFFLINE\",\n        WAITING: \"WAITING\",\n        PLAYING: \"PLAYING\",\n        REVIEW: \"REVIEW\",\n    };\n\n    const [players, setPlayers] = useState([]);\n    React.useEffect(() => {\n        db.collection(\"playersDB\").onSnapshot((snapshot) => {\n            console.log(snapshot.docs);\n            if (snapshot.docs.length > 0) {\n                setPlayers(snapshot.docs.map(doc => doc.data()));\n            } else {\n                setPlayers([]);\n            }\n        });\n        console.log(\"fetched players from firebase\")\n    }, []);\n\n    const [questions, setQuestions] = useState([]);\n    React.useEffect(() => {\n        db.collection(\"questions\").onSnapshot((snapshot) => {\n            console.log(snapshot.docs);\n            setQuestions(snapshot.docs.map((doc) => {\n                let { xEnd, xStart, xInc, evalChoices, renderChoices, answerIndex, maxScore } = doc.data();\n                return {\n                    \"id\": doc.id,\n                    \"color\": \"hsl(24, 70%, 50%)\",\n                    \"data\": [...Array(Math.floor((xEnd-xStart)/parseFloat(xInc))+1).keys()].map(e => (\n                        { \"x\":String(e), \"y\":evaluatex(evalChoices[answerIndex])({x:e}) }\n                    )),\n                    \"renderChoices\": renderChoices,\n                    \"answerIndex\": answerIndex,\n                    \"maxScore\": maxScore==null?300:maxScore,\n                    \"evalChoices\": evalChoices,\n                    \"xEnd\": xEnd,\n                    \"xStart\": xStart,\n                    \"xInc\": xInc,\n                };\n            }).sort((a,b) => parseInt(a.id.substring(1))>parseInt(b.id.substring(1))?1:-1));\n\n        });\n        console.log(\"fetched questions from firebase\")\n    }, []);\n\n    const [adminGameState, setAdminGameState] = useState({\n        pageState: adminPageStates.OFFLINE,\n        questionIndex: null,\n    });\n    React.useEffect(() => {\n        db.collection(\"adminVars\").doc(\"GameState\").onSnapshot((doc) => {\n            console.log(doc.data());\n            if (doc.data() !== undefined) {\n                setAdminGameState(doc.data());\n            }\n\n            db.collection(\"playersDB\").get().then(playersDB => {\n                setPlayers(playersDB.docs.map(doc => doc.data()))\n            });\n        });\n        console.log(\"fetched adminVars.GameState from firebase\")\n    }, []);\n\n    const [playerAnswers, setPlayerAnswers] = useState({});\n    React.useEffect(() => {\n        db.collection(\"adminVars\").doc(\"PlayerAnswers\").onSnapshot((doc) => {\n            console.log(doc.data());\n            if (doc.data() !== undefined) {\n                setPlayerAnswers(doc.data());\n            }\n        });\n        console.log(\"fetched adminVars.PlayerAnswers from firebase\");\n    }, []);\n\n    return (\n    <Router basename=\"/NameThatSummation\">\n        <Switch>\n            <Route exact path=\"/\">\n                <nav>\n                    <LinkContainer to=\"/team-page\">\n                        <Button>TEAM PAGE</Button>\n                    </LinkContainer>\n                    <LinkContainer to=\"/game-page\">\n                        <Button>GAME PAGE</Button>\n                    </LinkContainer>\n                    <LinkContainer to=\"/admin-page\">\n                        <Button>ADMIN PAGE</Button>\n                    </LinkContainer>\n                    <Button onClick={ () => {\n                        let newGameState = {\n                            pageState: adminPageStates.OFFLINE,\n                            questionIndex: null,\n                        };\n                        setAdminGameState(newGameState);\n                        setFirebaseGameState(newGameState);\n\n                        deletePlayers(players);\n                        deleteQuestions(questions);\n                    }} id=\"cleargame\" variant=\"danger\" size=\"lg\" block>Clear Game</Button>\n                </nav>\n            </Route>\n            <Route path=\"/team-page\">\n                <TeamPageHeader />\n                <br />\n                <TeamPageBody />\n            </Route>\n            <Route path=\"/game-page\">\n                <GamePage\n                    questions={questions}\n                    chartData={adminGameState.questionIndex!=null?questions[adminGameState.questionIndex]:{\n                        \"id\": \"\",\n                        \"color\": null,\n                        \"data\": [],\n                        \"renderChoices\": [],\n                        \"answerIndex\": null,\n                        \"maxScore\": null,\n                    }}\n                    players={players}\n                    adminQuestionIndex={adminGameState.questionIndex}\n                    waitingRoomIsOpen={adminGameState.pageState === adminPageStates.WAITING}\n                    playerAnswers={playerAnswers}\n                />\n            </Route>\n            <Route path=\"/admin-page\">\n                <AdminPage\n                    pageStates={adminPageStates}\n                    pageState={adminGameState.pageState}\n                    playersList={players}\n                    localGameState={adminGameState}\n                    setLocalGameState={setAdminGameState}\n                    questions={questions}\n                    playerAnswers={playerAnswers}\n                />\n            </Route>\n        </Switch>\n        \n        <br /><br />\n        <LinkContainer to=\"/\">\n            <Button>HOME</Button>\n        </LinkContainer>\n    </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}