{"version":3,"sources":["firebase.js","components/team-page/TeamPageHeader.js","components/team-page/TeamPageBody.js","components/game-page/GameChart.js","components/AdminPage.js","components/game-page/GameMainMenu.js","components/game-page/GameQuestion.js","components/game-page/GameWaitingRoom.js","components/game-page/GameLeaderboard.js","components/game-page/GameReview.js","components/DevPanel.js","components/GamePage.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","TeamPageHeader","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Item","to","Button","Link","href","TeamPageBody","Container","Row","style","width","height","ResponsiveEmbed","aspectRatio","title","src","GameChart","data","margin","top","right","bottom","left","xScale","type","yScale","min","max","stacked","reverse","yFormat","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","AdminPage","gameStates","gameState","playersList","adminGameState","setAdminGameState","questions","gameInitButton","onClick","state","newGameState","questionIndex","collection","doc","set","openWaitingRoom","WAITING","size","block","gameStartButton","startGameSession","PLAYING","nextQuestionButton","qIndex","length","REVIEW","nextSessionQuestion","OFFLINE","Table","striped","bordered","hover","map","player","name","section","city","Card","Body","Footer","latexExp","e","index","disabled","answer","tex","GameMainMenu","onSubmitName","canSubmitName","useState","showSettingsModal","setShowSettingsModal","handleCloseSettings","Modal","show","onHide","aria-labelledby","centered","Header","closeButton","Title","Form","Check","label","Col","sm","onSubmit","preventDefault","target","value","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","GameQuestion","displayName","chartData","questionTime","endQuestion","selectAnswer","showFeedbackModal","setShowFeedbackModal","hideFeedbackModal","answerChoiceIndex","setAnswerChoiceIndex","Array","fill","answersClicked","setAnswersClicked","setAnswerTime","handleAnswerSelect","parseInt","currentTarget","newAnsClicked","timer","maxTimer","setTimer","cd","slice","chartDataSlice","setChartDataSlice","useEffect","interval","setInterval","x","parseFloat","l","sliceI","Math","floor","clearInterval","as","onClickCapture","pointerEvents","display","GameWaitingRoom","GameLeaderboard","answerTime","nextQuestion","rankedPlayers","sort","a","b","console","log","topPlayers","fluid","xs","GameReview","localPlayer","chartsData","Tab","defaultActiveKey","ListGroup","chart","answers","Content","Pane","eventKey","DevPanel","goToMainMenu","goToLeaderboard","goToQuestion","goToReview","goToWaitingRoom","setDisplayName","GamePage","players","adminQuestionIndex","waitingRoomIsOpen","pageStates","pageState","setPageState","setQuestionIndex","localPlayerObj","setLocalPlayerObj","React","useCallback","t","handleAnswerSubmit","wrongAnswers","times","score","maxScore","docRef","get","then","exists","playerObject","playerAnswers","undefined","playerTimes","App","adminGameStates","setPlayers","onSnapshot","snapshot","docs","setQuestions","xEnd","xStart","xInc","evalChoices","renderChoices","answerIndex","keys","String","evaluatex","basename","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0325f0e2.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\n// const firebaseConfig = {\r\n//     apiKey: \"AIzaSyBzSeHJ4YWxiLpE09A7mzpYUxUfOWeq3SU\",\r\n//     authDomain: \"sum-that-notation-13637.firebaseapp.com\",\r\n//     projectId: \"sum-that-notation-13637\",\r\n//     storageBucket: \"sum-that-notation-13637.appspot.com\",\r\n//     messagingSenderId: \"912432195227\",\r\n//     appId: \"1:912432195227:web:bc908eb3957185b597483e\",\r\n//     measurementId: \"G-MCKECB516P\"\r\n// };\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBxdroTYNIaxZcwj75RaYMU601PjTzoRnM\",\r\n    authDomain: \"comp585-e8338.firebaseapp.com\",\r\n    projectId: \"comp585-e8338\",\r\n    storageBucket: \"comp585-e8338.appspot.com\",\r\n    messagingSenderId: \"1011171509531\",\r\n    appId: \"1:1011171509531:web:fa24c5896cbcb16e6cbfbe\",\r\n    measurementId: \"G-V22WJ91GTT\"\r\n};\r\n\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const auth = firebase.auth;\r\nexport const db = firebase.firestore();","import Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\r\n\r\n\r\nconst TeamPageHeader = () => {\r\n\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand>Name That Summation</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\" />\r\n            <Nav>\r\n                <Nav.Item className=\"mr-2\">\r\n                <LinkContainer to=\"/game-page\">\r\n                    <Button>Go to <strong>Game</strong></Button>\r\n                </LinkContainer>\r\n                </Nav.Item>\r\n                <Nav.Link href=\"https://github.com/BlaziusMaximus/NameThatSummation\">\r\n                Go to <strong>GitHub</strong>\r\n                </Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default TeamPageHeader;","import Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ResponsiveEmbed from 'react-bootstrap/ResponsiveEmbed';\r\n\r\nconst TeamPageBody = () => {\r\n    return (\r\n        <Container>\r\n            <Row><h3>Team/Client Information</h3></Row>\r\n            <Row><p>Adam Cogdell (adamc77@live.unc.edu): Game Architect, Client Manager</p></Row>\r\n            <Row><p>Emre Yanmis (emre61@live.unc.edu): Software Architect</p></Row>\r\n            <Row><p>Tiger Deng (y.deng@unc.edu): Project Manager, Editor</p></Row>\r\n            <Row><p>John Majikes (jmajikes@cs.unc.edu): Client</p></Row>\r\n\r\n            <Row><h3 id=\"meeting-information\">Meeting Information</h3></Row>\r\n            <Row><p>Client Meetings: Tuesday @ 2:30PM</p></Row>\r\n            <Row><p>Professor Meetings (recitation): Thursday 3:30-4:30PM</p></Row>\r\n            <Row><p>Team Meetings: Monday @ 6:00PM</p></Row>\r\n\r\n            <Row>\r\n                <div style={{ width: '8.5in', height: 'auto' }}>\r\n                    <ResponsiveEmbed aspectRatio=\"1by1\">\r\n                        <iframe title=\"Design Doc\" src=\"https://docs.google.com/document/d/e/2PACX-1vR3nIMv9RltRskz5HY8NZmztMdaF0d1Mfb3Hda5n9-c8VyV_3afAFM-4RU_UVSMI2WajPdJPZLxVgmS/pub?embedded=true\" />\r\n                    </ResponsiveEmbed>\r\n                </div>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TeamPageBody;","import { ResponsiveLine } from 'nivo/es/components/charts/line';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst GameChart = ({ data }) => {\r\n    return (\r\n        <ResponsiveLine\r\n            data={[data]}\r\n            margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n            xScale={{ type: 'point' }}\r\n            yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\r\n            yFormat=\" >-.2f\"\r\n            axisTop={null}\r\n            axisRight={null}\r\n            axisBottom={{\r\n                orient: 'bottom',\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: 'x-axis',\r\n                legendOffset: 36,\r\n                legendPosition: 'center'\r\n            }}\r\n            axisLeft={{\r\n                orient: 'left',\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: 'y-axis',\r\n                legendOffset: -40,\r\n                legendPosition: 'center'\r\n            }}\r\n            pointSize={10}\r\n            pointColor={{ theme: 'background' }}\r\n            pointBorderWidth={2}\r\n            pointBorderColor={{ from: 'serieColor' }}\r\n            pointLabelYOffset={-12}\r\n            useMesh={true}\r\n            legends={[\r\n                {\r\n                    anchor: 'bottom-right',\r\n                    direction: 'column',\r\n                    justify: false,\r\n                    translateX: 100,\r\n                    translateY: 0,\r\n                    itemsSpacing: 0,\r\n                    itemDirection: 'left-to-right',\r\n                    itemWidth: 80,\r\n                    itemHeight: 20,\r\n                    itemOpacity: 0.75,\r\n                    symbolSize: 12,\r\n                    symbolShape: 'circle',\r\n                    symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                    effects: [\r\n                        {\r\n                            on: 'hover',\r\n                            style: {\r\n                                itemBackground: 'rgba(0, 0, 0, .03)',\r\n                                itemOpacity: 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nGameChart.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default GameChart;","import {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { db } from \"../firebase\";\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport GameChart from './game-page/GameChart';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\nimport { LinkContainer } from 'react-router-bootstrap/lib/LinkContainer';\r\n\r\n\r\nconst AdminPage = ({ gameStates, gameState, playersList, adminGameState, setAdminGameState, questions }) => {\r\n\r\n    const openWaitingRoom = (state) => {\r\n        let newGameState = {\r\n            state: state,\r\n            questionIndex: null,\r\n        };\r\n        setAdminGameState(newGameState);\r\n        db.collection(\"adminVars\").doc(\"GameState\").set(newGameState);\r\n    }\r\n    const startGameSession = (state) => {\r\n        let newGameState = {\r\n            state: state,\r\n            questionIndex: 0,\r\n        };\r\n        setAdminGameState(newGameState);\r\n        db.collection(\"adminVars\").doc(\"GameState\").set(newGameState);\r\n    }\r\n    const nextSessionQuestion = () => {\r\n        let qIndex = adminGameState.questionIndex + 1;\r\n        if (qIndex < questions.length) {\r\n            let newGameState = {\r\n                state: gameStates.PLAYING,\r\n                questionIndex: qIndex,\r\n            };\r\n            setAdminGameState(newGameState);\r\n            db.collection(\"adminVars\").doc(\"GameState\").set(newGameState);\r\n        } else {\r\n            let newGameState = {\r\n                state: gameStates.REVIEW,\r\n                questionIndex: null,\r\n            };\r\n            setAdminGameState(newGameState);\r\n            db.collection(\"adminVars\").doc(\"GameState\").set(newGameState);\r\n        }\r\n    }\r\n\r\n    const initializeGame = () => {\r\n        openWaitingRoom(gameStates.WAITING);\r\n    }\r\n    const gameInitButton = <Button onClick={initializeGame} id=\"startgame\" variant=\"danger\" size=\"lg\" block>Initialize Game</Button>;\r\n\r\n    const startGame = () => {\r\n        startGameSession(gameStates.PLAYING);\r\n    }\r\n    const gameStartButton = <Button onClick={startGame} id=\"startgame\" variant=\"danger\" size=\"lg\" block>Start Game</Button>;\r\n\r\n    const nextQuestion = () => {\r\n        nextSessionQuestion();\r\n    }\r\n    const nextQuestionButton = <Button onClick={nextQuestion} id=\"startgame\" variant=\"danger\" size=\"lg\" block>Next Question</Button>;\r\n\r\n    return (\r\n    <>\r\n        {gameState === gameStates.OFFLINE ? <>\r\n            {gameInitButton}\r\n        </> : <></>}\r\n\r\n        {gameState === gameStates.WAITING ? <>\r\n            {gameStartButton}\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Player</th>\r\n                        <th>Section</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {playersList.map(player =>\r\n                    <tr key={player.name+\"\"+player.city}>\r\n                        <td>{player.name}</td>\r\n                        <td>{player.section}</td>\r\n                    </tr>\r\n                )}\r\n                </tbody>\r\n            </Table>\r\n        </> : <></>}\r\n\r\n        {gameState === gameStates.PLAYING ? <>\r\n            {nextQuestionButton}\r\n            <Card style={{height:\"60vh\"}} className=\"text-center\">\r\n                <Card.Body>\r\n                    <GameChart data={questions[adminGameState.questionIndex]} />\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    {questions[adminGameState.questionIndex].latexExp.map((e,index) => (\r\n                    <Button\r\n                        id={index}\r\n                        key={index}\r\n                        disabled\r\n                        style={{margin: \"0 2%\"}}\r\n                        variant={questions[adminGameState.questionIndex].answer===index?\"success\":\"primary\"}>\r\n                            <MathComponent tex={`y = ${e}`} />\r\n                    </Button>\r\n                    ))}\r\n                </Card.Footer>\r\n            </Card>\r\n            <br />\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Player</th>\r\n                        <th>Section</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {playersList.map(player =>\r\n                    <tr key={player.name+\"\"+player.city}>\r\n                        <td>{player.name}</td>\r\n                        <td>{player.section}</td>\r\n                    </tr>\r\n                )}\r\n                </tbody>\r\n            </Table>\r\n        </> : <></>}\r\n        \r\n        {gameState === gameStates.REVIEW ? <>\r\n            {}\r\n        </> : <></>}\r\n    </>);\r\n}\r\n\r\nAdminPage.propTypes = {\r\n    gameStates: PropTypes.object.isRequired,\r\n    gameState: PropTypes.string.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    chartData: PropTypes.object,\r\n    adminGameState: PropTypes.object.isRequired,\r\n    setAdminGameState: PropTypes.func.isRequired,\r\n    questions: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default AdminPage;","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\r\n\r\n\r\nconst GameMainMenu = ({ onSubmitName, canSubmitName }) => {\r\n\r\n    const [showSettingsModal, setShowSettingsModal] = useState(false);\r\n    const handleShowSettings = () => setShowSettingsModal(true);\r\n    const handleCloseSettings = () => setShowSettingsModal(false);\r\n\r\n    const handleNameSubmit = (e) => {\r\n        e.preventDefault();\r\n        onSubmitName(e.target[0].value);\r\n    }\r\n\r\n    return (<>\r\n\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\" />\r\n            <Nav>\r\n                <Nav.Item className=\"mr-2\">\r\n                <LinkContainer to=\"/team-page\">\r\n                    <Button>Go to <strong>Team Page</strong></Button>\r\n                </LinkContainer>\r\n                </Nav.Item>\r\n                <Nav.Link href=\"https://github.com/BlaziusMaximus/NameThatSummation\">\r\n                Go to <strong>GitHub</strong>\r\n                </Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <Button variant=\"secondary\" onClick={handleShowSettings}>Settings</Button>\r\n        <Modal show={showSettingsModal} onHide={handleCloseSettings} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n            <Modal.Title>Settings</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <fieldset>\r\n                <Form>\r\n                    <Form.Check type=\"checkbox\" label=\"Settings Option 1\" />\r\n                    <Form.Check type=\"checkbox\" label=\"Settings Option 2\" />\r\n                </Form>\r\n                <Form>\r\n                    <Form.Check type=\"radio\" label=\"Settings Option 3\" />\r\n                    <Form.Check type=\"radio\" label=\"Settings Option 4\" />\r\n                </Form>\r\n            </fieldset>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleCloseSettings}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col sm=\"auto\"><h1>Name That Summation</h1></Col>\r\n            </Row>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col sm={8}>\r\n                    <Form onSubmit={handleNameSubmit}>\r\n                        <InputGroup>\r\n                            <FormControl\r\n                                placeholder=\"Display Name\"\r\n                                aria-label=\"Display Name\"\r\n                                aria-describedby=\"display-name-form\"\r\n                                />\r\n                            <InputGroup.Append>\r\n                                <Button variant=\"outline-primary\" type=\"submit\" disabled={!canSubmitName}>Submit</Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n        \r\n    </>);\r\n}\r\n\r\nGameMainMenu.propTypes = {\r\n    onSubmitName: PropTypes.func.isRequired,\r\n    canSubmitName: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default GameMainMenu;","import {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport GameChart from './GameChart';\r\n\r\n\r\nconst GameQuestion = ({ displayName, chartData, questionTime, endQuestion, selectAnswer }) => {\r\n\r\n    const [showFeedbackModal, setShowFeedbackModal] = useState(false);\r\n    const hideFeedbackModal = () => {\r\n        setShowFeedbackModal(false);\r\n\r\n        if (answerChoiceIndex === chartData.answer) {\r\n            endQuestion();\r\n        }\r\n    }\r\n\r\n    const [answerChoiceIndex, setAnswerChoiceIndex] = useState(null);\r\n    const [answersClicked, setAnswersClicked] = useState(new Array(chartData.latexExp.length).fill(0));\r\n    const [answerTime, setAnswerTime] = useState(null);\r\n    const handleAnswerSelect = (e) => {\r\n        e.preventDefault();\r\n        let id = parseInt(e.currentTarget.id);\r\n        let newAnsClicked = answersClicked; newAnsClicked[parseInt(id)] = 1; setAnswersClicked(newAnsClicked);\r\n        \r\n        if (answerChoiceIndex===null) {\r\n            selectAnswer(id, questionTime-timer);\r\n        }\r\n        setAnswerChoiceIndex(id);\r\n        setAnswerTime(questionTime-timer);\r\n\r\n        setShowFeedbackModal(true);\r\n    }\r\n\r\n    const maxTimer = questionTime;\r\n    const [timer, setTimer] = useState(questionTime);\r\n    let cd = {...chartData};\r\n    cd.data = cd.data.slice(0,2);\r\n    const [chartDataSlice, setChartDataSlice] = useState(cd);\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (timer > 0) { setTimer(timer => timer-1); }\r\n            // if (timer <= 0) { endQuestion(Math.max(0, timer)); }\r\n\r\n            let cd = {...chartData};\r\n            let x = parseFloat(maxTimer-timer)/parseFloat(maxTimer);\r\n            let l = chartData.data.length;\r\n            let sliceI = Math.floor(x**2 * (l-2))+2;\r\n            cd.data = cd.data.slice(0, Math.min(l, sliceI));\r\n            setChartDataSlice(cd);\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, [timer, maxTimer, chartData, endQuestion]);\r\n\r\n    return (\r\n        <>\r\n        <h2>Name: {displayName}</h2>\r\n        <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n            <Card.Header as=\"h5\">Time Remaining: {timer}</Card.Header>\r\n            <Card.Body>\r\n                <GameChart data={chartDataSlice} />\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                {chartData.latexExp.map((e,index) => (\r\n                <Button\r\n                    id={index} key={index}\r\n                    onClickCapture={handleAnswerSelect}\r\n                    variant={answersClicked[index]===1?(index===chartData.answer?\"success\":\"danger\"):\"primary\"}\r\n                    disabled={answersClicked[index]===1}\r\n                    style={{margin: \"0 2%\"}}>\r\n                        <MathComponent tex={`y = ${e}`} style={{pointerEvents:\"none;\"}} />\r\n                </Button>\r\n                ))}\r\n            </Card.Footer>\r\n        </Card>\r\n        <h1>{answerChoiceIndex}</h1>\r\n\r\n        <Modal show={showFeedbackModal} onHide={hideFeedbackModal} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n            <Modal.Title>{answerChoiceIndex===chartData.answer?\"Correct!\":\"Not Quite...\"}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            {answerChoiceIndex===chartData.answer ?<>\r\n                <p>Good work! <MathComponent tex={`y = ${chartData.latexExp[answerChoiceIndex]}`} display={false} /> was the correct equation.</p>\r\n                {/* <GameChart data={chartData} /> */}\r\n            </>:<>\r\n                <p></p>\r\n            </>}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={hideFeedbackModal}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nGameQuestion.propTypes = {\r\n    displayName: PropTypes.string.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    questionTime: PropTypes.number.isRequired,\r\n    endQuestion: PropTypes.func.isRequired,\r\n    selectAnswer: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default GameQuestion;","import PropTypes from 'prop-types';\r\n\r\nconst GameWaitingRoom = ({ displayName, playersList }) => {\r\n\r\n    return (\r\n        <>\r\n        <h2>Name: {displayName}</h2>\r\n        <br />\r\n        <h1>WAITING</h1>\r\n        <ul>\r\n            {playersList.map(player =>  <li key={player.name+\"\"+player.city}>{player.name}</li> )}\r\n        </ul>\r\n        </>\r\n    );\r\n}\r\n\r\nGameWaitingRoom.propTypes = {\r\n    displayName: PropTypes.string.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default GameWaitingRoom;","import {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport GameChart from './GameChart';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst GameLeaderboard = ({ displayName, chartData, playersList, answerTime, nextQuestion }) => {\r\n\r\n    let rankedPlayers = playersList.sort((a,b) => (a.name > b.name) ? 1 : -1);\r\n    console.log(rankedPlayers)\r\n    let topPlayers = rankedPlayers.length >= 5 ? rankedPlayers.slice(0,5) : rankedPlayers;\r\n    let localPlayer = null; // rankedPlayers.find(p => p.id == thisPlayer.id) == undefined ? null : thisPlayer;\r\n\r\n    return (\r\n        <>\r\n        <h2>Name: {displayName}</h2>\r\n        <h3>Score: {answerTime!=null?answerTime:\"nah\"}</h3>\r\n        <br />\r\n        <Container fluid>\r\n            <Row>\r\n                <Col xs={8}>\r\n                <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n                    <Card.Header as=\"h5\">Time Spent on Question: {1}s</Card.Header>\r\n                    <Card.Body>\r\n                        <GameChart data={chartData} />\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        {chartData.latexExp.map((e,index) => (\r\n                        <Button id={index} key={index} disabled style={{margin: \"0 2%\"}}>\r\n                                <MathComponent tex={`y = ${e}`} />\r\n                        </Button>\r\n                        ))}\r\n                    </Card.Footer>\r\n                </Card>\r\n                </Col>\r\n                <Col>\r\n                    <h1>LEADERBOARD</h1>\r\n                    <ul>\r\n                        {topPlayers.map(player =>  <li key={player.name+\"\"+player.city}>{player.name}</li> )}\r\n                    </ul>\r\n                    <p key=\"ellipsis1\">...</p>\r\n                    {localPlayer == null ? <></> : (<>\r\n                        <ul><li key=\"localPlayer\">{localPlayer.name}</li></ul>\r\n                        <p key=\"ellipsis2\">...</p>\r\n                    </>)}\r\n                    <br />\r\n                    <Button variant=\"secondary\" onClick={nextQuestion}>NEXT QUESTION</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nGameLeaderboard.propTypes = {\r\n    displayName: PropTypes.string.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    answerTime: PropTypes.number.isRequired,\r\n    nextQuestion: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default GameLeaderboard;","import PropTypes from 'prop-types';\r\n\r\nimport GameChart from './GameChart';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\n\r\nconst GameReview = ({ localPlayer, chartsData, playersList, answerTime }) => {\r\n\r\n    let rankedPlayers = playersList.sort((a,b) => (a.name > b.name) ? 1 : -1);\r\n    console.log(rankedPlayers)\r\n    let topPlayers = rankedPlayers.length >= 5 ? rankedPlayers.slice(0,5) : rankedPlayers;\r\n    // let localPlayer = null; // rankedPlayers.find(p => p.id == thisPlayer.id) == undefined ? null : thisPlayer;\r\n\r\n    return (\r\n        <>\r\n        <h2>Name: {localPlayer.name}</h2>\r\n        <h3>Score: {answerTime!=null?answerTime:\"nah\"}</h3>\r\n        <br />\r\n        <Container fluid>\r\n        <Row>\r\n            <Col xs={8}>\r\n            <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey={chartsData[0].id}>\r\n            <Row>\r\n                <Col sm={4}>\r\n                    <ListGroup>\r\n                        {chartsData.map(chart => (\r\n                        <ListGroup.Item href={chart.id} key={chart.id}>\r\n                            Question 1: {chart.id}\r\n                        </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n                    <br />\r\n                    <h3>Answers:</h3>\r\n                    {localPlayer.answers.map(a => (\r\n                        <p>a</p>\r\n                    ))}\r\n                </Col>\r\n                <Col sm={8}>\r\n                <Tab.Content>\r\n                    {chartsData.map(chart => (\r\n                    <Tab.Pane eventKey={chart.id} key={chart.id}>\r\n                    <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n                        <Card.Header as=\"h5\">Time Spent on Question: {1}s</Card.Header>\r\n                        <Card.Body>\r\n                            <GameChart data={chart} />\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            {chart.latexExp.map((e, index) => (\r\n                            <Button disabled id={e} key={e} variant={chart.answer===index?\"success\":\"primary\"} style={{margin: \"0 2%\"}}>\r\n                                <MathComponent tex={`y = ${e}`} style={{pointerEvents:\"none;\"}} />\r\n                            </Button>\r\n                            ))}\r\n                        </Card.Footer>\r\n                    </Card>\r\n                    </Tab.Pane>\r\n                    ))}\r\n                </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n            </Tab.Container>\r\n            </Col>\r\n            <Col>\r\n                <h1>LEADERBOARD</h1>\r\n                <ul>\r\n                    {topPlayers.map(player =>  <li key={player.name+\"\"+player.city}>{player.name}</li> )}\r\n                </ul>\r\n                <p key=\"ellipsis1\">...</p>\r\n                {localPlayer == null ? <></> : (<>\r\n                    <ul><li key=\"localPlayer\">{localPlayer.name}</li></ul>\r\n                    <p key=\"ellipsis2\">...</p>\r\n                </>)}\r\n            </Col>\r\n        </Row>\r\n        </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nGameReview.propTypes = {\r\n    localPlayer: PropTypes.object.isRequired,\r\n    chartsData: PropTypes.array.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    answerTime: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default GameReview;","import PropTypes from 'prop-types';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\r\n\r\n\r\nconst DevPanel = ({ goToMainMenu, goToLeaderboard, goToQuestion, goToReview, goToWaitingRoom, displayName, setDisplayName }) => {\r\n\r\n    return (\r\n        <>\r\n        <Button onClick={() => goToMainMenu()}>MAIN MENU</Button>\r\n        <Button onClick={() => {setDisplayName(displayName); goToWaitingRoom(displayName);}}>WAITING ROOM</Button>\r\n        <Button onClick={goToQuestion}>QUESTION</Button>\r\n        <Button onClick={() => goToLeaderboard(1)}>LEADERBOARD</Button>\r\n        <Button onClick={() => goToReview(1)}>REVIEW</Button>\r\n        <LinkContainer to=\"/admin-page\">\r\n            <Button>ADMIN</Button>\r\n        </LinkContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nDevPanel.propTypes = {\r\n    goToMainMenu: PropTypes.func.isRequired,\r\n    goToLeaderboard: PropTypes.func.isRequired,\r\n    goToQuestion: PropTypes.func.isRequired,\r\n    goToReview: PropTypes.func.isRequired,\r\n    goToWaitingRoom: PropTypes.func.isRequired,\r\n    displayName: PropTypes.string.isRequired,\r\n    setDisplayName: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default DevPanel;","import PropTypes from 'prop-types';\r\nimport React, {useState} from 'react';\r\n\r\nimport { db } from \"../firebase\";\r\n\r\nimport GameMainMenu from './game-page/GameMainMenu';\r\nimport GameQuestion from './game-page/GameQuestion';\r\nimport GameWaitingRoom from './game-page/GameWaitingRoom';\r\nimport GameLeaderboard from './game-page/GameLeaderboard';\r\nimport GameReview from './game-page/GameReview';\r\nimport DevPanel from './DevPanel';\r\n\r\n\r\nconst GamePage = ({ questions, chartData, players, adminQuestionIndex, waitingRoomIsOpen }) => {\r\n\r\n    const pageStates = {\r\n        MAIN_MENU: \"MAIN_MENU\",\r\n        WAITING_ROOM: \"WAITING_ROOM\",\r\n        QUESTION: \"QUESTION\",\r\n        LEADERBOARD: \"LEADERBOARD\",\r\n        REVIEW: \"REVIEW\",\r\n    };\r\n    const [pageState, setPageState] = useState(pageStates.MAIN_MENU);\r\n    \r\n    const [answerTime, setAnswerTime] = useState(0);\r\n    \r\n    const [questionIndex, setQuestionIndex] = useState(null);\r\n\r\n    const [localPlayerObj, setLocalPlayerObj] = useState({\r\n        \"name\": \"_\",\r\n        \"score\": 0,\r\n        \"section\": 1337,\r\n        \"answers\": [],\r\n        \"wrongAnswers\": [],\r\n        \"times\": [],\r\n    });\r\n    \r\n    const goToMainMenu = () => {\r\n        setPageState(pageStates.MAIN_MENU);\r\n    }\r\n    const goToWaitingRoom = (name) => {\r\n        setPageState(pageStates.WAITING_ROOM);\r\n        db.collection(\"playersDB\").doc(name).set({\r\n            ...localPlayerObj,\r\n            \"name\": name,\r\n        });\r\n    }\r\n    const goToQuestion = React.useCallback(() => {\r\n        setPageState(pageStates.QUESTION);\r\n        setQuestionIndex(adminQuestionIndex);\r\n    }, [adminQuestionIndex, pageStates.QUESTION]);\r\n    const goToLeaderboard = (t) => {\r\n        setPageState(pageStates.LEADERBOARD);\r\n        setAnswerTime(t);\r\n    }\r\n    const goToReview = React.useCallback(() => {\r\n        setPageState(pageStates.REVIEW);\r\n    }, [pageStates.REVIEW]);\r\n\r\n    React.useEffect(() => {\r\n        if (adminQuestionIndex != null && (pageState === pageStates.WAITING_ROOM || adminQuestionIndex > questionIndex)) {\r\n            goToQuestion();\r\n        }\r\n        if (adminQuestionIndex === null && (pageState === pageStates.QUESTION || pageState === pageStates.LEADERBOARD)) {\r\n            console.log(\"REVIEW\")\r\n            goToReview();\r\n        }\r\n    }, [adminQuestionIndex, questionIndex, pageState, pageStates.WAITING_ROOM, pageStates.QUESTION, pageStates.LEADERBOARD, goToQuestion, goToReview]);\r\n\r\n    const handleAnswerSubmit = async (a,t) => {\r\n        console.log(localPlayerObj.name, \"answer:\", a, \"time:\", t, \"score:\",chartData/t);\r\n        setLocalPlayerObj({\r\n            ...localPlayerObj,\r\n            answers: [...(localPlayerObj.answers),a],\r\n            wrongAnswers: a===chartData.answer ? [...(localPlayerObj.wrongAnswers)] : [...(localPlayerObj.wrongAnswers),a],\r\n            times: [...(localPlayerObj.times),t],\r\n            score: localPlayerObj.score + Math.floor(chartData.maxScore/t),\r\n        });\r\n\r\n        const docRef = db.collection('playersDB').doc(localPlayerObj.name);\r\n        docRef.get().then(async (doc) => {\r\n            if (doc.exists) {\r\n                // name, section, times, answers, score\r\n                const playerObject = doc.data();\r\n                let playerAnswers = playerObject.answers===undefined ? [] : playerObject.answers;\r\n                let playerTimes = playerObject.times===undefined ? [] : playerObject.times;\r\n                await docRef.set({\r\n                    ...playerObject,\r\n                    answers: [...playerAnswers,a],\r\n                    times: [...playerTimes,t],\r\n                    score: playerObject.score + Math.floor(chartData.maxScore/t),\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {pageState === pageStates.MAIN_MENU ? <>\r\n        <GameMainMenu\r\n            onSubmitName={(name) => {setLocalPlayerObj({...localPlayerObj, \"name\":name}); goToWaitingRoom(name);}}\r\n            canSubmitName={waitingRoomIsOpen}\r\n        />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.WAITING_ROOM ? <>\r\n        <GameWaitingRoom\r\n            displayName={localPlayerObj.name}\r\n            playersList={players}\r\n        />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.QUESTION ? <>\r\n        <GameQuestion\r\n            displayName={localPlayerObj.name}\r\n            chartData={chartData}\r\n            questionTime={15}\r\n            endQuestion={goToLeaderboard}\r\n            selectAnswer={handleAnswerSubmit}\r\n        />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.LEADERBOARD ? <>\r\n        <GameLeaderboard\r\n            displayName={localPlayerObj.name}\r\n            chartData={chartData}\r\n            playersList={players}\r\n            answerTime={answerTime}\r\n        />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.REVIEW ? <>\r\n        <GameReview\r\n            localPlayer={localPlayerObj}\r\n            chartsData={questions}\r\n            playersList={players}\r\n            answerTime={answerTime}\r\n        />\r\n        </> : <></>}\r\n\r\n        <br />\r\n        <DevPanel\r\n            goToMainMenu={goToMainMenu}\r\n            goToLeaderboard={goToLeaderboard}\r\n            goToReview={goToReview}\r\n            goToQuestion={goToQuestion}\r\n            goToWaitingRoom={goToWaitingRoom}\r\n            displayName={localPlayerObj.name}\r\n            setDisplayName={(name) => setLocalPlayerObj({...localPlayerObj, \"name\":name})}\r\n        />\r\n        </>\r\n    );\r\n}\r\n\r\nGamePage.propTypes = {\r\n    questions: PropTypes.array.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    players: PropTypes.array.isRequired,\r\n    adminQuestionIndex: PropTypes.number,\r\n    waitingRoomIsOpen: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default GamePage;","import React from 'react';\nimport {useState} from 'react';\n\nimport { db } from \"./firebase\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport evaluatex from \"evaluatex\";\n\nimport Button from 'react-bootstrap/Button';\n\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\n\nimport TeamPageHeader from './components/team-page/TeamPageHeader';\nimport TeamPageBody from './components/team-page/TeamPageBody';\nimport AdminPage from './components/AdminPage';\nimport GamePage from './components/GamePage';\n\nimport './App.css';\n\nfunction App() {\n\n    const adminGameStates = {\n        OFFLINE: \"OFFLINE\",\n        WAITING: \"WAITING\",\n        PLAYING: \"PLAYING\",\n        REVIEW: \"REVIEW\",\n    };\n\n    const [players, setPlayers] = useState([]);\n    React.useEffect(() => {\n        db.collection(\"playersDB\").onSnapshot((snapshot) => {\n            setPlayers(snapshot.docs.map(doc => doc.data()));\n        });\n        console.log(\"fetched players from firebase\")\n    }, []);\n\n    const [questions, setQuestions] = useState([]);\n    React.useEffect(() => {\n        db.collection(\"questions\").onSnapshot((snapshot) => {\n            setQuestions(snapshot.docs.map((doc, index) => {\n                let {xEnd, xStart, xInc, evalChoices, renderChoices, answerIndex, maxScore} = doc.data();\n                return {\n                    \"id\": `summation function ${index+1}`,\n                    \"color\": \"hsl(24, 70%, 50%)\",\n                    \"data\": [...Array(Math.floor((xEnd-xStart)/parseFloat(xInc))+1).keys()].map(e => (\n                        { \"x\":String(e), \"y\":evaluatex(evalChoices[answerIndex])({x:e}) }\n                    )),\n                    \"answerChoices\": evalChoices,\n                    \"latexExp\": renderChoices,\n                    \"answer\": answerIndex,\n                    \"maxScore\": maxScore,\n                };\n            }));\n        });\n        console.log(\"fetched questions from firebase\")\n    }, []);\n\n    const [adminGameState, setAdminGameState] = useState({\n        state: adminGameStates.OFFLINE,\n        questionIndex: null,\n    });\n    React.useEffect(() => {\n\n        db.collection(\"adminVars\").doc(\"GameState\").set(adminGameState);\n\n        db.collection(\"adminVars\").doc(\"GameState\").onSnapshot((doc) => {\n            console.log(doc.data())\n            setAdminGameState(doc.data());\n        });\n        console.log(\"fetched admins variables from firebase\")\n    }, []);\n\n    return (\n    <Router basename=\"/NameThatSummation\">\n        <Switch>\n            <Route exact path=\"/\">\n                <nav>\n                    <LinkContainer to=\"/team-page\">\n                        <Button>TEAM PAGE</Button>\n                    </LinkContainer>\n                    <LinkContainer to=\"/game-page\">\n                        <Button>GAME PAGE</Button>\n                    </LinkContainer>\n                    <LinkContainer to=\"/admin-page\">\n                        <Button>ADMIN PAGE</Button>\n                    </LinkContainer>\n                </nav>\n            </Route>\n            <Route path=\"/team-page\">\n                <TeamPageHeader />\n                <br />\n                <TeamPageBody />\n            </Route>\n            <Route path=\"/game-page\">\n                <GamePage\n                    questions={questions}\n                    chartData={adminGameState.questionIndex!=null?questions[adminGameState.questionIndex]:{\n                        \"id\": \"\",\n                        \"color\": null,\n                        \"data\": [],\n                        \"answerChoices\": [],\n                        \"latexExp\": [],\n                        \"answer\": null,\n                        \"maxScore\": null,\n                    }}\n                    players={players}\n                    adminQuestionIndex={adminGameState.questionIndex}\n                    waitingRoomIsOpen={adminGameState.state === adminGameStates.WAITING}\n                />\n            </Route>\n            <Route path=\"/admin-page\">\n                <AdminPage\n                    gameStates={adminGameStates}\n                    gameState={adminGameState.state}\n                    playersList={players}\n                    adminGameState={adminGameState}\n                    setAdminGameState={setAdminGameState}\n                    questions={questions}\n                />\n            </Route>\n        </Switch>\n        \n        <br /><br />\n        <LinkContainer to=\"/\">\n            <Button>HOME</Button>\n        </LinkContainer>\n    </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}