{"version":3,"sources":["firebase.js","components/team-page/TeamPageHeader.js","components/team-page/TeamPageBody.js","components/admin-page/AdminWaiting.js","components/GameChart.js","components/admin-page/AdminPlaying.js","components/admin-page/AdminReview.js","components/admin-page/AdminOffline.js","components/AdminFirebase.js","components/AdminPage.js","components/game-page/GameMainMenu.js","components/GameUtils.js","components/game-page/GameQuestion.js","components/game-page/GameWaitingRoom.js","components/game-page/game-components/GameAnswerSelections.js","components/game-page/GameLeaderboard.js","components/game-page/GameReview.js","components/game-page/game-components/GameSettings.js","components/GameFirebase.js","components/game-page/game-components/GamePageHeader.js","components/GamePage.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","TeamPageHeader","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Item","to","Button","Link","href","TeamPageBody","Container","Row","style","width","height","ResponsiveEmbed","aspectRatio","title","src","AdminWaiting","playersList","startGame","quitGame","kickPlayer","noPlayers","onClick","size","block","disabled","Table","striped","bordered","hover","map","player","name","section","GameChart","data","margin","top","right","bottom","left","xScale","type","yScale","min","max","stacked","reverse","yFormat","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","AdminPlaying","prevQuestion","nextQuestion","endQuestion","questions","localGameState","playerAnswers","useState","tab","setTab","answerStats","setAnswerStats","React","useEffect","newStats","forEach","undefined","ButtonGroup","questionIndex","length","fluid","Col","sm","Card","Body","Footer","renderChoices","e","index","answerIndex","tex","display","ProgressBar","label","now","padding","Tabs","activeKey","onSelect","t","Tab","eventKey","overflowY","score","times","answers","toString","city","defaultActiveKey","ListGroup","q","cursor","paddingLeft","Content","Pane","expindex","AdminReview","chartsData","endGame","rankedPlayers","sort","a","b","topPlayers","slice","xs","chart","pointerEvents","Object","values","filter","x","AdminOffline","initializeGame","clearGame","uploadQuestions","noQuestions","questionsFile","setQuestionsFile","fileReader","FileReader","readAsText","onload","questionJSON","JSON","parse","result","console","log","Form","Group","File","onChange","target","files","deletePlayers","players","collection","doc","delete","setFirebaseGameState","state","set","json","blankAnswers","i","deleteQuestions","question","AdminPage","pageStates","pageState","setLocalGameState","ans","newGameState","OFFLINE","questionActive","WAITING","PLAYING","qIndex","REVIEW","GameMainMenu","onSubmitName","canSubmitName","showKickModal","handleCloseKick","settings","showBadSectionModal","handleShowBadSection","handleCloseBadSection","Modal","show","onHide","aria-labelledby","centered","Header","closeButton","Title","onSubmit","preventDefault","value","parseInt","isNaN","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","pointEval","evalChoice","y","evaluatex","Infinity","GameQuestion","displayName","chartData","questionTime","timer","selectAnswer","showFeedbackModal","setShowFeedbackModal","hideFeedbackModal","answerChoiceIndex","answerTime","setAnswerChoiceIndex","Array","fill","answersClicked","setAnswersClicked","setAnswerTime","handleAnswerSelect","currentTarget","newAnsClicked","cd","chartDataSlice","setChartDataSlice","parseFloat","l","sliceI","Math","floor","as","onClickCapture","xEnd","xStart","xInc","keys","String","evalChoices","GameWaitingRoom","marginTop","marginBottom","Spinner","animation","GameAnswerSelections","showWrongChart","horizontal","wrongAnswers","action","GameLeaderboard","localPlayer","find","p","wrongChartIndex","setWrongChartIndex","topPlayer","backgroundColor","colSpan","textAlign","GameReview","toggleWrongChart","GameSettings","showSettingsModal","handleShowSettings","handleCloseSettings","Check","setPlayer","obj","GamePageHeader","goToMainMenu","showConfirmModal","setShowConfirmModal","handleCloseConfirm","paddingRight","GamePage","adminQuestionIndex","waitingRoomIsOpen","setPageState","setTimer","setQuestionIndex","localPlayerObj","setLocalPlayerObj","setShowKickModal","setShowBadSectionModal","goToWaitingRoom","newPlayerObj","random","Date","goToQuestion","useCallback","goToLeaderboard","goToReview","handleAnswerSubmit","points","maxScore","localAnswers","firstAnswer","localWrongs","rightAnswer","push","localTimes","newAnswers","wipePlayer","setTopPlayers","Number","isInteger","interval","setInterval","tim","clearInterval","PageComponent","setShowSettingsModal","SettingsComponent","HeaderComponent","renderHeader","App","adminPageStates","setPlayers","onSnapshot","snapshot","docs","setQuestions","substring","adminGameState","setAdminGameState","get","then","playersDB","setPlayerAnswers","basename","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e6901f26.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\n// const firebaseConfig = {\r\n//     apiKey: \"AIzaSyBzSeHJ4YWxiLpE09A7mzpYUxUfOWeq3SU\",\r\n//     authDomain: \"sum-that-notation-13637.firebaseapp.com\",\r\n//     projectId: \"sum-that-notation-13637\",\r\n//     storageBucket: \"sum-that-notation-13637.appspot.com\",\r\n//     messagingSenderId: \"912432195227\",\r\n//     appId: \"1:912432195227:web:bc908eb3957185b597483e\",\r\n//     measurementId: \"G-MCKECB516P\"\r\n// };\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyB-xHDeSe4hqhBhG5QEOy6NMdF61QA6orI\",\r\n    authDomain: \"comp585-version1.firebaseapp.com\",\r\n    projectId: \"comp585-version1\",\r\n    storageBucket: \"comp585-version1.appspot.com\",\r\n    messagingSenderId: \"86593862085\",\r\n    appId: \"1:86593862085:web:c1f4f3f0a331797292b3ac\",\r\n    measurementId: \"G-1PWT66W06C\"\r\n};\r\n\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const auth = firebase.auth;\r\nexport const db = firebase.firestore();","import Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\r\n\r\n\r\nconst TeamPageHeader = () => {\r\n\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand>Name That Summation</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\" />\r\n            <Nav>\r\n                <Nav.Item className=\"mr-2\">\r\n                <LinkContainer to=\"/game-page\">\r\n                    <Button>Go to <strong>Game</strong></Button>\r\n                </LinkContainer>\r\n                </Nav.Item>\r\n                <Nav.Link href=\"https://github.com/BlaziusMaximus/NameThatSummation\">\r\n                Go to <strong>GitHub</strong>\r\n                </Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default TeamPageHeader;","import Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ResponsiveEmbed from 'react-bootstrap/ResponsiveEmbed';\r\n\r\nconst TeamPageBody = () => {\r\n    return (\r\n        <Container>\r\n            <Row><h3>Team/Client Information</h3></Row>\r\n            <Row><p>Adam Cogdell (adamc77@live.unc.edu): Game Architect, Client Manager</p></Row>\r\n            <Row><p>Emre Yanmis (emre61@live.unc.edu): Software Architect</p></Row>\r\n            <Row><p>Tiger Deng (y.deng@unc.edu): Project Manager, Editor</p></Row>\r\n            <Row><p>John Majikes (jmajikes@cs.unc.edu): Client</p></Row>\r\n\r\n            <Row><h3 id=\"meeting-information\">Meeting Information</h3></Row>\r\n            <Row><p>Client Meetings: Tuesday @ 2:30PM</p></Row>\r\n            <Row><p>Professor Meetings (recitation): Thursday 3:30-4:30PM</p></Row>\r\n            <Row><p>Team Meetings: Monday @ 6:00PM</p></Row>\r\n\r\n            <Row>\r\n                <div style={{ width: '8.5in', height: 'auto' }}>\r\n                    <ResponsiveEmbed aspectRatio=\"1by1\">\r\n                        <iframe title=\"Design Doc\" src=\"https://docs.google.com/document/d/e/2PACX-1vR3nIMv9RltRskz5HY8NZmztMdaF0d1Mfb3Hda5n9-c8VyV_3afAFM-4RU_UVSMI2WajPdJPZLxVgmS/pub?embedded=true\" />\r\n                    </ResponsiveEmbed>\r\n                </div>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TeamPageBody;","import PropTypes from 'prop-types';\r\n\r\nimport {\r\n    Button,\r\n    Table,\r\n} from 'react-bootstrap';\r\n\r\n\r\nconst AdminWaiting = ({ playersList, startGame, quitGame, kickPlayer, noPlayers }) => {\r\n\r\n    return (<>\r\n\r\n        <Button\r\n            onClick={quitGame}\r\n            id=\"startgame\"\r\n            variant=\"danger\"\r\n            size=\"lg\"\r\n            block>\r\n                Quit Game\r\n        </Button>\r\n        <Button\r\n            onClick={startGame}\r\n            id=\"startgame\"\r\n            variant=\"success\"\r\n            size=\"lg\"\r\n            block\r\n            disabled={noPlayers}>\r\n                Start Game\r\n        </Button>\r\n\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <th style={{width: \"10%\"}}></th>\r\n                    <th>Player</th>\r\n                    <th>Section</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {playersList.map(player =>\r\n                <tr key={player.name+\"\"+player.section}>\r\n                    <td><Button onClick={() => kickPlayer(player)}>Kick</Button></td>\r\n                    <td>{player.name}</td>\r\n                    <td>{player.section}</td>\r\n                </tr>\r\n            )}\r\n            </tbody>\r\n        </Table>\r\n\r\n    </>);\r\n}\r\n\r\nAdminWaiting.propTypes = {\r\n    playersList: PropTypes.array.isRequired,\r\n    startGame: PropTypes.func.isRequired,\r\n    quitGame: PropTypes.func.isRequired,\r\n    kickPlayer: PropTypes.func.isRequired,\r\n    noPlayers: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default AdminWaiting;","import { ResponsiveLine } from 'nivo/es/components/charts/line';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst GameChart = ({ data }) => {\r\n    return (\r\n        <ResponsiveLine\r\n            data={data}\r\n            margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n            xScale={{ type: 'point' }}\r\n            yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\r\n            yFormat=\" >-.2f\"\r\n            axisTop={null}\r\n            axisRight={null}\r\n            axisBottom={{\r\n                orient: 'bottom',\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: 'x-axis',\r\n                legendOffset: 36,\r\n                legendPosition: 'center'\r\n            }}\r\n            axisLeft={{\r\n                orient: 'left',\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: 'y-axis',\r\n                legendOffset: -40,\r\n                legendPosition: 'center'\r\n            }}\r\n            pointSize={10}\r\n            pointColor={{ theme: 'background' }}\r\n            pointBorderWidth={2}\r\n            pointBorderColor={{ from: 'serieColor' }}\r\n            pointLabelYOffset={-12}\r\n            useMesh={true}\r\n            legends={[\r\n                {\r\n                    anchor: 'bottom-right',\r\n                    direction: 'column',\r\n                    justify: false,\r\n                    translateX: 100,\r\n                    translateY: 0,\r\n                    itemsSpacing: 0,\r\n                    itemDirection: 'left-to-right',\r\n                    itemWidth: 80,\r\n                    itemHeight: 20,\r\n                    itemOpacity: 0.75,\r\n                    symbolSize: 12,\r\n                    symbolShape: 'circle',\r\n                    symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                    effects: [\r\n                        {\r\n                            on: 'hover',\r\n                            style: {\r\n                                itemBackground: 'rgba(0, 0, 0, .03)',\r\n                                itemOpacity: 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nGameChart.propTypes = {\r\n    data: PropTypes.oneOfType([\r\n        PropTypes.object,\r\n        PropTypes.array,\r\n    ]).isRequired,\r\n}\r\n\r\nexport default GameChart;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n    Button,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    Tabs,\r\n    Tab,\r\n    Table,\r\n    ListGroup,\r\n    ButtonGroup,\r\n    ProgressBar,\r\n} from 'react-bootstrap';\r\n\r\nimport GameChart from '../GameChart';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\n\r\nconst AdminPlaying = ({ quitGame, prevQuestion, nextQuestion, endQuestion, questions, localGameState, playersList, playerAnswers }) => {\r\n    \r\n    const [tab, setTab] = useState(\"players\");\r\n\r\n    const [answerStats, setAnswerStats] = useState([0,0,0,0]);\r\n    React.useEffect(() => {\r\n        let newStats = [0,0,0,0];\r\n        playersList.forEach(player => {\r\n            if (playerAnswers !== undefined && playerAnswers[player.id] !== undefined) {\r\n                newStats[playerAnswers[player.id]] += 1;\r\n            }\r\n        });\r\n        setAnswerStats(newStats);\r\n    }, [playerAnswers, playersList]);\r\n\r\n    return (<>\r\n\r\n        <Button onClick={quitGame} id=\"startgame\" variant=\"danger\" size=\"lg\" block>Quit Game</Button>\r\n        <ButtonGroup className=\"d-flex\">\r\n            <Button\r\n                className=\"btn-block mr-1 mt-1 btn-lg\"\r\n                onClick={prevQuestion}\r\n                id=\"prev\"\r\n                variant=\"secondary\"\r\n                size=\"lg\"\r\n                block\r\n                disabled={localGameState.questionIndex === 0}>\r\n                    Previous Question\r\n            </Button>\r\n            <Button\r\n                className=\"btn-block mr-1 mt-1 btn-lg\"\r\n                onClick={endQuestion}\r\n                id=\"end\"\r\n                variant=\"warning\"\r\n                size=\"lg\"\r\n                block>\r\n                    End Question\r\n            </Button>\r\n            <Button\r\n                className=\"btn-block mr-1 mt-1 btn-lg\"\r\n                onClick={nextQuestion}\r\n                id=\"next\"\r\n                variant=\"primary\"\r\n                size=\"lg\"\r\n                block>\r\n                    {localGameState.questionIndex+1<questions.length?\"Next Question\":\"Review\"}\r\n            </Button>\r\n        </ButtonGroup>\r\n\r\n        <Container fluid>\r\n        <Row>\r\n            <Col sm={5}>\r\n            <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n                <Card.Body>\r\n                    <GameChart data={[questions[localGameState.questionIndex]]} />\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                {questions[localGameState.questionIndex].renderChoices.map((e,index) => (\r\n                    <Button\r\n                        id={index}\r\n                        key={index}\r\n                        disabled\r\n                        style={{margin: \"0 2%\"}}\r\n                        variant={questions[localGameState.questionIndex].answerIndex===index?\"success\":\"primary\"}>\r\n                            <MathComponent tex={`y = ${e}`} display={false} />\r\n                    </Button>\r\n                ))}\r\n                </Card.Footer>\r\n                <br />\r\n                <Container>\r\n                {questions[localGameState.questionIndex].renderChoices.map((e,index) => (<>\r\n                <Row>\r\n                    <Col sm={3}>\r\n                        <MathComponent tex={`y = ${e}`} display={false} />\r\n                    </Col>\r\n                    <Col>\r\n                        <ProgressBar\r\n                            label={`${answerStats[index]/playersList.length*100}%`}\r\n                            variant={questions[localGameState.questionIndex].answerIndex===index?\"success\":\"primary\"}\r\n                            now={answerStats[index]/playersList.length*100}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                </>))}\r\n                </Container>\r\n                <br />\r\n            </Card>\r\n            </Col>\r\n            <Col style={{padding: \"0\"}}>\r\n            <Tabs id=\"tabs\" activeKey={tab} onSelect={(t) => setTab(t)}>\r\n                <Tab eventKey=\"players\" title=\"Players\">\r\n                <Container style={{height:\"80vh\", overflowY: \"scroll\"}}>\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Player</th>\r\n                                <th>Section</th>\r\n                                <th>Score</th>\r\n                                <th>Time</th>\r\n                                <th>Answer</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {playersList.map(player =>\r\n                            <tr key={player.name+\"\"+player.city}>\r\n                                <td>{player.name}</td>\r\n                                <td>{player.section}</td>\r\n                                <td>{player.score}</td>\r\n                                <td>{player.times[`q${localGameState.questionIndex}`]==null?0:player.times[`q${localGameState.questionIndex}`]}</td>\r\n                                <td>\r\n                                {player.answers['q'+localGameState.questionIndex.toString()] != null ?\r\n                                    <MathComponent\r\n                                        tex={`y = ${questions[localGameState.questionIndex].renderChoices[player.answers['q'+localGameState.questionIndex.toString()]]}`}\r\n                                        display={false}\r\n                                    />\r\n                                :   \"NONE\"}\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                        </tbody>\r\n                    </Table>\r\n                </Container>\r\n                </Tab>\r\n                <Tab eventKey=\"questions\" title=\"Questions\"><Container>\r\n                <Tab.Container defaultActiveKey={`${localGameState.questionIndex}`}>\r\n                <Row>\r\n                    <Col sm={4}>\r\n                    <ListGroup style={{height:\"80vh\", overflowY: \"scroll\"}}>\r\n                    {questions.map((q,index) =>\r\n                        <ListGroup.Item\r\n                            href={`${index}`}\r\n                            key={`${index}`}\r\n                            style={{cursor: \"pointer\"}}\r\n                            variant={index===localGameState.questionIndex?\"primary\":(index<localGameState.questionIndex?\"secondary\":\"\")}>\r\n                                {q.id}\r\n                        </ListGroup.Item>\r\n                    )}\r\n                    </ListGroup>\r\n                    </Col>\r\n                    <Col sm={8} style={{paddingLeft: \"0\"}}>\r\n                    <Tab.Content>\r\n                    {questions.map((q,index) =>\r\n                        <Tab.Pane eventKey={`${index}`} key={`${index}`}>\r\n                        <Card style={{height:\"60vh\"}} className=\"text-center\">\r\n                            <Card.Body>\r\n                                <GameChart data={[q]} />\r\n                            </Card.Body>\r\n                            <Card.Footer>\r\n                            {q.renderChoices.map((e,expindex) => (\r\n                                <Button\r\n                                    id={expindex}\r\n                                    key={expindex}\r\n                                    disabled\r\n                                    style={{margin: \"0 2%\"}}\r\n                                    variant={q.answerIndex===expindex?\"success\":\"primary\"}>\r\n                                        <MathComponent tex={`y = ${e}`} display={false} />\r\n                                </Button>\r\n                            ))}\r\n                            </Card.Footer>\r\n                        </Card>\r\n                        </Tab.Pane>\r\n                    )}\r\n                    </Tab.Content>\r\n                    </Col>\r\n                </Row>\r\n                </Tab.Container>\r\n                </Container></Tab>\r\n            </Tabs>\r\n            </Col>\r\n        </Row>\r\n        </Container>\r\n    </>);\r\n}\r\n\r\nAdminPlaying.propTypes = {\r\n    quitGame: PropTypes.func.isRequired,\r\n    prevQuestion: PropTypes.func.isRequired,\r\n    nextQuestion: PropTypes.func.isRequired,\r\n    endQuestion: PropTypes.func.isRequired,\r\n    questions: PropTypes.array.isRequired,\r\n    localGameState: PropTypes.object.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    playerAnswers: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default AdminPlaying;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport GameChart from '../GameChart';\r\n\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    Button,\r\n    Tab,\r\n    ListGroup,\r\n    Table,\r\n    ProgressBar,\r\n} from 'react-bootstrap';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\n\r\nconst AdminReview = ({ chartsData, playersList, endGame, playerAnswers }) => {\r\n\r\n    let rankedPlayers = playersList.sort((a,b) => (a.name > b.name) ? 1 : -1);\r\n    let topPlayers = rankedPlayers.length >= 5 ? rankedPlayers.slice(0,5) : rankedPlayers;\r\n\r\n    return (<>\r\n\r\n        <Button onClick={endGame} id=\"cleargame\" variant=\"secondary\" size=\"lg\" block>End Game</Button>\r\n\r\n        <Container fluid>\r\n        <br />\r\n        <Row>\r\n            <Col xs={8}>\r\n            <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey={chartsData[0].id}>\r\n            <Row>\r\n                <Col sm={4}>\r\n                    <ListGroup>\r\n                        {chartsData.map((chart,index) => (\r\n                        <ListGroup.Item href={chart.id} key={chart.id} style={{cursor: \"pointer\"}}>\r\n                            Question {index}: {chart.id}\r\n                        </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n                </Col>\r\n                <Col sm={8}>\r\n                <Tab.Content>\r\n                    {chartsData.map((chart,index) => (\r\n                    <Tab.Pane eventKey={chart.id} key={chart.id}>\r\n                    <Card style={{height:\"80vh\"}} className=\"text-center\">\r\n                        <Card.Body>\r\n                            <GameChart data={[chart]} />\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            {chart.renderChoices.map((e, expindex) => (\r\n                            <Button disabled id={e} key={e} variant={chart.answerIndex===expindex?\"success\":\"primary\"} style={{margin: \"0 2%\"}}>\r\n                                <MathComponent tex={`y = ${e}`} style={{pointerEvents:\"none;\"}} display={false} />\r\n                            </Button>\r\n                            ))}\r\n                        </Card.Footer>\r\n                        <br />\r\n                        <Container>\r\n                        {chart.renderChoices.map((e,index) => (<>\r\n                        <Row>\r\n                            <Col sm={3}>\r\n                                <MathComponent tex={`y = ${e}`} display={false} />\r\n                            </Col>\r\n                            <Col>\r\n                                <ProgressBar\r\n                                    label={`${Object.values(playerAnswers[chart.id]).filter(x => x===index).length/playersList.length*100}%`}\r\n                                    variant={chart.answerIndex===index?\"success\":\"primary\"}\r\n                                    now={Object.values(playerAnswers[chart.id]).filter(x => x===index).length/playersList.length*100}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        </>))}\r\n                        </Container>\r\n                        <br />\r\n                    </Card>\r\n                    </Tab.Pane>\r\n                    ))}\r\n                </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n            </Tab.Container>\r\n            </Col>\r\n            <Col>\r\n                <h1>LEADERBOARD</h1>\r\n                <Table striped bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Top Players</th>\r\n                        <th>Scores</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {topPlayers.map(player =>\r\n                    <tr key={player.name+\"\"+player.score}>\r\n                        <td>{player.name}</td>\r\n                        <td>{player.score}</td>\r\n                    </tr>\r\n                    )}\r\n                </tbody>\r\n                </Table>\r\n            </Col>\r\n        </Row>\r\n        </Container>\r\n    \r\n    </>);\r\n}\r\n\r\nAdminReview.propTypes = {\r\n    chartsData: PropTypes.array.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    endGame: PropTypes.func.isRequired,\r\n    playerAnswers: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default AdminReview;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n    Button,\r\n    Table,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Form,\r\n} from 'react-bootstrap';\r\n\r\n\r\nconst AdminOffline = ({ initializeGame, clearGame, playersList, uploadQuestions, noQuestions }) => {\r\n\r\n    const [questionsFile, setQuestionsFile] = useState(null);\r\n    React.useEffect(() => {\r\n        if (questionsFile != null) {\r\n            const fileReader = new FileReader();\r\n            fileReader.readAsText(questionsFile);\r\n            fileReader.onload = () => {\r\n                const questionJSON = JSON.parse(fileReader.result);\r\n                console.log(questionJSON);\r\n                uploadQuestions(questionJSON);\r\n            }\r\n        }\r\n    }, [questionsFile, uploadQuestions]);\r\n\r\n    return (<>\r\n\r\n        <Button\r\n            onClick={initializeGame}\r\n            id=\"startgame\"\r\n            variant=\"danger\"\r\n            size=\"lg\"\r\n            block\r\n            disabled={noQuestions}>\r\n                Initialize Game\r\n        </Button>\r\n        <Button\r\n            onClick={clearGame}\r\n            id=\"cleargame\"\r\n            variant=\"secondary\"\r\n            size=\"lg\"\r\n            block>\r\n                Clear Game\r\n        </Button>\r\n        <br />\r\n\r\n        {playersList.length===0 ?\r\n        <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n        <Col sm=\"auto\">\r\n            <h1>No Players in Database</h1>\r\n        </Col>\r\n        </Row>\r\n        </Container>\r\n        :\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <th>Player</th>\r\n                    <th>Section</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {playersList.map(player =>\r\n                <tr key={player.name+\"\"+player.section}>\r\n                    <td>{player.name}</td>\r\n                    <td>{player.section}</td>\r\n                </tr>\r\n            )}\r\n            </tbody>\r\n        </Table>\r\n        }\r\n\r\n        <Form>\r\n        <Form.Group>\r\n        <Form.File\r\n            type=\"file\"\r\n            id=\"fileUpload\"\r\n            label=\"Upload Questions JSON Here\"\r\n            onChange={(e) => setQuestionsFile(e.target.files[0])}\r\n        />\r\n        </Form.Group>\r\n        </Form>\r\n\r\n    </>);\r\n}\r\n\r\nAdminOffline.propTypes = {\r\n    initializeGame: PropTypes.func.isRequired,\r\n    clearGame: PropTypes.func.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    uploadQuestions: PropTypes.func.isRequired,\r\n    noQuestions: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default AdminOffline;","import { db } from \"../firebase\";\r\n\r\n\r\nconst deletePlayers = (players) => {\r\n    players.forEach(player => {\r\n        db.collection('playersDB').doc(player.name).delete();\r\n        console.log(`player '${player.name}' deleted`);\r\n    });\r\n}\r\n\r\nconst kickPlayer = (player) => {\r\n    db.collection('playersDB').doc(player.name).delete();\r\n    console.log(`player '${player.name}' deleted`);\r\n}\r\n\r\nconst setFirebaseGameState = (state) => {\r\n    db.collection('adminVars').doc('GameState').set(state);\r\n    console.log(\"gameState set\", state);\r\n}\r\n\r\nconst uploadQuestions = (json) => {\r\n    let blankAnswers = {};\r\n    for (let i = 0; i < json.length; i++) {\r\n        db.collection('questions').doc('q'+i).set({...json[i]});\r\n        blankAnswers['q'+i] = {};\r\n    }\r\n    db.collection('adminVars').doc('PlayerAnswers').set(blankAnswers);\r\n}\r\n\r\nconst deleteQuestions = (questions) => {\r\n    questions.forEach(question => {\r\n        db.collection('questions').doc(question.id).delete();\r\n        console.log(`question '${question.id}' deleted`);\r\n    })\r\n}\r\n\r\nconst setAnswers = (ans) => {\r\n    db.collection('adminVars').doc('PlayerAnswers').set(ans);\r\n}\r\n\r\nexport {\r\n    deletePlayers,\r\n    kickPlayer,\r\n    setFirebaseGameState,\r\n    uploadQuestions,\r\n    deleteQuestions,\r\n    setAnswers,\r\n};","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport AdminWaiting from './admin-page/AdminWaiting';\r\nimport AdminPlaying from './admin-page/AdminPlaying';\r\nimport AdminReview from './admin-page/AdminReview';\r\nimport AdminOffline from './admin-page/AdminOffline';\r\n\r\nimport {\r\n    deletePlayers,\r\n    kickPlayer,\r\n    setFirebaseGameState,\r\n    uploadQuestions,\r\n    deleteQuestions,\r\n    setAnswers,\r\n} from './AdminFirebase';\r\n\r\n\r\nconst AdminPage = ({ pageStates, pageState, playersList, localGameState, setLocalGameState, questions, playerAnswers }) => {\r\n\r\n    const initializeGame = () => {\r\n        let newGameState = {\r\n            pageState: pageStates.WAITING,\r\n            questionIndex: null,\r\n            questionActive: false,\r\n        };\r\n        setLocalGameState(newGameState);\r\n        setFirebaseGameState(newGameState);\r\n    }\r\n    const clearGame = () => {\r\n        let newGameState = {\r\n            pageState: pageStates.OFFLINE,\r\n            questionIndex: null,\r\n            questionActive: false,\r\n        };\r\n        setLocalGameState(newGameState);\r\n        setFirebaseGameState(newGameState);\r\n\r\n        deletePlayers(playersList);\r\n        deleteQuestions(questions);\r\n        setAnswers({});\r\n    }\r\n    const startGame = () => {\r\n        let newGameState = {\r\n            pageState: pageStates.PLAYING,\r\n            questionIndex: 0,\r\n            questionActive: true,\r\n        };\r\n        setLocalGameState(newGameState);\r\n        setFirebaseGameState(newGameState);\r\n    }\r\n    const prevQuestion = () => {\r\n        let qIndex = localGameState.questionIndex - 1;\r\n        if (qIndex >= 0) {\r\n            let newGameState = {\r\n                pageState: pageStates.PLAYING,\r\n                questionIndex: qIndex,\r\n                questionActive: true,\r\n            };\r\n            setLocalGameState(newGameState);\r\n            setFirebaseGameState(newGameState);\r\n        }\r\n    }\r\n    const nextQuestion = () => {\r\n        let qIndex = localGameState.questionIndex + 1;\r\n        let newGameState = {};\r\n        if (qIndex < questions.length) {\r\n            newGameState = {\r\n                pageState: pageStates.PLAYING,\r\n                questionIndex: qIndex,\r\n                questionActive: true,\r\n            };\r\n        } else {\r\n            newGameState = {\r\n                pageState: pageStates.REVIEW,\r\n                questionIndex: null,\r\n                questionActive: false,\r\n            };\r\n        }\r\n        setLocalGameState(newGameState);\r\n        setFirebaseGameState(newGameState);\r\n    }\r\n    const endQuestion = () => {\r\n        let newGameState = {\r\n            pageState: pageStates.PLAYING,\r\n            questionIndex: localGameState.questionIndex,\r\n            questionActive: false,\r\n        }\r\n        setLocalGameState(newGameState);\r\n        setFirebaseGameState(newGameState);\r\n    }\r\n\r\n    return (<>\r\n\r\n        {pageState === pageStates.OFFLINE ? <>\r\n            <AdminOffline\r\n                initializeGame={initializeGame}\r\n                clearGame={clearGame}\r\n                playersList={playersList}\r\n                uploadQuestions={uploadQuestions}\r\n                noQuestions={questions.length===0}\r\n            />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.WAITING ? <>\r\n            <AdminWaiting\r\n                playersList={playersList}\r\n                startGame={startGame}\r\n                quitGame={clearGame}\r\n                kickPlayer={kickPlayer}\r\n                noPlayers={playersList.length===0}\r\n            />\r\n        </> : <></>}\r\n\r\n        {pageState === pageStates.PLAYING ? <>\r\n            <AdminPlaying\r\n                quitGame={clearGame}\r\n                prevQuestion={prevQuestion}\r\n                nextQuestion={nextQuestion}\r\n                endQuestion={endQuestion}\r\n                questions={questions}\r\n                localGameState={localGameState}\r\n                playersList={playersList}\r\n                playerAnswers={playerAnswers[`q${localGameState.questionIndex}`]}\r\n            />\r\n        </> : <></>}\r\n        \r\n        {pageState === pageStates.REVIEW ? <>\r\n            <AdminReview\r\n                chartsData={questions}\r\n                playersList={playersList}\r\n                endGame={clearGame}\r\n                playerAnswers={playerAnswers}\r\n            />\r\n        </> : <></>}\r\n        \r\n    </>);\r\n}\r\n\r\nAdminPage.propTypes = {\r\n    pageStates: PropTypes.object.isRequired,\r\n    pageState: PropTypes.string.isRequired,\r\n    playersList: PropTypes.array.isRequired,\r\n    chartData: PropTypes.object,\r\n    localGameState: PropTypes.object.isRequired,\r\n    setLocalGameState: PropTypes.func.isRequired,\r\n    questions: PropTypes.array.isRequired,\r\n    playerAnswers: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default AdminPage;","import PropTypes from 'prop-types';\r\n\r\nimport {\r\n    Navbar,\r\n    Nav,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Form,\r\n    InputGroup,\r\n    FormControl,\r\n    Modal,\r\n} from 'react-bootstrap';\r\n\r\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\r\n\r\n\r\nconst GameMainMenu = ({ onSubmitName, canSubmitName, showKickModal, handleCloseKick, settings, showBadSectionModal, handleShowBadSection, handleCloseBadSection }) => {\r\n\r\n    const handleNameSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let name = e.target[0].value;\r\n        let section = parseInt(e.target[1].value);\r\n\r\n        if (!isNaN(section)) {\r\n            onSubmitName(name, section);\r\n        } else {\r\n            handleShowBadSection();\r\n        }\r\n    }\r\n\r\n    return (<>\r\n\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand>\r\n                {settings}\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\" />\r\n            <Nav>\r\n                <Nav.Item className=\"mr-2\">\r\n                <LinkContainer to=\"/team-page\">\r\n                    <Button>Go to <strong>Team Page</strong></Button>\r\n                </LinkContainer>\r\n                </Nav.Item>\r\n                <Nav.Link href=\"https://github.com/BlaziusMaximus/NameThatSummation\">\r\n                Go to <strong>GitHub</strong>\r\n                </Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <Modal show={showKickModal} onHide={handleCloseKick} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Kicked From Game</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                You've been kicked from the game and removed from the database.\r\n                Contact the administrator for more information.\r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n        <Modal show={showBadSectionModal} onHide={handleCloseBadSection} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Invalid Section</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                The section number you entered is invalid.\r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n        <Container style={{\"height\":\"60vh\", \"paddingTop\":\"20vh\"}}>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col sm=\"auto\"><h1>Name That Summation</h1></Col>\r\n            </Row>\r\n            <br />\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col sm={8}>\r\n                <Form onSubmit={handleNameSubmit}>\r\n                <Form.Row>\r\n                <InputGroup>\r\n                    <Col style={{padding: \"0\"}}>\r\n                    <FormControl\r\n                        placeholder=\"Display Name\"\r\n                        aria-label=\"Display Name\"\r\n                        aria-describedby=\"display-name-form\"\r\n                    />\r\n                    </Col>\r\n                    <Col style={{padding: \"0\"}}>\r\n                    <FormControl\r\n                        placeholder=\"Section\"\r\n                        aria-label=\"Section\"\r\n                        aria-describedby=\"section-form\"\r\n                    />\r\n                    </Col>\r\n                    <InputGroup.Append>\r\n                        <Button variant=\"outline-primary\" type=\"submit\" disabled={!canSubmitName}>Submit</Button>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n                </Form.Row>\r\n                </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n        \r\n    </>);\r\n}\r\n\r\nGameMainMenu.propTypes = {\r\n    onSubmitName: PropTypes.func.isRequired,\r\n    canSubmitName: PropTypes.bool.isRequired,\r\n    showKickModal: PropTypes.bool.isRequired,\r\n    handleCloseKick: PropTypes.func.isRequired,\r\n    settings: PropTypes.object.isRequired,\r\n    showBadSectionModal: PropTypes.bool.isRequired,\r\n    handleCloseBadSection: PropTypes.func.isRequired,\r\n    handleShowBadSection: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default GameMainMenu;","import evaluatex from \"evaluatex\";\r\n\r\n\r\nconst pointEval = (evalChoice, e) => {\r\n    let y = evaluatex(evalChoice)({x:e});\r\n    if (y === Infinity || y === -Infinity) {\r\n        return null;\r\n    }\r\n    return y;\r\n}\r\n\r\nexport {\r\n    pointEval,\r\n};","import {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport evaluatex from \"evaluatex\";\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport GameChart from '../GameChart';\r\nimport {\r\n    pointEval,\r\n} from '../GameUtils';\r\n\r\n\r\nconst GameQuestion = ({ displayName, chartData, questionTime, timer, endQuestion, selectAnswer }) => {\r\n\r\n    const [showFeedbackModal, setShowFeedbackModal] = useState(false);\r\n    const hideFeedbackModal = () => {\r\n        setShowFeedbackModal(false);\r\n\r\n        if (answerChoiceIndex === chartData.answerIndex) {\r\n            endQuestion(answerTime);\r\n        }\r\n    }\r\n    // setShowFeedbackModal(false);\r\n\r\n    const [answerChoiceIndex, setAnswerChoiceIndex] = useState(null);\r\n    const [answersClicked, setAnswersClicked] = useState(new Array(chartData.renderChoices.length).fill(0));\r\n    const [answerTime, setAnswerTime] = useState(null);\r\n    const handleAnswerSelect = (e) => {\r\n        e.preventDefault();\r\n        let id = parseInt(e.currentTarget.id);\r\n        let newAnsClicked = answersClicked; newAnsClicked[parseInt(id)] = 1; setAnswersClicked(newAnsClicked);\r\n        \r\n        selectAnswer(id, questionTime-timer);\r\n        setAnswerChoiceIndex(id);\r\n        setAnswerTime(questionTime-timer);\r\n\r\n        setShowFeedbackModal(true);\r\n    }\r\n\r\n    let cd = {...chartData};\r\n    cd.data = cd.data.slice(0,1);\r\n    const [chartDataSlice, setChartDataSlice] = useState(cd);\r\n    useEffect(() => {\r\n        cd = {...chartData};\r\n        let x = parseFloat(questionTime-timer)/parseFloat(questionTime);\r\n        let l = chartData.data.length;\r\n        let sliceI = Math.floor(x*(l-1))+1;//Math.floor(x**2 * (l-2))+2;\r\n        cd.data = cd.data.slice(0, Math.min(l, sliceI));\r\n        console.log(cd.data)\r\n        setChartDataSlice(cd);\r\n    }, [timer, questionTime, chartData]);\r\n\r\n    return (<>\r\n\r\n        <Card style={{height:\"90vh\"}} className=\"text-center\">\r\n            <Card.Header as=\"h5\">Time Remaining: {timer}</Card.Header>\r\n            <Card.Body>\r\n                <GameChart data={[chartDataSlice]} />\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                {chartData.renderChoices.map((e,index) => (\r\n                <Button\r\n                    id={index} key={index}\r\n                    onClickCapture={handleAnswerSelect}\r\n                    variant={answersClicked[index]===1?(index===chartData.answerIndex?\"success\":\"danger\"):\"primary\"}\r\n                    disabled={answersClicked[index]===1}\r\n                    style={{margin: \"0 2%\"}}>\r\n                        <MathComponent tex={`y = ${e}`} style={{pointerEvents:\"none;\"}} display={false} />\r\n                </Button>\r\n                ))}\r\n            </Card.Footer>\r\n        </Card>\r\n\r\n        <Modal show={showFeedbackModal} onHide={hideFeedbackModal} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{answerChoiceIndex===chartData.answerIndex?\"Correct!\":\"Not Quite...\"}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            {answerChoiceIndex===chartData.answerIndex ?<>\r\n                <p>Good work! <MathComponent tex={`y = ${chartData.renderChoices[answerChoiceIndex]}`} display={false} /> was the correct equation.</p>\r\n                <Card style={{height:\"40vh\"}} className=\"text-center\">\r\n                    <GameChart data={[chartData]} />\r\n                </Card>\r\n            </>:<>\r\n                <p>Not quite... <MathComponent tex={`y = ${chartData.renderChoices[answerChoiceIndex]}`} display={false} /> isn't correct.</p>\r\n                <Card style={{height:\"40vh\"}} className=\"text-center\">\r\n                    <GameChart\r\n                        data={answerChoiceIndex==null?[chartDataSlice]:[\r\n                            chartDataSlice, \r\n                            { \"id\": \"wrongData\", \"data\": [...Array(Math.floor((chartData.xEnd-chartData.xStart)/parseFloat(chartData.xInc))+1).keys()].map(e => (\r\n                                { \"x\":String(e), \"y\":pointEval(chartData.evalChoices[answerChoiceIndex], e) }\r\n                            )).slice(0,chartDataSlice.data.length)}\r\n                        ]}\r\n                    />\r\n                </Card>\r\n            </>}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={hideFeedbackModal}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    \r\n    </>);\r\n}\r\n\r\nGameQuestion.propTypes = {\r\n    displayName: PropTypes.string.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    questionTime: PropTypes.number.isRequired,\r\n    timer: PropTypes.number.isRequired,\r\n    endQuestion: PropTypes.func.isRequired,\r\n    selectAnswer: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default GameQuestion;","import PropTypes from 'prop-types';\r\n\r\nimport {\r\n    Spinner,\r\n    Container,\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\n\r\nconst GameWaitingRoom = ({}) => {\r\n\r\n    return (<>\r\n\r\n        <Container style={{\"height\":\"80vh\", \"paddingTop\":\"40vh\"}}>\r\n            <Row style={{\"justifyContent\":\"center\"}}>\r\n                <Col xs=\"auto\" style={{marginTop: \"auto\", marginBottom: \"auto\"}}>\r\n                    <h1>WAITING</h1>\r\n                </Col>\r\n                <Col xs=\"auto\" style={{marginTop: \"auto\", marginBottom: \"auto\"}}>\r\n                    <Spinner animation=\"border\" />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n        \r\n    </>);\r\n}\r\n\r\nGameWaitingRoom.propTypes = {\r\n}\r\n\r\nexport default GameWaitingRoom;","import PropTypes from 'prop-types';\r\nimport React, {useState} from 'react';\r\n\r\nimport {\r\n    ListGroup,\r\n} from 'react-bootstrap';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\n\r\nconst GameAnswerSelections = ({ player, chartData, showWrongChart }) => {\r\n\r\n\r\n    return (<>\r\n\r\n        <h3>Answer Selections:</h3>\r\n        <ListGroup horizontal>\r\n        {player.wrongAnswers[chartData.id]!==undefined ? player.wrongAnswers[chartData.id].map((ans) => (\r\n            <ListGroup.Item key={ans+\"wrong\"} variant=\"danger\" action onClickCapture={() => showWrongChart(ans)} style={{width: \"auto\"}}>\r\n                <MathComponent tex={`y = ${chartData.renderChoices[ans]}`} display={false} />\r\n            </ListGroup.Item>\r\n        )) : <></>}\r\n        {player.answers[chartData.id]===chartData.answerIndex ? (\r\n            <ListGroup.Item key={chartData.answerIndex+\"right\"} variant=\"success\">\r\n                <MathComponent tex={`y = ${chartData.renderChoices[chartData.answerIndex]}`} display={false} />\r\n            </ListGroup.Item>\r\n        ) : <></>}\r\n        {player.wrongAnswers[chartData.id]===undefined && player.answers[chartData.id]!==chartData.answerIndex ? (\r\n            <ListGroup.Item key={chartData.id+\"none\"} variant=\"warning\">\r\n                NONE\r\n            </ListGroup.Item>\r\n        ) : <></>}\r\n        </ListGroup>\r\n\r\n    </>);\r\n}\r\n\r\nGameAnswerSelections.propTypes = {\r\n    player: PropTypes.object.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    showWrongChart: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default GameAnswerSelections;","import PropTypes from 'prop-types';\r\nimport React, {useState} from 'react';\r\n\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    Button,\r\n    Table,\r\n} from 'react-bootstrap';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport GameAnswerSelections from './game-components/GameAnswerSelections';\r\nimport GameChart from '../GameChart';\r\nimport {\r\n    pointEval,\r\n} from '../GameUtils';\r\n\r\n\r\nconst GameLeaderboard = ({ player, chartData, topPlayers }) => {\r\n\r\n    const localPlayer = topPlayers.find(p => p.id===player.id)===undefined ? player : null;\r\n\r\n    const [wrongChartIndex, setWrongChartIndex] = useState(null);\r\n    const toggleWrongChart = (a) => {\r\n        if (wrongChartIndex === a) { setWrongChartIndex(null); }\r\n        else { setWrongChartIndex(a); }\r\n    }\r\n\r\n    return (<>\r\n\r\n        <Container fluid>\r\n            <br />\r\n            <Row>\r\n                <Col xs={7}>\r\n                <Card style={{height:\"70vh\"}} className=\"text-center\">\r\n                    <Card.Header as=\"h5\">Time Spent on Question: {player.times[chartData.id]}s</Card.Header>\r\n                    <Card.Body>\r\n                    {wrongChartIndex===null ?\r\n                        <GameChart data={[chartData]} />\r\n                    :\r\n                        <GameChart\r\n                            data={[chartData, \r\n                                { \"id\": \"wrongData\", \"data\": [...Array(Math.floor((chartData.xEnd-chartData.xStart)/parseFloat(chartData.xInc))+1).keys()].map(e => (\r\n                                    { \"x\":String(e), \"y\":pointEval(chartData.evalChoices[wrongChartIndex], e) }\r\n                                ))}\r\n                            ]}\r\n                        />\r\n                    }\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        {chartData.renderChoices.map((e,index) => (\r\n                        <Button\r\n                            id={index}\r\n                            key={index}\r\n                            disabled\r\n                            variant={index===chartData.answerIndex?\"success\":\"primary\"}\r\n                            style={{margin: \"0 2%\"}}>\r\n                                <MathComponent tex={`y = ${e}`} display={false} />\r\n                        </Button>\r\n                        ))}\r\n                    </Card.Footer>\r\n                </Card>\r\n                <GameAnswerSelections\r\n                    player={player}\r\n                    chartData={chartData}\r\n                    showWrongChart={toggleWrongChart}\r\n                />\r\n                </Col>\r\n                <Col>\r\n                    <h1>LEADERBOARD</h1>\r\n                    <Table striped bordered>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Top Players</th>\r\n                                <th>Scores</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {topPlayers.map(topPlayer =>\r\n                            <tr\r\n                                key={topPlayer.name+\"\"+topPlayer.score}\r\n                                style={topPlayer.id===player.id?{backgroundColor: \"lightgreen\"}:{}}>\r\n                                    {topPlayer.id===player.id\r\n                                    ? <td><b>{topPlayer.name}</b></td>\r\n                                    : <td>{topPlayer.name}</td>\r\n                                    }\r\n                                    <td>{topPlayer.score}</td>\r\n                            </tr>\r\n                            )}\r\n                            {localPlayer == null ? <></> : (<>\r\n                            <tr key=\"ellipsis\">\r\n                                <td colSpan={2} style={{textAlign: \"center\"}}>...</td>\r\n                            </tr>\r\n                            <tr key=\"localPlayer\" style={{backgroundColor: \"lightgreen\"}}>\r\n                                <td><b>{localPlayer.name}</b></td>\r\n                                <td>{localPlayer.score}</td>\r\n                            </tr>\r\n                            </>)}\r\n                        </tbody>\r\n                    </Table>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    \r\n    </>);\r\n}\r\n\r\nGameLeaderboard.propTypes = {\r\n    player: PropTypes.object.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    topPlayers: PropTypes.array.isRequired,\r\n    settings: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default GameLeaderboard;","import PropTypes from 'prop-types';\r\nimport React, {useState} from 'react';\r\n\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    Button,\r\n    Tab,\r\n    ListGroup,\r\n    Table,\r\n} from 'react-bootstrap';\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport GameAnswerSelections from './game-components/GameAnswerSelections';\r\nimport GameChart from '../GameChart';\r\nimport {\r\n    pointEval,\r\n} from '../GameUtils';\r\n\r\n\r\nconst GameReview = ({ player, chartsData, topPlayers }) => {\r\n\r\n    const localPlayer = topPlayers.find(p => p.id===player.id)===undefined ? player : null;\r\n\r\n    const [wrongChartIndex, setWrongChartIndex] = useState(null);\r\n    const toggleWrongChart = (a) => {\r\n        if (wrongChartIndex === a) { setWrongChartIndex(null); }\r\n        else { setWrongChartIndex(a); }\r\n    }\r\n\r\n    return (<>\r\n\r\n        <Container fluid>\r\n        <br />\r\n        <Row>\r\n            <Col xs={8}>\r\n            <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey={chartsData[0].id}>\r\n            <Row>\r\n                <Col sm={3}>\r\n                    <ListGroup>\r\n                        {chartsData.map((chart,index) => (\r\n                        <ListGroup.Item href={chart.id} key={chart.id} style={{cursor: \"pointer\"}}>\r\n                            Q{index+1}: {chart.id}\r\n                        </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n                </Col>\r\n                <Col sm={9}>\r\n                <Tab.Content>\r\n                    {chartsData.map((chart,index) => (\r\n                    <Tab.Pane eventKey={chart.id} key={chart.id}>\r\n                    <Card style={{height:\"65vh\"}} className=\"text-center\">\r\n                        <Card.Header as=\"h5\">Time Spent on Question: {player.times[`q${index}`]}s</Card.Header>\r\n                        <Card.Body>\r\n                        {wrongChartIndex===null ?\r\n                            <GameChart data={[chart]} />\r\n                        :\r\n                            <GameChart\r\n                                data={[chart, \r\n                                    { \"id\": \"wrongData\", \"data\": [...Array(Math.floor((chart.xEnd-chart.xStart)/parseFloat(chart.xInc))+1).keys()].map(e => (\r\n                                        { \"x\":String(e), \"y\":pointEval(chart.evalChoices[wrongChartIndex], e) }\r\n                                    ))}\r\n                                ]}\r\n                            />\r\n                        }\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            {chart.renderChoices.map((e, expindex) => (\r\n                            <Button disabled id={e} key={e} variant={chart.answerIndex===expindex?\"success\":\"primary\"} style={{margin: \"0 2%\"}}>\r\n                                <MathComponent tex={`y = ${e}`} display={false} />\r\n                            </Button>\r\n                            ))}\r\n                        </Card.Footer>\r\n                    </Card>\r\n                    <br />\r\n                    <GameAnswerSelections\r\n                        player={player}\r\n                        chartData={chart}\r\n                        showWrongChart={toggleWrongChart}\r\n                    />\r\n                    </Tab.Pane>\r\n                    ))}\r\n                </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n            </Tab.Container>\r\n            </Col>\r\n            <Col>\r\n                <h1>LEADERBOARD</h1>\r\n                <Table striped bordered>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Top Players</th>\r\n                            <th>Scores</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {topPlayers.map(topPlayer =>\r\n                        <tr\r\n                            key={topPlayer.name+\"\"+topPlayer.score}\r\n                            style={topPlayer.id===player.id?{backgroundColor: \"lightgreen\"}:{}}>\r\n                                {topPlayer.id===player.id\r\n                                ? <td><b>{topPlayer.name}</b></td>\r\n                                : <td>{topPlayer.name}</td>\r\n                                }\r\n                                <td>{topPlayer.score}</td>\r\n                        </tr>\r\n                        )}\r\n                        {localPlayer == null ? <></> : (<>\r\n                        <tr key=\"ellipsis\">\r\n                            <td colSpan={2} style={{textAlign: \"center\"}}>...</td>\r\n                        </tr>\r\n                        <tr key=\"localPlayer\" style={{backgroundColor: \"lightgreen\"}}>\r\n                            <td><b>{localPlayer.name}</b></td>\r\n                            <td>{localPlayer.score}</td>\r\n                        </tr>\r\n                        </>)}\r\n                    </tbody>\r\n                </Table>\r\n            </Col>\r\n        </Row>\r\n        </Container>\r\n    \r\n    </>);\r\n}\r\n\r\nGameReview.propTypes = {\r\n    player: PropTypes.object.isRequired,\r\n    chartsData: PropTypes.array.isRequired,\r\n    topPlayers: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default GameReview;","import PropTypes from 'prop-types';\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    Form,\r\n} from 'react-bootstrap';\r\n\r\n\r\nconst GameSettings = ({ showSettingsModal, handleShowSettings, handleCloseSettings }) => {\r\n\r\n    return (<>\r\n\r\n        <Button variant=\"secondary\" onClick={handleShowSettings}><i className=\"bi bi-gear\"></i></Button>\r\n\r\n        <Modal show={showSettingsModal} onHide={handleCloseSettings} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n            <Modal.Title>Settings</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <fieldset>\r\n                <Form>\r\n                    <Form.Check type=\"checkbox\" label=\"Settings Option 1\" />\r\n                    <Form.Check type=\"checkbox\" label=\"Settings Option 2\" />\r\n                </Form>\r\n                <Form>\r\n                    <Form.Check type=\"radio\" label=\"Settings Option 3\" />\r\n                    <Form.Check type=\"radio\" label=\"Settings Option 4\" />\r\n                </Form>\r\n            </fieldset>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleCloseSettings}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n    </>);\r\n}\r\n\r\nGameSettings.propTypes = {\r\n    showSettingsModal: PropTypes.bool.isRequired,\r\n    handleShowSettings: PropTypes.func.isRequired,\r\n    handleCloseSettings: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default GameSettings;","import { db } from \"../firebase\";\r\n\r\n\r\nconst setPlayer = (obj) => {\r\n    db.collection(\"playersDB\").doc(obj.name).set(obj);\r\n    console.log(obj)\r\n}\r\n\r\nconst setAnswers = (ans) => {\r\n    db.collection('adminVars').doc('PlayerAnswers').set(ans);\r\n}\r\n\r\nexport {\r\n    setPlayer,\r\n    setAnswers,\r\n};","import PropTypes from 'prop-types';\r\nimport React, {useState} from 'react';\r\n\r\nimport {\r\n    Navbar,\r\n    Nav,\r\n    Button,\r\n    Modal,\r\n} from 'react-bootstrap';\r\n\r\n\r\nconst GamePageHeader = ({ player, goToMainMenu, settings }) => {\r\n\r\n    const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n    const handleShowConfirm = () => setShowConfirmModal(true);\r\n    const handleCloseConfirm = () => setShowConfirmModal(false);\r\n\r\n    return (<>\r\n\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand style={{paddingRight: \"2vw\"}}>\r\n                {settings}\r\n            </Navbar.Brand>\r\n            <Navbar.Brand style={{paddingRight: \"2vw\"}}>\r\n                <strong>Name</strong>: {player.name}\r\n            </Navbar.Brand>\r\n            <Navbar.Brand>\r\n                <strong>Score</strong>: {player.score}\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"mr-auto\" />\r\n            <Nav>\r\n            <Nav.Item className=\"mr-2\">\r\n                <Button onClick={handleShowConfirm}>Go to <strong>Main Menu</strong></Button>\r\n            </Nav.Item>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <Modal show={showConfirmModal} onHide={handleCloseConfirm} aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n            <Modal.Header closeButton>\r\n            <Modal.Title>Main Menu</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                By going to the Main Menu screen, you'll be leaving the game.\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => {handleCloseConfirm(); goToMainMenu();}}>Confirm</Button>\r\n                <Button variant=\"secondary\" onClick={handleCloseConfirm}>Cancel</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n    </>);\r\n}\r\n\r\nGamePageHeader.propTypes = {\r\n    player: PropTypes.object.isRequired,\r\n    goToMainMenu: PropTypes.func.isRequired,\r\n    settings: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default GamePageHeader;","import PropTypes from 'prop-types';\r\nimport React, {useState} from 'react';\r\n\r\nimport GameMainMenu from './game-page/GameMainMenu';\r\nimport GameQuestion from './game-page/GameQuestion';\r\nimport GameWaitingRoom from './game-page/GameWaitingRoom';\r\nimport GameLeaderboard from './game-page/GameLeaderboard';\r\nimport GameReview from './game-page/GameReview';\r\nimport GameSettings from './game-page/game-components/GameSettings';\r\n\r\nimport DevPanel from './DevPanel';\r\n\r\nimport {\r\n    setPlayer,\r\n    setAnswers,\r\n} from './GameFirebase';\r\nimport GamePageHeader from './game-page/game-components/GamePageHeader';\r\n\r\n\r\nconst GamePage = ({ questions, chartData, players, adminQuestionIndex, questionActive, waitingRoomIsOpen, playerAnswers, kickPlayer, pointEval }) => {\r\n\r\n    // enum object of game webpage states relevant to the player\r\n    const pageStates = {\r\n        MAIN_MENU: \"MAIN_MENU\",\r\n        WAITING_ROOM: \"WAITING_ROOM\",\r\n        QUESTION: \"QUESTION\",\r\n        LEADERBOARD: \"LEADERBOARD\",\r\n        REVIEW: \"REVIEW\",\r\n    };\r\n    const [pageState, setPageState] = useState(pageStates.MAIN_MENU);\r\n    \r\n    const [timer, setTimer] = useState(chartData.questionTime); // question timer\r\n    \r\n    const [questionIndex, setQuestionIndex] = useState(null);\r\n\r\n    // local copy of firebase's version of the local player\r\n    const [localPlayerObj, setLocalPlayerObj] = useState({\r\n        id: null,\r\n        name: null,\r\n        score: null,\r\n        section: null,\r\n        answers: {},\r\n        wrongAnswers: {},\r\n        times: {},\r\n    });\r\n\r\n    // kicked from game modal logic\r\n    const [showKickModal, setShowKickModal] = useState(false);\r\n    const handleShowKick = () => setShowKickModal(true);\r\n    const handleCloseKick = () => setShowKickModal(false);\r\n    // non-integer section input modal logic\r\n    const [showBadSectionModal, setShowBadSectionModal] = useState(false);\r\n    const handleShowBadSection = () => setShowBadSectionModal(true);\r\n    const handleCloseBadSection = () => setShowBadSectionModal(false);\r\n    \r\n    const goToMainMenu = () => {\r\n        setPageState(pageStates.MAIN_MENU);\r\n    }\r\n    const goToWaitingRoom = (name, section) => {\r\n        setPageState(pageStates.WAITING_ROOM);\r\n        const newPlayerObj = {\r\n            ...localPlayerObj,\r\n            id: Math.floor(Math.random()*Date.now()),\r\n            \"name\": name,\r\n            \"section\": section,\r\n            \"score\": 0,\r\n        }\r\n        setLocalPlayerObj({...newPlayerObj}); // update local player\r\n        setPlayer({...newPlayerObj}); // update firebase player\r\n    }\r\n    const goToQuestion = React.useCallback(() => {\r\n        setPageState(pageStates.QUESTION);\r\n        setQuestionIndex(adminQuestionIndex);\r\n        setTimer(questions[adminQuestionIndex].questionTime);\r\n    }, [adminQuestionIndex, pageStates.QUESTION]);\r\n    const goToLeaderboard = React.useCallback(() => {\r\n        setPageState(pageStates.LEADERBOARD);\r\n    }, [pageStates.LEADERBOARD]);\r\n    const goToReview = React.useCallback(() => {\r\n        setPageState(pageStates.REVIEW);\r\n    }, [pageStates.REVIEW]);\r\n\r\n    React.useEffect(() => {\r\n        // when progressing from the leaderboard page, logic for going to next question or review\r\n        if (adminQuestionIndex != null && (pageState === pageStates.WAITING_ROOM || (adminQuestionIndex !== questionIndex && questionIndex !== null))) {\r\n            goToQuestion();\r\n        }\r\n        if (adminQuestionIndex === null && (pageState === pageStates.QUESTION || pageState === pageStates.LEADERBOARD)) {\r\n            goToReview();\r\n        }\r\n    }, [adminQuestionIndex, questionIndex, pageState, pageStates.WAITING_ROOM, pageStates.QUESTION, pageStates.LEADERBOARD, goToQuestion, goToReview]);\r\n\r\n    const handleAnswerSubmit = async (a,t) => {\r\n        // console.log(localPlayerObj.name, \"answer:\", a, \"time:\", t, \"score:\",chartData.maxScore*t);\r\n        const points = parseFloat(chartData.maxScore)*parseFloat(chartData.questionTime-t)/parseFloat(chartData.questionTime);\r\n        // update answer at question id to latest submission\r\n        let localAnswers = {...localPlayerObj.answers};\r\n        localAnswers[chartData.id] = a;\r\n        // initialize wrong answer array at question id if first submission\r\n        let firstAnswer = false;\r\n        let localWrongs = localPlayerObj.wrongAnswers;\r\n        if (localWrongs[chartData.id] === undefined) { localWrongs[chartData.id] = []; firstAnswer = true; }\r\n        // update wrong answer array if necessary\r\n        let rightAnswer = (a === chartData.answerIndex);\r\n        if (!rightAnswer) { localWrongs[chartData.id].push(a); }\r\n        // update submission time at question id\r\n        let localTimes = {...localPlayerObj.times};\r\n        localTimes[chartData.id] = t;\r\n        // update player object for local and firebase storage\r\n        const newPlayerObj = {\r\n            ...localPlayerObj,\r\n            answers: localAnswers,\r\n            wrongAnswers: localWrongs,\r\n            times: localTimes,\r\n            score: localPlayerObj.score + (firstAnswer&&rightAnswer?Math.floor(points):0),\r\n        };\r\n        console.log(localPlayerObj.score, firstAnswer&&rightAnswer?Math.floor(points):0)\r\n        setLocalPlayerObj({...newPlayerObj}); // local\r\n        setPlayer({...newPlayerObj});         // firebase\r\n        // update PlayerAnswers AdminVar for progress bars\r\n        let newAnswers = playerAnswers;\r\n        newAnswers[chartData.id][localPlayerObj.id] = a;\r\n        setAnswers({...newAnswers});\r\n        // console.log(playerAnswers, newAnswers);\r\n    }\r\n\r\n    const wipePlayer = () => {\r\n        kickPlayer(localPlayerObj);\r\n        setLocalPlayerObj({\r\n            id: null,\r\n            name: null,\r\n            score: null,\r\n            section: null,\r\n            answers: {},\r\n            wrongAnswers: {},\r\n            times: {},\r\n        });\r\n    }\r\n\r\n    // top 5 players for leaderboard\r\n    const [topPlayers, setTopPlayers] = useState([]);\r\n    React.useEffect(() => {\r\n        setTopPlayers(\r\n            players.filter(a => Number.isInteger(a.score))\r\n                   .sort((a,b) => a.score<b.score ? 1 : -1)\r\n                   .slice(0,5)\r\n        );\r\n        // if local player not found in firebase, kick from game\r\n        if (pageState !== pageStates.MAIN_MENU && players.find(player => player.id === localPlayerObj.id) === undefined) {\r\n            // console.log(\"local player not in playersDB\", players, localPlayerObj);\r\n            setPageState(pageStates.MAIN_MENU);\r\n            handleShowKick();\r\n            if (localPlayerObj.name != null) { wipePlayer(); }\r\n        }\r\n    }, [players, pageStates.MAIN_MENU]);\r\n\r\n    // timing logic\r\n    React.useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (pageState === pageStates.QUESTION && localPlayerObj.answers[chartData.id] !== chartData.answerIndex) {\r\n                if (timer > 0) {\r\n                    let tim = {...localPlayerObj.times};\r\n                    tim[chartData.id] = chartData.questionTime-(timer-1);\r\n                    const newPlayerObj = {\r\n                        ...localPlayerObj,\r\n                        times: tim,\r\n                    };\r\n                    // console.log(newPlayerObj)\r\n                    setLocalPlayerObj({...newPlayerObj});\r\n                    setPlayer({...newPlayerObj});\r\n                    setTimer(timer-1);\r\n                } else {\r\n                    let ans = {...localPlayerObj.answers};\r\n                    ans[chartData.id] = null;\r\n                    let tim = {...localPlayerObj.times};\r\n                    tim[chartData.id] = chartData.questionTime;\r\n                    const newPlayerObj = {\r\n                        ...localPlayerObj,\r\n                        answers: ans,\r\n                        times: tim,\r\n                    };\r\n                    // console.log({...newPlayerObj})\r\n                    setLocalPlayerObj({...newPlayerObj});\r\n                    setPlayer({...newPlayerObj});\r\n                    goToLeaderboard();\r\n                }\r\n            }\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, [timer, goToLeaderboard, pageState, pageStates.QUESTION, localPlayerObj]);\r\n\r\n    React.useEffect(() => {\r\n        if (pageState === pageStates.QUESTION && questionActive === false) {\r\n            goToLeaderboard();\r\n        }\r\n    }, [questionActive]);\r\n\r\n    const [showSettingsModal, setShowSettingsModal] = useState(false);\r\n    const handleShowSettings = () => setShowSettingsModal(true);\r\n    const handleCloseSettings = () => setShowSettingsModal(false);\r\n    const SettingsComponent = (\r\n        <GameSettings\r\n            showSettingsModal={showSettingsModal}\r\n            handleShowSettings={handleShowSettings}\r\n            handleCloseSettings={handleCloseSettings}\r\n        />\r\n    );\r\n\r\n    const DevComponent = (\r\n        <DevPanel\r\n            goToMainMenu={goToMainMenu}\r\n            goToLeaderboard={goToLeaderboard}\r\n            goToReview={goToReview}\r\n            goToQuestion={goToQuestion}\r\n            goToWaitingRoom={goToWaitingRoom}\r\n            displayName={localPlayerObj.name==null?\"\":localPlayerObj.name}\r\n            setDisplayName={(name) => setLocalPlayerObj({...localPlayerObj, \"name\":name})}\r\n        />\r\n    );\r\n    \r\n    const HeaderComponent = (\r\n        <GamePageHeader\r\n            player={localPlayerObj}\r\n            goToMainMenu={() => {wipePlayer(); goToMainMenu();}}\r\n            settings={SettingsComponent}\r\n        />\r\n    );\r\n\r\n    let PageComponent;\r\n    let renderHeader = true;\r\n    switch (pageState) {\r\n        case pageStates.MAIN_MENU:\r\n            PageComponent = (\r\n                <GameMainMenu\r\n                    onSubmitName={(name, section) => {\r\n                        setLocalPlayerObj({...localPlayerObj, \"name\":name, \"section\": section});\r\n                        goToWaitingRoom(name, section);\r\n                    }}\r\n                    canSubmitName={waitingRoomIsOpen}\r\n                    showKickModal={showKickModal}\r\n                    handleCloseKick={handleCloseKick}\r\n                    settings={SettingsComponent}\r\n                    showBadSectionModal={showBadSectionModal}\r\n                    handleCloseBadSection={handleCloseBadSection}\r\n                    handleShowBadSection={handleShowBadSection}\r\n                />\r\n            );\r\n            renderHeader = false;\r\n            break;\r\n        case pageStates.WAITING_ROOM:\r\n            PageComponent = (\r\n                <GameWaitingRoom\r\n                    displayName={localPlayerObj.name}\r\n                    playersList={players}\r\n                />\r\n            );\r\n            break;\r\n        case pageStates.QUESTION:\r\n            PageComponent = (\r\n                <GameQuestion\r\n                    displayName={localPlayerObj.name}\r\n                    chartData={chartData}\r\n                    questionTime={chartData.questionTime}\r\n                    timer={timer}\r\n                    endQuestion={goToLeaderboard}\r\n                    selectAnswer={handleAnswerSubmit}\r\n                    pointEval={pointEval}\r\n                />\r\n            );\r\n            break;\r\n        case pageStates.LEADERBOARD:\r\n            PageComponent = (\r\n                <GameLeaderboard\r\n                    player={localPlayerObj}\r\n                    chartData={chartData}\r\n                    topPlayers={topPlayers}\r\n                    pointEval={pointEval}\r\n                />\r\n            );\r\n            break;\r\n        case pageStates.REVIEW:\r\n            PageComponent = (\r\n                <GameReview\r\n                    player={localPlayerObj}\r\n                    chartsData={questions}\r\n                    topPlayers={topPlayers}\r\n                    pointEval={pointEval}\r\n                />\r\n            );\r\n            break;\r\n        default:\r\n            PageComponent = <></>;\r\n    }\r\n\r\n    return (<>\r\n\r\n        {renderHeader ? HeaderComponent : <></>}\r\n\r\n        {PageComponent}\r\n    \r\n    </>);\r\n}\r\n\r\nGamePage.propTypes = {\r\n    questions: PropTypes.array.isRequired,\r\n    chartData: PropTypes.object.isRequired,\r\n    players: PropTypes.array.isRequired,\r\n    adminQuestionIndex: PropTypes.number,\r\n    questionActive: PropTypes.bool,\r\n    waitingRoomIsOpen: PropTypes.bool.isRequired,\r\n    playerAnswers: PropTypes.object.isRequired,\r\n    kickPlayer: PropTypes.func.isRequired,\r\n    pointEval: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default GamePage;","import React from 'react';\nimport {useState} from 'react';\n\nimport { db } from \"./firebase\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport evaluatex from \"evaluatex\";\n\nimport Button from 'react-bootstrap/Button';\n\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\n\nimport TeamPageHeader from './components/team-page/TeamPageHeader';\nimport TeamPageBody from './components/team-page/TeamPageBody';\nimport AdminPage from './components/AdminPage';\nimport GamePage from './components/GamePage';\n\nimport {\n    deletePlayers,\n    setFirebaseGameState,\n    deleteQuestions,\n    kickPlayer,\n} from './components/AdminFirebase';\n\nimport {\n    pointEval,\n} from './components/GameUtils';\n\nimport './App.css';\n\nfunction App() {\n\n    // enum object of states from the admin perspective\n    const adminPageStates = {\n        OFFLINE: \"OFFLINE\",\n        WAITING: \"WAITING\",\n        PLAYING: \"PLAYING\",\n        REVIEW: \"REVIEW\",\n    };\n\n    // players array updated on firebase snapshot\n    const [players, setPlayers] = useState([]);\n    React.useEffect(() => {\n        db.collection(\"playersDB\").onSnapshot((snapshot) => {\n            // console.log(snapshot.docs);\n            if (snapshot.docs.length > 0) {\n                setPlayers(snapshot.docs.map(doc => doc.data()));\n            } else {\n                setPlayers([]);\n            }\n        });\n        console.log(\"fetched players from firebase\")\n    }, []);\n\n    // questions array updated on firebase snapshot\n    const [questions, setQuestions] = useState([]);\n    React.useEffect(() => {\n        db.collection(\"questions\").onSnapshot((snapshot) => {\n            // console.log(snapshot.docs);\n            setQuestions(snapshot.docs.map((doc) => {\n                // convert firebase questions document object to local questions object\n                let { xEnd, xStart, xInc, evalChoices, renderChoices, answerIndex, maxScore, questionTime } = doc.data();\n                return {\n                    \"id\": doc.id,\n                    \"color\": \"hsl(24, 70%, 50%)\",\n                    \"data\": [...Array(Math.floor((xEnd-xStart)/parseFloat(xInc))+1).keys()].map(e => (\n                        { \"x\":String(e), \"y\":pointEval(evalChoices[answerIndex], e) }\n                    )),\n                    \"renderChoices\": renderChoices,\n                    \"answerIndex\": answerIndex,\n                    \"maxScore\": maxScore==null?300:maxScore,\n                    \"evalChoices\": evalChoices,\n                    \"xEnd\": xEnd,\n                    \"xStart\": xStart,\n                    \"xInc\": xInc,\n                    \"questionTime\": questionTime,\n                };\n            }).sort((a,b) => parseInt(a.id.substring(1))>parseInt(b.id.substring(1))?1:-1)); // ensure questions are in numeric order\n\n        });\n        console.log(\"fetched questions from firebase\")\n    }, []);\n\n    // local game state according to admin\n    const [adminGameState, setAdminGameState] = useState({\n        pageState: adminPageStates.OFFLINE,\n        questionIndex: null,\n        questionActive: false,\n    });\n    // update local admin game state on firebase snapshot\n    React.useEffect(() => {\n        db.collection(\"adminVars\").doc(\"GameState\").onSnapshot((doc) => {\n            // console.log(doc.data());\n            if (doc.data() !== undefined) {\n                setAdminGameState(doc.data());\n            }\n\n            db.collection(\"playersDB\").get().then(playersDB => {\n                setPlayers(playersDB.docs.map(doc => doc.data()))\n            });\n        });\n        console.log(\"fetched adminVars.GameState from firebase\")\n    }, []);\n\n    // update player answers object on firebase snapshot\n    const [playerAnswers, setPlayerAnswers] = useState({});\n    React.useEffect(() => {\n        db.collection(\"adminVars\").doc(\"PlayerAnswers\").onSnapshot((doc) => {\n            // console.log(doc.data());\n            if (doc.data() !== undefined) {\n                setPlayerAnswers(doc.data());\n            }\n        });\n        console.log(\"fetched adminVars.PlayerAnswers from firebase\");\n    }, []);\n\n    // rendered components\n    return (\n    <Router basename=\"/NameThatSummation\">\n        <Switch>\n            {/* root level url */}\n            <Route exact path=\"/\">\n                <nav>\n                    <LinkContainer to=\"/team-page\">\n                        <Button>TEAM PAGE</Button>\n                    </LinkContainer>\n                    <LinkContainer to=\"/game-page\">\n                        <Button>GAME PAGE</Button>\n                    </LinkContainer>\n                    <LinkContainer to=\"/admin-page\">\n                        <Button>ADMIN PAGE</Button>\n                    </LinkContainer>\n                    <Button onClick={ () => {\n                        let newGameState = {\n                            pageState: adminPageStates.OFFLINE,\n                            questionIndex: null,\n                        };\n                        setAdminGameState(newGameState);\n                        setFirebaseGameState(newGameState);\n\n                        deletePlayers(players);\n                        deleteQuestions(questions);\n                    }} id=\"cleargame\" variant=\"danger\" size=\"lg\" block>Clear Game</Button>\n                </nav>\n            </Route>\n            <Route path=\"/team-page\">\n                <TeamPageHeader />\n                <br />\n                <TeamPageBody />\n            </Route>\n            <Route path=\"/game-page\">\n                <GamePage\n                    questions={questions}\n                    chartData={adminGameState.questionIndex!=null?questions[adminGameState.questionIndex]:{\n                        \"id\": \"\",\n                        \"color\": null,\n                        \"data\": [],\n                        \"renderChoices\": [],\n                        \"answerIndex\": null,\n                        \"maxScore\": null,\n                        \"questionTime\": 0,\n                    }}\n                    players={players}\n                    adminQuestionIndex={adminGameState.questionIndex}\n                    questionActive={adminGameState.questionActive}\n                    waitingRoomIsOpen={adminGameState.pageState === adminPageStates.WAITING}\n                    playerAnswers={playerAnswers}\n                    kickPlayer={kickPlayer}\n                    pointEval={pointEval}\n                />\n            </Route>\n            <Route path=\"/admin-page\">\n                <AdminPage\n                    pageStates={adminPageStates}\n                    pageState={adminGameState.pageState}\n                    playersList={players}\n                    localGameState={adminGameState}\n                    setLocalGameState={setAdminGameState}\n                    questions={questions}\n                    playerAnswers={playerAnswers}\n                />\n            </Route>\n        </Switch>\n        \n        {/* <br /><br />\n        <LinkContainer to=\"/\">\n            <Button>HOME</Button>\n        </LinkContainer> */}\n    </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}